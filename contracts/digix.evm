
======= ConfigInterface =======
EVM assembly:
Contract not fully implemented

======= ProxyPayment =======
EVM assembly:
.code:
  PUSH 60		contract ProxyPayment {...
  PUSH 40		contract ProxyPayment {...
  MSTORE			contract ProxyPayment {...
  PUSH 40		function ProxyPayment(address _payout, address _tokenSales) {...
  MLOAD			function ProxyPayment(address _payout, address _tokenSales) {...
  PUSH 40		function ProxyPayment(address _payout, address _tokenSales) {...
  DUP1			function ProxyPayment(address _payout, address _tokenSales) {...
  PUSHSIZE		function ProxyPayment(address _payout, address _tokenSales) {...
  DUP4			function ProxyPayment(address _payout, address _tokenSales) {...
  CODECOPY			function ProxyPayment(address _payout, address _tokenSales) {...
  DUP2			function ProxyPayment(address _payout, address _tokenSales) {...
  ADD			function ProxyPayment(address _payout, address _tokenSales) {...
  PUSH 40		function ProxyPayment(address _payout, address _tokenSales) {...
  MSTORE			function ProxyPayment(address _payout, address _tokenSales) {...
  DUP1			function ProxyPayment(address _payout, address _tokenSales) {...
  DUP1			function ProxyPayment(address _payout, address _tokenSales) {...
  MLOAD			function ProxyPayment(address _payout, address _tokenSales) {...
  SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
  PUSH 20		function ProxyPayment(address _payout, address _tokenSales) {...
  ADD			function ProxyPayment(address _payout, address _tokenSales) {...
  SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
  SWAP2			function ProxyPayment(address _payout, address _tokenSales) {...
  SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
  DUP1			function ProxyPayment(address _payout, address _tokenSales) {...
  MLOAD			function ProxyPayment(address _payout, address _tokenSales) {...
  SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
  PUSH 20		function ProxyPayment(address _payout, address _tokenSales) {...
  ADD			function ProxyPayment(address _payout, address _tokenSales) {...
  SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
  SWAP2			function ProxyPayment(address _payout, address _tokenSales) {...
  SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
  POP			function ProxyPayment(address _payout, address _tokenSales) {...
  POP			function ProxyPayment(address _payout, address _tokenSales) {...
tag1: 
  JUMPDEST		function ProxyPayment(address _payout, address _tokenSales) {...
  DUP2			_payout
  PUSH 0		payout
  PUSH 0		payout
  PUSH 100		payout = _payout
  EXP			payout = _payout
  DUP2			payout = _payout
  SLOAD			payout = _payout
  DUP2			payout = _payout
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		payout = _payout
  MUL			payout = _payout
  NOT			payout = _payout
  AND			payout = _payout
  SWAP1			payout = _payout
  DUP4			payout = _payout
  MUL			payout = _payout
  OR			payout = _payout
  SWAP1			payout = _payout
  SSTORE			payout = _payout
  POP			payout = _payout
  DUP1			_tokenSales
  PUSH 1		tokenSales
  PUSH 0		tokenSales
  PUSH 100		tokenSales = _tokenSales
  EXP			tokenSales = _tokenSales
  DUP2			tokenSales = _tokenSales
  SLOAD			tokenSales = _tokenSales
  DUP2			tokenSales = _tokenSales
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		tokenSales = _tokenSales
  MUL			tokenSales = _tokenSales
  NOT			tokenSales = _tokenSales
  AND			tokenSales = _tokenSales
  SWAP1			tokenSales = _tokenSales
  DUP4			tokenSales = _tokenSales
  MUL			tokenSales = _tokenSales
  OR			tokenSales = _tokenSales
  SWAP1			tokenSales = _tokenSales
  SSTORE			tokenSales = _tokenSales
  POP			tokenSales = _tokenSales
  DUP2			_payout
  PUSH 2		owner
  PUSH 0		owner
  PUSH 100		owner = _payout
  EXP			owner = _payout
  DUP2			owner = _payout
  SLOAD			owner = _payout
  DUP2			owner = _payout
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = _payout
  MUL			owner = _payout
  NOT			owner = _payout
  AND			owner = _payout
  SWAP1			owner = _payout
  DUP4			owner = _payout
  MUL			owner = _payout
  OR			owner = _payout
  SWAP1			owner = _payout
  SSTORE			owner = _payout
  POP			owner = _payout
tag2: 
  JUMPDEST		function ProxyPayment(address _payout, address _tokenSales) {...
  POP			function ProxyPayment(address _payout, address _tokenSales) {...
  POP			function ProxyPayment(address _payout, address _tokenSales) {...
  PUSH #[$00000000…00000000]		contract ProxyPayment {...
  DUP1			contract ProxyPayment {...
  PUSH [$00000000…00000000]		contract ProxyPayment {...
  PUSH 0		contract ProxyPayment {...
  CODECOPY			contract ProxyPayment {...
  PUSH 0		contract ProxyPayment {...
  RETURN			contract ProxyPayment {...
.data:
  0: 
  .code:
    PUSH 60		contract ProxyPayment {...
    PUSH 40		contract ProxyPayment {...
    MSTORE			contract ProxyPayment {...
    CALLDATASIZE			contract ProxyPayment {...
    ISZERO			contract ProxyPayment {...
    PUSH [tag1]		contract ProxyPayment {...
    JUMPI			contract ProxyPayment {...
    PUSH [tag1]		contract ProxyPayment {...
    JUMP			contract ProxyPayment {...
  tag1: 
    JUMPDEST		contract ProxyPayment {...
    PUSH [tag2]		contract ProxyPayment {...
  tag3: 
    JUMPDEST		function () {...
    PUSH 1		tokenSales
    PUSH 0		tokenSales
    SWAP1			tokenSales
    SLOAD			tokenSales
    SWAP1			tokenSales
    PUSH 100		tokenSales
    EXP			tokenSales
    SWAP1			tokenSales
    DIV			tokenSales
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		tokenSales
    AND			tokenSales
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenSalesInterface(tokenSales).proxyPurchase
    AND			TokenSalesInterface(tokenSales).proxyPurchase
    PUSH 4A5DDDD2		TokenSalesInterface(tokenSales).proxyPurchase
    CALLVALUE			msg.value
    PUSH 19E10		106000
    SWAP1			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)
    PUSH 0		payout
    PUSH 0		payout
    SWAP1			payout
    SLOAD			payout
    SWAP1			payout
    PUSH 100		payout
    EXP			payout
    SWAP1			payout
    DIV			payout
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		payout
    AND			payout
    PUSH 40		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    MLOAD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP5			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    PUSH 100000000000000000000000000000000000000000000000000000000		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    MUL			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP2			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    MSTORE			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    PUSH 4		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    ADD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP1			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP3			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    AND			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP2			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    MSTORE			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    PUSH 20		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    ADD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    SWAP2			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    PUSH 20		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    PUSH 40		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    MLOAD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP1			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP4			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    SUB			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP2			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP6			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP10			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP9			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    CALL			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    ISZERO			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    PUSH [ErrorTag]		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    JUMPI			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    PUSH 40		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    MLOAD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    DUP1			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    MLOAD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    SWAP1			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    PUSH 20		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    ADD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    ISZERO			!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
    ISZERO			if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw
    PUSH [tag5]		if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw
    JUMPI			if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag5: 
    JUMPDEST		if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw
  tag4: 
    JUMPDEST		function () {...
    JUMP	[out]		function () {...
  tag2: 
    JUMPDEST		contract ProxyPayment {...
    STOP			contract ProxyPayment {...

======= TokenInterface =======
EVM assembly:
Contract not fully implemented

======= TokenSales =======
EVM assembly:
.code:
  PUSH 60		contract TokenSales is TokenSalesInterface {...
  PUSH 40		contract TokenSales is TokenSalesInterface {...
  MSTORE			contract TokenSales is TokenSalesInterface {...
  PUSH DE0B6B3A7640000		1000000000000000000
  PUSH 17		uint256 public WEI_PER_ETH = 1000000000000000000
  PUSH 0		uint256 public WEI_PER_ETH = 1000000000000000000
  POP			uint256 public WEI_PER_ETH = 1000000000000000000
  SSTORE			uint256 public WEI_PER_ETH = 1000000000000000000
  PUSH 3B9ACA00		1000000000
  PUSH 18		uint256 public BILLION = 1000000000
  PUSH 0		uint256 public BILLION = 1000000000
  POP			uint256 public BILLION = 1000000000
  SSTORE			uint256 public BILLION = 1000000000
  PUSH 64		100
  PUSH 19		uint256 public CENTS = 100
  PUSH 0		uint256 public CENTS = 100
  POP			uint256 public CENTS = 100
  SSTORE			uint256 public CENTS = 100
  PUSH 40		function TokenSales(address _config) {...
  MLOAD			function TokenSales(address _config) {...
  PUSH 20		function TokenSales(address _config) {...
  DUP1			function TokenSales(address _config) {...
  PUSHSIZE		function TokenSales(address _config) {...
  DUP4			function TokenSales(address _config) {...
  CODECOPY			function TokenSales(address _config) {...
  DUP2			function TokenSales(address _config) {...
  ADD			function TokenSales(address _config) {...
  PUSH 40		function TokenSales(address _config) {...
  MSTORE			function TokenSales(address _config) {...
  DUP1			function TokenSales(address _config) {...
  DUP1			function TokenSales(address _config) {...
  MLOAD			function TokenSales(address _config) {...
  SWAP1			function TokenSales(address _config) {...
  PUSH 20		function TokenSales(address _config) {...
  ADD			function TokenSales(address _config) {...
  SWAP1			function TokenSales(address _config) {...
  SWAP2			function TokenSales(address _config) {...
  SWAP1			function TokenSales(address _config) {...
  POP			function TokenSales(address _config) {...
  POP			function TokenSales(address _config) {...
tag1: 
  JUMPDEST		function TokenSales(address _config) {...
  CALLER			msg.sender
  PUSH 12		owner
  PUSH 0		owner
  PUSH 100		owner = msg.sender
  EXP			owner = msg.sender
  DUP2			owner = msg.sender
  SLOAD			owner = msg.sender
  DUP2			owner = msg.sender
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = msg.sender
  MUL			owner = msg.sender
  NOT			owner = msg.sender
  AND			owner = msg.sender
  SWAP1			owner = msg.sender
  DUP4			owner = msg.sender
  MUL			owner = msg.sender
  OR			owner = msg.sender
  SWAP1			owner = msg.sender
  SSTORE			owner = msg.sender
  POP			owner = msg.sender
  DUP1			_config
  PUSH 11		config
  PUSH 0		config
  PUSH 100		config = _config
  EXP			config = _config
  DUP2			config = _config
  SLOAD			config = _config
  DUP2			config = _config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		config = _config
  MUL			config = _config
  NOT			config = _config
  AND			config = _config
  SWAP1			config = _config
  DUP4			config = _config
  MUL			config = _config
  OR			config = _config
  SWAP1			config = _config
  SSTORE			config = _config
  POP			config = _config
  PUSH 0		false
  PUSH D		saleStatus
  PUSH 0		saleStatus
  POP			saleStatus
  PUSH 0		saleStatus.founderClaim
  ADD			saleStatus.founderClaim
  PUSH 0		saleStatus.founderClaim
  PUSH 100		saleStatus.founderClaim = false
  EXP			saleStatus.founderClaim = false
  DUP2			saleStatus.founderClaim = false
  SLOAD			saleStatus.founderClaim = false
  DUP2			saleStatus.founderClaim = false
  PUSH FF		saleStatus.founderClaim = false
  MUL			saleStatus.founderClaim = false
  NOT			saleStatus.founderClaim = false
  AND			saleStatus.founderClaim = false
  SWAP1			saleStatus.founderClaim = false
  DUP4			saleStatus.founderClaim = false
  MUL			saleStatus.founderClaim = false
  OR			saleStatus.founderClaim = false
  SWAP1			saleStatus.founderClaim = false
  SSTORE			saleStatus.founderClaim = false
  POP			saleStatus.founderClaim = false
  PUSH 0		0
  PUSH D		saleStatus
  PUSH 0		saleStatus
  POP			saleStatus
  PUSH 1		saleStatus.releasedTokens
  ADD			saleStatus.releasedTokens
  PUSH 0		saleStatus.releasedTokens
  POP			saleStatus.releasedTokens = 0
  DUP2			saleStatus.releasedTokens = 0
  SWAP1			saleStatus.releasedTokens = 0
  SSTORE			saleStatus.releasedTokens = 0
  POP			saleStatus.releasedTokens = 0
  PUSH 0		0
  PUSH D		saleStatus
  PUSH 0		saleStatus
  POP			saleStatus
  PUSH 2		saleStatus.releasedBadges
  ADD			saleStatus.releasedBadges
  PUSH 0		saleStatus.releasedBadges
  POP			saleStatus.releasedBadges = 0
  DUP2			saleStatus.releasedBadges = 0
  SWAP1			saleStatus.releasedBadges = 0
  SSTORE			saleStatus.releasedBadges = 0
  POP			saleStatus.releasedBadges = 0
  PUSH 0		0
  PUSH D		saleStatus
  PUSH 0		saleStatus
  POP			saleStatus
  PUSH 3		saleStatus.claimers
  ADD			saleStatus.claimers
  PUSH 0		saleStatus.claimers
  POP			saleStatus.claimers = 0
  DUP2			saleStatus.claimers = 0
  SWAP1			saleStatus.claimers = 0
  SSTORE			saleStatus.claimers = 0
  POP			saleStatus.claimers = 0
  DUP1			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigUint
  AND			ConfigInterface(_config).getConfigUint
  PUSH F92BB8C9		ConfigInterface(_config).getConfigUint
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:period1")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:period1")
  MUL			ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period1")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 4		ConfigInterface(_config).getConfigUint("sale1:period1")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 73616C65313A706572696F643100000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period1")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period1")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period1")
  POP			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period1")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period1")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:period1")
  POP			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:period1")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP4			ConfigInterface(_config).getConfigUint("sale1:period1")
  SUB			ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 0		ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP8			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 61DA		ConfigInterface(_config).getConfigUint("sale1:period1")
  GAS			ConfigInterface(_config).getConfigUint("sale1:period1")
  SUB			ConfigInterface(_config).getConfigUint("sale1:period1")
  CALL			ConfigInterface(_config).getConfigUint("sale1:period1")
  ISZERO			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigUint("sale1:period1")
  JUMPI			ConfigInterface(_config).getConfigUint("sale1:period1")
  POP			ConfigInterface(_config).getConfigUint("sale1:period1")
  POP			ConfigInterface(_config).getConfigUint("sale1:period1")
  POP			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:period1")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period1")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period1")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period1")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period1")
  POP			ConfigInterface(_config).getConfigUint("sale1:period1")
  PUSH 4		saleConfig
  PUSH 0		saleConfig
  POP			saleConfig
  PUSH 0		saleConfig.startDate
  ADD			saleConfig.startDate
  PUSH 0		saleConfig.startDate
  POP			saleConfig.startDate = ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP2			saleConfig.startDate = ConfigInterface(_config).getConfigUint("sale1:period1")
  SWAP1			saleConfig.startDate = ConfigInterface(_config).getConfigUint("sale1:period1")
  SSTORE			saleConfig.startDate = ConfigInterface(_config).getConfigUint("sale1:period1")
  POP			saleConfig.startDate = ConfigInterface(_config).getConfigUint("sale1:period1")
  DUP1			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigUint
  AND			ConfigInterface(_config).getConfigUint
  PUSH F92BB8C9		ConfigInterface(_config).getConfigUint
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:period2")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:period2")
  MUL			ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period2")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 4		ConfigInterface(_config).getConfigUint("sale1:period2")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 73616C65313A706572696F643200000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period2")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period2")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period2")
  POP			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period2")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period2")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:period2")
  POP			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:period2")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP4			ConfigInterface(_config).getConfigUint("sale1:period2")
  SUB			ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 0		ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP8			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 61DA		ConfigInterface(_config).getConfigUint("sale1:period2")
  GAS			ConfigInterface(_config).getConfigUint("sale1:period2")
  SUB			ConfigInterface(_config).getConfigUint("sale1:period2")
  CALL			ConfigInterface(_config).getConfigUint("sale1:period2")
  ISZERO			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigUint("sale1:period2")
  JUMPI			ConfigInterface(_config).getConfigUint("sale1:period2")
  POP			ConfigInterface(_config).getConfigUint("sale1:period2")
  POP			ConfigInterface(_config).getConfigUint("sale1:period2")
  POP			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:period2")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period2")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period2")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period2")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period2")
  POP			ConfigInterface(_config).getConfigUint("sale1:period2")
  PUSH 4		saleConfig
  PUSH 0		saleConfig
  POP			saleConfig
  PUSH 1		saleConfig.periodTwo
  ADD			saleConfig.periodTwo
  PUSH 0		saleConfig.periodTwo
  POP			saleConfig.periodTwo = ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP2			saleConfig.periodTwo = ConfigInterface(_config).getConfigUint("sale1:period2")
  SWAP1			saleConfig.periodTwo = ConfigInterface(_config).getConfigUint("sale1:period2")
  SSTORE			saleConfig.periodTwo = ConfigInterface(_config).getConfigUint("sale1:period2")
  POP			saleConfig.periodTwo = ConfigInterface(_config).getConfigUint("sale1:period2")
  DUP1			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigUint
  AND			ConfigInterface(_config).getConfigUint
  PUSH F92BB8C9		ConfigInterface(_config).getConfigUint
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:period3")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:period3")
  MUL			ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period3")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 4		ConfigInterface(_config).getConfigUint("sale1:period3")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 73616C65313A706572696F643300000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period3")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period3")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period3")
  POP			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period3")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period3")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:period3")
  POP			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:period3")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP4			ConfigInterface(_config).getConfigUint("sale1:period3")
  SUB			ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 0		ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP8			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 61DA		ConfigInterface(_config).getConfigUint("sale1:period3")
  GAS			ConfigInterface(_config).getConfigUint("sale1:period3")
  SUB			ConfigInterface(_config).getConfigUint("sale1:period3")
  CALL			ConfigInterface(_config).getConfigUint("sale1:period3")
  ISZERO			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigUint("sale1:period3")
  JUMPI			ConfigInterface(_config).getConfigUint("sale1:period3")
  POP			ConfigInterface(_config).getConfigUint("sale1:period3")
  POP			ConfigInterface(_config).getConfigUint("sale1:period3")
  POP			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:period3")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:period3")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:period3")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:period3")
  ADD			ConfigInterface(_config).getConfigUint("sale1:period3")
  POP			ConfigInterface(_config).getConfigUint("sale1:period3")
  PUSH 4		saleConfig
  PUSH 0		saleConfig
  POP			saleConfig
  PUSH 2		saleConfig.periodThree
  ADD			saleConfig.periodThree
  PUSH 0		saleConfig.periodThree
  POP			saleConfig.periodThree = ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP2			saleConfig.periodThree = ConfigInterface(_config).getConfigUint("sale1:period3")
  SWAP1			saleConfig.periodThree = ConfigInterface(_config).getConfigUint("sale1:period3")
  SSTORE			saleConfig.periodThree = ConfigInterface(_config).getConfigUint("sale1:period3")
  POP			saleConfig.periodThree = ConfigInterface(_config).getConfigUint("sale1:period3")
  DUP1			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigUint
  AND			ConfigInterface(_config).getConfigUint
  PUSH F92BB8C9		ConfigInterface(_config).getConfigUint
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:end")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:end")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:end")
  MUL			ConfigInterface(_config).getConfigUint("sale1:end")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:end")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 4		ConfigInterface(_config).getConfigUint("sale1:end")
  ADD			ConfigInterface(_config).getConfigUint("sale1:end")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:end")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 73616C65313A656E640000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:end")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:end")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:end")
  ADD			ConfigInterface(_config).getConfigUint("sale1:end")
  POP			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:end")
  ADD			ConfigInterface(_config).getConfigUint("sale1:end")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:end")
  POP			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:end")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:end")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:end")
  DUP4			ConfigInterface(_config).getConfigUint("sale1:end")
  SUB			ConfigInterface(_config).getConfigUint("sale1:end")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 0		ConfigInterface(_config).getConfigUint("sale1:end")
  DUP8			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 61DA		ConfigInterface(_config).getConfigUint("sale1:end")
  GAS			ConfigInterface(_config).getConfigUint("sale1:end")
  SUB			ConfigInterface(_config).getConfigUint("sale1:end")
  CALL			ConfigInterface(_config).getConfigUint("sale1:end")
  ISZERO			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigUint("sale1:end")
  JUMPI			ConfigInterface(_config).getConfigUint("sale1:end")
  POP			ConfigInterface(_config).getConfigUint("sale1:end")
  POP			ConfigInterface(_config).getConfigUint("sale1:end")
  POP			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:end")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:end")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:end")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:end")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:end")
  ADD			ConfigInterface(_config).getConfigUint("sale1:end")
  POP			ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 4		saleConfig
  PUSH 0		saleConfig
  POP			saleConfig
  PUSH 3		saleConfig.endDate
  ADD			saleConfig.endDate
  PUSH 0		saleConfig.endDate
  POP			saleConfig.endDate = ConfigInterface(_config).getConfigUint("sale1:end")
  DUP2			saleConfig.endDate = ConfigInterface(_config).getConfigUint("sale1:end")
  SWAP1			saleConfig.endDate = ConfigInterface(_config).getConfigUint("sale1:end")
  SSTORE			saleConfig.endDate = ConfigInterface(_config).getConfigUint("sale1:end")
  POP			saleConfig.endDate = ConfigInterface(_config).getConfigUint("sale1:end")
  PUSH 18		BILLION
  PUSH 0		BILLION
  POP			BILLION
  SLOAD			BILLION
  DUP2			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigUint
  AND			ConfigInterface(_config).getConfigUint
  PUSH F92BB8C9		ConfigInterface(_config).getConfigUint
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:famount")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:famount")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:famount")
  MUL			ConfigInterface(_config).getConfigUint("sale1:famount")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:famount")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 4		ConfigInterface(_config).getConfigUint("sale1:famount")
  ADD			ConfigInterface(_config).getConfigUint("sale1:famount")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:famount")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 73616C65313A66616D6F756E7400000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:famount")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:famount")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:famount")
  ADD			ConfigInterface(_config).getConfigUint("sale1:famount")
  POP			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:famount")
  ADD			ConfigInterface(_config).getConfigUint("sale1:famount")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:famount")
  POP			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:famount")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:famount")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:famount")
  DUP4			ConfigInterface(_config).getConfigUint("sale1:famount")
  SUB			ConfigInterface(_config).getConfigUint("sale1:famount")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 0		ConfigInterface(_config).getConfigUint("sale1:famount")
  DUP8			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 61DA		ConfigInterface(_config).getConfigUint("sale1:famount")
  GAS			ConfigInterface(_config).getConfigUint("sale1:famount")
  SUB			ConfigInterface(_config).getConfigUint("sale1:famount")
  CALL			ConfigInterface(_config).getConfigUint("sale1:famount")
  ISZERO			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigUint("sale1:famount")
  JUMPI			ConfigInterface(_config).getConfigUint("sale1:famount")
  POP			ConfigInterface(_config).getConfigUint("sale1:famount")
  POP			ConfigInterface(_config).getConfigUint("sale1:famount")
  POP			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:famount")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:famount")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:famount")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:famount")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:famount")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:famount")
  ADD			ConfigInterface(_config).getConfigUint("sale1:famount")
  POP			ConfigInterface(_config).getConfigUint("sale1:famount")
  MUL			ConfigInterface(_config).getConfigUint("sale1:famount") * BILLION
  PUSH 4		saleConfig
  PUSH 0		saleConfig
  POP			saleConfig
  PUSH 7		saleConfig.founderAmount
  ADD			saleConfig.founderAmount
  PUSH 0		saleConfig.founderAmount
  POP			saleConfig.founderAmount = ConfigInterface(_config).getConfigUint("sale1:famount") * BILLION
  DUP2			saleConfig.founderAmount = ConfigInterface(_config).getConfigUint("sale1:famount") * BILLION
  SWAP1			saleConfig.founderAmount = ConfigInterface(_config).getConfigUint("sale1:famount") * BILLION
  SSTORE			saleConfig.founderAmount = ConfigInterface(_config).getConfigUint("sale1:famount") * BILLION
  POP			saleConfig.founderAmount = ConfigInterface(_config).getConfigUint("sale1:famount") * BILLION
  DUP1			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigAddress
  AND			ConfigInterface(_config).getConfigAddress
  PUSH F896503A		ConfigInterface(_config).getConfigAddress
  PUSH 40		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  MLOAD			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP2			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  MUL			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP2			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  MSTORE			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 4		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  ADD			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP1			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP1			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 73616C65313A6677616C6C657400000000000000000000000000000000000000		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP2			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  MSTORE			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 20		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  ADD			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  POP			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 20		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  ADD			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  SWAP1			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  POP			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 20		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 40		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  MLOAD			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP1			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP4			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  SUB			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP2			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 0		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP8			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 61DA		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  GAS			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  SUB			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  CALL			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  ISZERO			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  JUMPI			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  POP			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  POP			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  POP			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 40		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  MLOAD			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP1			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  MLOAD			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  SWAP1			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 20		ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  ADD			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  POP			ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 4		saleConfig
  PUSH 0		saleConfig
  POP			saleConfig
  PUSH 8		saleConfig.founderWallet
  ADD			saleConfig.founderWallet
  PUSH 0		saleConfig.founderWallet
  PUSH 100		saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  EXP			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP2			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  SLOAD			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP2			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  MUL			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  NOT			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  AND			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  SWAP1			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  DUP4			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  MUL			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  OR			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  SWAP1			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  SSTORE			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  POP			saleConfig.founderWallet = ConfigInterface(_config).getConfigAddress("sale1:fwallet")
  PUSH 19		CENTS
  PUSH 0		CENTS
  POP			CENTS
  SLOAD			CENTS
  DUP2			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigUint
  AND			ConfigInterface(_config).getConfigUint
  PUSH F92BB8C9		ConfigInterface(_config).getConfigUint
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:goal")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:goal")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:goal")
  MUL			ConfigInterface(_config).getConfigUint("sale1:goal")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:goal")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 4		ConfigInterface(_config).getConfigUint("sale1:goal")
  ADD			ConfigInterface(_config).getConfigUint("sale1:goal")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:goal")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 73616C65313A676F616C00000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:goal")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:goal")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:goal")
  ADD			ConfigInterface(_config).getConfigUint("sale1:goal")
  POP			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:goal")
  ADD			ConfigInterface(_config).getConfigUint("sale1:goal")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:goal")
  POP			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:goal")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:goal")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:goal")
  DUP4			ConfigInterface(_config).getConfigUint("sale1:goal")
  SUB			ConfigInterface(_config).getConfigUint("sale1:goal")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 0		ConfigInterface(_config).getConfigUint("sale1:goal")
  DUP8			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 61DA		ConfigInterface(_config).getConfigUint("sale1:goal")
  GAS			ConfigInterface(_config).getConfigUint("sale1:goal")
  SUB			ConfigInterface(_config).getConfigUint("sale1:goal")
  CALL			ConfigInterface(_config).getConfigUint("sale1:goal")
  ISZERO			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigUint("sale1:goal")
  JUMPI			ConfigInterface(_config).getConfigUint("sale1:goal")
  POP			ConfigInterface(_config).getConfigUint("sale1:goal")
  POP			ConfigInterface(_config).getConfigUint("sale1:goal")
  POP			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:goal")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:goal")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:goal")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:goal")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:goal")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:goal")
  ADD			ConfigInterface(_config).getConfigUint("sale1:goal")
  POP			ConfigInterface(_config).getConfigUint("sale1:goal")
  MUL			ConfigInterface(_config).getConfigUint("sale1:goal") * CENTS
  PUSH 4		saleConfig
  PUSH 0		saleConfig
  POP			saleConfig
  PUSH 4		saleConfig.goal
  ADD			saleConfig.goal
  PUSH 0		saleConfig.goal
  POP			saleConfig.goal = ConfigInterface(_config).getConfigUint("sale1:goal") * CENTS
  DUP2			saleConfig.goal = ConfigInterface(_config).getConfigUint("sale1:goal") * CENTS
  SWAP1			saleConfig.goal = ConfigInterface(_config).getConfigUint("sale1:goal") * CENTS
  SSTORE			saleConfig.goal = ConfigInterface(_config).getConfigUint("sale1:goal") * CENTS
  POP			saleConfig.goal = ConfigInterface(_config).getConfigUint("sale1:goal") * CENTS
  PUSH 19		CENTS
  PUSH 0		CENTS
  POP			CENTS
  SLOAD			CENTS
  DUP2			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigUint
  AND			ConfigInterface(_config).getConfigUint
  PUSH F92BB8C9		ConfigInterface(_config).getConfigUint
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:cap")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:cap")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:cap")
  MUL			ConfigInterface(_config).getConfigUint("sale1:cap")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:cap")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 4		ConfigInterface(_config).getConfigUint("sale1:cap")
  ADD			ConfigInterface(_config).getConfigUint("sale1:cap")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:cap")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 73616C65313A6361700000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:cap")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:cap")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:cap")
  ADD			ConfigInterface(_config).getConfigUint("sale1:cap")
  POP			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:cap")
  ADD			ConfigInterface(_config).getConfigUint("sale1:cap")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:cap")
  POP			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:cap")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:cap")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:cap")
  DUP4			ConfigInterface(_config).getConfigUint("sale1:cap")
  SUB			ConfigInterface(_config).getConfigUint("sale1:cap")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 0		ConfigInterface(_config).getConfigUint("sale1:cap")
  DUP8			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 61DA		ConfigInterface(_config).getConfigUint("sale1:cap")
  GAS			ConfigInterface(_config).getConfigUint("sale1:cap")
  SUB			ConfigInterface(_config).getConfigUint("sale1:cap")
  CALL			ConfigInterface(_config).getConfigUint("sale1:cap")
  ISZERO			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigUint("sale1:cap")
  JUMPI			ConfigInterface(_config).getConfigUint("sale1:cap")
  POP			ConfigInterface(_config).getConfigUint("sale1:cap")
  POP			ConfigInterface(_config).getConfigUint("sale1:cap")
  POP			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:cap")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:cap")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:cap")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:cap")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:cap")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:cap")
  ADD			ConfigInterface(_config).getConfigUint("sale1:cap")
  POP			ConfigInterface(_config).getConfigUint("sale1:cap")
  MUL			ConfigInterface(_config).getConfigUint("sale1:cap") * CENTS
  PUSH 4		saleConfig
  PUSH 0		saleConfig
  POP			saleConfig
  PUSH 5		saleConfig.cap
  ADD			saleConfig.cap
  PUSH 0		saleConfig.cap
  POP			saleConfig.cap = ConfigInterface(_config).getConfigUint("sale1:cap") * CENTS
  DUP2			saleConfig.cap = ConfigInterface(_config).getConfigUint("sale1:cap") * CENTS
  SWAP1			saleConfig.cap = ConfigInterface(_config).getConfigUint("sale1:cap") * CENTS
  SSTORE			saleConfig.cap = ConfigInterface(_config).getConfigUint("sale1:cap") * CENTS
  POP			saleConfig.cap = ConfigInterface(_config).getConfigUint("sale1:cap") * CENTS
  PUSH 19		CENTS
  PUSH 0		CENTS
  POP			CENTS
  SLOAD			CENTS
  DUP2			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigUint
  AND			ConfigInterface(_config).getConfigUint
  PUSH F92BB8C9		ConfigInterface(_config).getConfigUint
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  MUL			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 4		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  ADD			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 73616C65313A6261646765636F73740000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  ADD			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  POP			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  ADD			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  POP			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  DUP4			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  SUB			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 0		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  DUP8			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 61DA		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  GAS			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  SUB			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  CALL			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  ISZERO			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  JUMPI			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  POP			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  POP			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  POP			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:badgecost")
  ADD			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  POP			ConfigInterface(_config).getConfigUint("sale1:badgecost")
  MUL			ConfigInterface(_config).getConfigUint("sale1:badgecost") * CENTS
  PUSH 4		saleConfig
  PUSH 0		saleConfig
  POP			saleConfig
  PUSH 6		saleConfig.badgeCost
  ADD			saleConfig.badgeCost
  PUSH 0		saleConfig.badgeCost
  POP			saleConfig.badgeCost = ConfigInterface(_config).getConfigUint("sale1:badgecost") * CENTS
  DUP2			saleConfig.badgeCost = ConfigInterface(_config).getConfigUint("sale1:badgecost") * CENTS
  SWAP1			saleConfig.badgeCost = ConfigInterface(_config).getConfigUint("sale1:badgecost") * CENTS
  SSTORE			saleConfig.badgeCost = ConfigInterface(_config).getConfigUint("sale1:badgecost") * CENTS
  POP			saleConfig.badgeCost = ConfigInterface(_config).getConfigUint("sale1:badgecost") * CENTS
  PUSH 18		BILLION
  PUSH 0		BILLION
  POP			BILLION
  SLOAD			BILLION
  DUP2			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigUint
  AND			ConfigInterface(_config).getConfigUint
  PUSH F92BB8C9		ConfigInterface(_config).getConfigUint
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:amount")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:amount")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:amount")
  MUL			ConfigInterface(_config).getConfigUint("sale1:amount")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:amount")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 4		ConfigInterface(_config).getConfigUint("sale1:amount")
  ADD			ConfigInterface(_config).getConfigUint("sale1:amount")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:amount")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 73616C65313A616D6F756E740000000000000000000000000000000000000000		ConfigInterface(_config).getConfigUint("sale1:amount")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:amount")
  MSTORE			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:amount")
  ADD			ConfigInterface(_config).getConfigUint("sale1:amount")
  POP			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:amount")
  ADD			ConfigInterface(_config).getConfigUint("sale1:amount")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:amount")
  POP			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:amount")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:amount")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:amount")
  DUP4			ConfigInterface(_config).getConfigUint("sale1:amount")
  SUB			ConfigInterface(_config).getConfigUint("sale1:amount")
  DUP2			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 0		ConfigInterface(_config).getConfigUint("sale1:amount")
  DUP8			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 61DA		ConfigInterface(_config).getConfigUint("sale1:amount")
  GAS			ConfigInterface(_config).getConfigUint("sale1:amount")
  SUB			ConfigInterface(_config).getConfigUint("sale1:amount")
  CALL			ConfigInterface(_config).getConfigUint("sale1:amount")
  ISZERO			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigUint("sale1:amount")
  JUMPI			ConfigInterface(_config).getConfigUint("sale1:amount")
  POP			ConfigInterface(_config).getConfigUint("sale1:amount")
  POP			ConfigInterface(_config).getConfigUint("sale1:amount")
  POP			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 40		ConfigInterface(_config).getConfigUint("sale1:amount")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:amount")
  DUP1			ConfigInterface(_config).getConfigUint("sale1:amount")
  MLOAD			ConfigInterface(_config).getConfigUint("sale1:amount")
  SWAP1			ConfigInterface(_config).getConfigUint("sale1:amount")
  PUSH 20		ConfigInterface(_config).getConfigUint("sale1:amount")
  ADD			ConfigInterface(_config).getConfigUint("sale1:amount")
  POP			ConfigInterface(_config).getConfigUint("sale1:amount")
  MUL			ConfigInterface(_config).getConfigUint("sale1:amount") * BILLION
  PUSH 0		saleInfo
  PUSH 0		saleInfo
  POP			saleInfo
  PUSH 3		saleInfo.amount
  ADD			saleInfo.amount
  PUSH 0		saleInfo.amount
  POP			saleInfo.amount = ConfigInterface(_config).getConfigUint("sale1:amount") * BILLION
  DUP2			saleInfo.amount = ConfigInterface(_config).getConfigUint("sale1:amount") * BILLION
  SWAP1			saleInfo.amount = ConfigInterface(_config).getConfigUint("sale1:amount") * BILLION
  SSTORE			saleInfo.amount = ConfigInterface(_config).getConfigUint("sale1:amount") * BILLION
  POP			saleInfo.amount = ConfigInterface(_config).getConfigUint("sale1:amount") * BILLION
  PUSH 0		0
  PUSH 0		saleInfo
  PUSH 0		saleInfo
  POP			saleInfo
  PUSH 0		saleInfo.totalWei
  ADD			saleInfo.totalWei
  PUSH 0		saleInfo.totalWei
  POP			saleInfo.totalWei = 0
  DUP2			saleInfo.totalWei = 0
  SWAP1			saleInfo.totalWei = 0
  SSTORE			saleInfo.totalWei = 0
  POP			saleInfo.totalWei = 0
  PUSH 0		0
  PUSH 0		saleInfo
  PUSH 0		saleInfo
  POP			saleInfo
  PUSH 1		saleInfo.totalCents
  ADD			saleInfo.totalCents
  PUSH 0		saleInfo.totalCents
  POP			saleInfo.totalCents = 0
  DUP2			saleInfo.totalCents = 0
  SWAP1			saleInfo.totalCents = 0
  SSTORE			saleInfo.totalCents = 0
  POP			saleInfo.totalCents = 0
  PUSH 0		saleInfo
  PUSH 0		saleInfo
  POP			saleInfo
  PUSH 2		saleInfo.realCents
  ADD			saleInfo.realCents
  PUSH 0		saleInfo.realCents
  POP			saleInfo.realCents
  SLOAD			saleInfo.realCents
  POP			saleInfo.realCents
  PUSH 0		false
  PUSH D		saleStatus
  PUSH 0		saleStatus
  POP			saleStatus
  PUSH 0		saleStatus.founderClaim
  ADD			saleStatus.founderClaim
  PUSH 0		saleStatus.founderClaim
  PUSH 100		saleStatus.founderClaim = false
  EXP			saleStatus.founderClaim = false
  DUP2			saleStatus.founderClaim = false
  SLOAD			saleStatus.founderClaim = false
  DUP2			saleStatus.founderClaim = false
  PUSH FF		saleStatus.founderClaim = false
  MUL			saleStatus.founderClaim = false
  NOT			saleStatus.founderClaim = false
  AND			saleStatus.founderClaim = false
  SWAP1			saleStatus.founderClaim = false
  DUP4			saleStatus.founderClaim = false
  MUL			saleStatus.founderClaim = false
  OR			saleStatus.founderClaim = false
  SWAP1			saleStatus.founderClaim = false
  SSTORE			saleStatus.founderClaim = false
  POP			saleStatus.founderClaim = false
  PUSH 1		true
  PUSH 12		locked
  PUSH 14		locked
  PUSH 100		locked = true
  EXP			locked = true
  DUP2			locked = true
  SLOAD			locked = true
  DUP2			locked = true
  PUSH FF		locked = true
  MUL			locked = true
  NOT			locked = true
  AND			locked = true
  SWAP1			locked = true
  DUP4			locked = true
  MUL			locked = true
  OR			locked = true
  SWAP1			locked = true
  SSTORE			locked = true
  POP			locked = true
tag2: 
  JUMPDEST		function TokenSales(address _config) {...
  POP			function TokenSales(address _config) {...
  PUSH #[$00000000…00000000]		contract TokenSales is TokenSalesInterface {...
  DUP1			contract TokenSales is TokenSalesInterface {...
  PUSH [$00000000…00000000]		contract TokenSales is TokenSalesInterface {...
  PUSH 0		contract TokenSales is TokenSalesInterface {...
  CODECOPY			contract TokenSales is TokenSalesInterface {...
  PUSH 0		contract TokenSales is TokenSalesInterface {...
  RETURN			contract TokenSales is TokenSalesInterface {...
.data:
  0: 
  .code:
    PUSH 60		contract TokenSales is TokenSalesInterface {...
    PUSH 40		contract TokenSales is TokenSalesInterface {...
    MSTORE			contract TokenSales is TokenSalesInterface {...
    CALLDATASIZE			contract TokenSales is TokenSalesInterface {...
    ISZERO			contract TokenSales is TokenSalesInterface {...
    PUSH [tag1]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    PUSH 0		contract TokenSales is TokenSalesInterface {...
    CALLDATALOAD			contract TokenSales is TokenSalesInterface {...
    PUSH 100000000000000000000000000000000000000000000000000000000		contract TokenSales is TokenSalesInterface {...
    SWAP1			contract TokenSales is TokenSalesInterface {...
    DIV			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 34187FD		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag2]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH B97BC86		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag3]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH C77A697		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag4]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 1959A002		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag5]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 1ED24195		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag6]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 3F5B7675		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag7]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 4A5DDDD2		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag8]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 4BEDA18B		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag9]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 4E71D92D		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag10]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 5D7E8C15		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag11]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 6D568C43		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag12]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 6D98E9FC		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag13]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 74FFDCD0		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag14]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 7D3D6522		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag15]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 8006745B		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag16]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 85B31D7B		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag17]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 8C0E2A31		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag18]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 8C3C4B34		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag19]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH 8D68CF59		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag20]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH A4FD6F56		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag21]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH A69DF4B5		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag22]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH AB519020		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag23]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH B7FBA4D3		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag24]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH BB7859B5		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag25]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH BC126BA1		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag26]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH C24A0F8B		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag27]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH CEA943EE		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag28]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH DB83694C		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag29]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH DDEAE033		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag30]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH F5582870		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag31]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    DUP1			contract TokenSales is TokenSalesInterface {...
    PUSH F697A0ED		contract TokenSales is TokenSalesInterface {...
    EQ			contract TokenSales is TokenSalesInterface {...
    PUSH [tag32]		contract TokenSales is TokenSalesInterface {...
    JUMPI			contract TokenSales is TokenSalesInterface {...
    PUSH [tag1]		contract TokenSales is TokenSalesInterface {...
    JUMP			contract TokenSales is TokenSalesInterface {...
  tag1: 
    JUMPDEST		contract TokenSales is TokenSalesInterface {...
    PUSH [tag33]		contract TokenSales is TokenSalesInterface {...
  tag34: 
    JUMPDEST		function () {...
    PUSH 0		uint256 _amount
    PUSH 0		address _sender
    PUSH 0		0
    PUSH [tag36]		getPeriod()
    PUSH [tag37]		getPeriod
    JUMP	[in]		getPeriod()
  tag36: 
    JUMPDEST		getPeriod()
    EQ			getPeriod() == 0
    ISZERO			if (getPeriod() == 0) throw
    PUSH [tag38]		if (getPeriod() == 0) throw
    JUMPI			if (getPeriod() == 0) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag38: 
    JUMPDEST		if (getPeriod() == 0) throw
    CALLVALUE			msg.value
    SWAP2			uint256 _amount = msg.value
    POP			uint256 _amount = msg.value
    PUSH 1		true
    PUSH 15		proxies
    PUSH 0		proxies
    POP			proxies
    PUSH 0		proxies[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxies[msg.sender]
    AND			proxies[msg.sender]
    DUP2			proxies[msg.sender]
    MSTORE			proxies[msg.sender]
    PUSH 20		proxies[msg.sender]
    ADD			proxies[msg.sender]
    SWAP1			proxies[msg.sender]
    DUP2			proxies[msg.sender]
    MSTORE			proxies[msg.sender]
    PUSH 20		proxies[msg.sender]
    ADD			proxies[msg.sender]
    PUSH 0		proxies[msg.sender]
    SHA3			proxies[msg.sender]
    PUSH 0		proxies[msg.sender]
    POP			proxies[msg.sender]
    PUSH 0		proxies[msg.sender].isProxy
    ADD			proxies[msg.sender].isProxy
    PUSH 14		proxies[msg.sender].isProxy
    SWAP1			proxies[msg.sender].isProxy
    SLOAD			proxies[msg.sender].isProxy
    SWAP1			proxies[msg.sender].isProxy
    PUSH 100		proxies[msg.sender].isProxy
    EXP			proxies[msg.sender].isProxy
    SWAP1			proxies[msg.sender].isProxy
    DIV			proxies[msg.sender].isProxy
    PUSH FF		proxies[msg.sender].isProxy
    AND			proxies[msg.sender].isProxy
    EQ			proxies[msg.sender].isProxy == true
    ISZERO			if (proxies[msg.sender].isProxy == true) {...
    PUSH [tag39]		if (proxies[msg.sender].isProxy == true) {...
    JUMPI			if (proxies[msg.sender].isProxy == true) {...
    PUSH 15		proxies
    PUSH 0		proxies
    POP			proxies
    PUSH 0		proxies[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxies[msg.sender]
    AND			proxies[msg.sender]
    DUP2			proxies[msg.sender]
    MSTORE			proxies[msg.sender]
    PUSH 20		proxies[msg.sender]
    ADD			proxies[msg.sender]
    SWAP1			proxies[msg.sender]
    DUP2			proxies[msg.sender]
    MSTORE			proxies[msg.sender]
    PUSH 20		proxies[msg.sender]
    ADD			proxies[msg.sender]
    PUSH 0		proxies[msg.sender]
    SHA3			proxies[msg.sender]
    PUSH 0		proxies[msg.sender]
    POP			proxies[msg.sender]
    PUSH 0		proxies[msg.sender].payout
    ADD			proxies[msg.sender].payout
    PUSH 0		proxies[msg.sender].payout
    SWAP1			proxies[msg.sender].payout
    SLOAD			proxies[msg.sender].payout
    SWAP1			proxies[msg.sender].payout
    PUSH 100		proxies[msg.sender].payout
    EXP			proxies[msg.sender].payout
    SWAP1			proxies[msg.sender].payout
    DIV			proxies[msg.sender].payout
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxies[msg.sender].payout
    AND			proxies[msg.sender].payout
    SWAP1			_sender = proxies[msg.sender].payout
    POP			_sender = proxies[msg.sender].payout
    DUP1			_sender = proxies[msg.sender].payout
    POP			_sender = proxies[msg.sender].payout
    PUSH [tag40]		if (proxies[msg.sender].isProxy == true) {...
    JUMP			if (proxies[msg.sender].isProxy == true) {...
  tag39: 
    JUMPDEST		if (proxies[msg.sender].isProxy == true) {...
    CALLER			msg.sender
    SWAP1			_sender = msg.sender
    POP			_sender = msg.sender
    DUP1			_sender = msg.sender
    POP			_sender = msg.sender
  tag40: 
    JUMPDEST		if (proxies[msg.sender].isProxy == true) {...
    PUSH [tag41]		purchase(_sender, _amount)
    DUP2			_sender
    DUP4			_amount
    PUSH [tag42]		purchase
    JUMP	[in]		purchase(_sender, _amount)
  tag41: 
    JUMPDEST		purchase(_sender, _amount)
    ISZERO			!purchase(_sender, _amount)
    ISZERO			if (!purchase(_sender, _amount)) throw
    PUSH [tag43]		if (!purchase(_sender, _amount)) throw
    JUMPI			if (!purchase(_sender, _amount)) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag43: 
    JUMPDEST		if (!purchase(_sender, _amount)) throw
  tag35: 
    JUMPDEST		function () {...
    POP			function () {...
    POP			function () {...
    JUMP	[out]		function () {...
  tag33: 
    JUMPDEST		contract TokenSales is TokenSalesInterface {...
    STOP			contract TokenSales is TokenSalesInterface {...
  tag2: 
    JUMPDEST		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    PUSH [tag44]		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    PUSH 4		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    DUP1			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    DUP1			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    CALLDATALOAD			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    SWAP1			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    PUSH 20		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    ADD			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    SWAP1			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    SWAP2			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    SWAP1			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    POP			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    POP			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    PUSH [tag45]		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    JUMP			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
  tag44: 
    JUMPDEST		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    PUSH 40		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    MLOAD			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    DUP1			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    DUP3			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    DUP2			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    MSTORE			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    PUSH 20		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    ADD			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    SWAP2			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    POP			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    POP			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    PUSH 40		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    MLOAD			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    DUP1			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    SWAP2			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    SUB			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    SWAP1			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    RETURN			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
  tag3: 
    JUMPDEST		function startDate() public constant returns (uint date) {...
    PUSH [tag46]		function startDate() public constant returns (uint date) {...
    PUSH 4		function startDate() public constant returns (uint date) {...
    DUP1			function startDate() public constant returns (uint date) {...
    POP			function startDate() public constant returns (uint date) {...
    POP			function startDate() public constant returns (uint date) {...
    PUSH [tag47]		function startDate() public constant returns (uint date) {...
    JUMP			function startDate() public constant returns (uint date) {...
  tag46: 
    JUMPDEST		function startDate() public constant returns (uint date) {...
    PUSH 40		function startDate() public constant returns (uint date) {...
    MLOAD			function startDate() public constant returns (uint date) {...
    DUP1			function startDate() public constant returns (uint date) {...
    DUP3			function startDate() public constant returns (uint date) {...
    DUP2			function startDate() public constant returns (uint date) {...
    MSTORE			function startDate() public constant returns (uint date) {...
    PUSH 20		function startDate() public constant returns (uint date) {...
    ADD			function startDate() public constant returns (uint date) {...
    SWAP2			function startDate() public constant returns (uint date) {...
    POP			function startDate() public constant returns (uint date) {...
    POP			function startDate() public constant returns (uint date) {...
    PUSH 40		function startDate() public constant returns (uint date) {...
    MLOAD			function startDate() public constant returns (uint date) {...
    DUP1			function startDate() public constant returns (uint date) {...
    SWAP2			function startDate() public constant returns (uint date) {...
    SUB			function startDate() public constant returns (uint date) {...
    SWAP1			function startDate() public constant returns (uint date) {...
    RETURN			function startDate() public constant returns (uint date) {...
  tag4: 
    JUMPDEST		function claimFounders() returns (bool success) {...
    PUSH [tag48]		function claimFounders() returns (bool success) {...
    PUSH 4		function claimFounders() returns (bool success) {...
    DUP1			function claimFounders() returns (bool success) {...
    POP			function claimFounders() returns (bool success) {...
    POP			function claimFounders() returns (bool success) {...
    PUSH [tag49]		function claimFounders() returns (bool success) {...
    JUMP			function claimFounders() returns (bool success) {...
  tag48: 
    JUMPDEST		function claimFounders() returns (bool success) {...
    PUSH 40		function claimFounders() returns (bool success) {...
    MLOAD			function claimFounders() returns (bool success) {...
    DUP1			function claimFounders() returns (bool success) {...
    DUP3			function claimFounders() returns (bool success) {...
    DUP2			function claimFounders() returns (bool success) {...
    MSTORE			function claimFounders() returns (bool success) {...
    PUSH 20		function claimFounders() returns (bool success) {...
    ADD			function claimFounders() returns (bool success) {...
    SWAP2			function claimFounders() returns (bool success) {...
    POP			function claimFounders() returns (bool success) {...
    POP			function claimFounders() returns (bool success) {...
    PUSH 40		function claimFounders() returns (bool success) {...
    MLOAD			function claimFounders() returns (bool success) {...
    DUP1			function claimFounders() returns (bool success) {...
    SWAP2			function claimFounders() returns (bool success) {...
    SUB			function claimFounders() returns (bool success) {...
    SWAP1			function claimFounders() returns (bool success) {...
    RETURN			function claimFounders() returns (bool success) {...
  tag5: 
    JUMPDEST		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH [tag50]		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 4		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP1			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP1			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    CALLDATALOAD			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP1			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP1			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP2			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP1			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH [tag51]		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    JUMP			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
  tag50: 
    JUMPDEST		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 40		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MLOAD			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP1			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP7			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP2			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MSTORE			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP6			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP2			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MSTORE			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP5			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP2			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MSTORE			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP4			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP2			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MSTORE			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP3			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP2			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MSTORE			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP6			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 40		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MLOAD			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP1			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP2			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SUB			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP1			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    RETURN			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
  tag6: 
    JUMPDEST		function getPeriod() public constant returns (uint saleperiod) {...
    PUSH [tag52]		function getPeriod() public constant returns (uint saleperiod) {...
    PUSH 4		function getPeriod() public constant returns (uint saleperiod) {...
    DUP1			function getPeriod() public constant returns (uint saleperiod) {...
    POP			function getPeriod() public constant returns (uint saleperiod) {...
    POP			function getPeriod() public constant returns (uint saleperiod) {...
    PUSH [tag37]		function getPeriod() public constant returns (uint saleperiod) {...
    JUMP			function getPeriod() public constant returns (uint saleperiod) {...
  tag52: 
    JUMPDEST		function getPeriod() public constant returns (uint saleperiod) {...
    PUSH 40		function getPeriod() public constant returns (uint saleperiod) {...
    MLOAD			function getPeriod() public constant returns (uint saleperiod) {...
    DUP1			function getPeriod() public constant returns (uint saleperiod) {...
    DUP3			function getPeriod() public constant returns (uint saleperiod) {...
    DUP2			function getPeriod() public constant returns (uint saleperiod) {...
    MSTORE			function getPeriod() public constant returns (uint saleperiod) {...
    PUSH 20		function getPeriod() public constant returns (uint saleperiod) {...
    ADD			function getPeriod() public constant returns (uint saleperiod) {...
    SWAP2			function getPeriod() public constant returns (uint saleperiod) {...
    POP			function getPeriod() public constant returns (uint saleperiod) {...
    POP			function getPeriod() public constant returns (uint saleperiod) {...
    PUSH 40		function getPeriod() public constant returns (uint saleperiod) {...
    MLOAD			function getPeriod() public constant returns (uint saleperiod) {...
    DUP1			function getPeriod() public constant returns (uint saleperiod) {...
    SWAP2			function getPeriod() public constant returns (uint saleperiod) {...
    SUB			function getPeriod() public constant returns (uint saleperiod) {...
    SWAP1			function getPeriod() public constant returns (uint saleperiod) {...
    RETURN			function getPeriod() public constant returns (uint saleperiod) {...
  tag7: 
    JUMPDEST		function periodTwo() public constant returns (uint date) {...
    PUSH [tag53]		function periodTwo() public constant returns (uint date) {...
    PUSH 4		function periodTwo() public constant returns (uint date) {...
    DUP1			function periodTwo() public constant returns (uint date) {...
    POP			function periodTwo() public constant returns (uint date) {...
    POP			function periodTwo() public constant returns (uint date) {...
    PUSH [tag54]		function periodTwo() public constant returns (uint date) {...
    JUMP			function periodTwo() public constant returns (uint date) {...
  tag53: 
    JUMPDEST		function periodTwo() public constant returns (uint date) {...
    PUSH 40		function periodTwo() public constant returns (uint date) {...
    MLOAD			function periodTwo() public constant returns (uint date) {...
    DUP1			function periodTwo() public constant returns (uint date) {...
    DUP3			function periodTwo() public constant returns (uint date) {...
    DUP2			function periodTwo() public constant returns (uint date) {...
    MSTORE			function periodTwo() public constant returns (uint date) {...
    PUSH 20		function periodTwo() public constant returns (uint date) {...
    ADD			function periodTwo() public constant returns (uint date) {...
    SWAP2			function periodTwo() public constant returns (uint date) {...
    POP			function periodTwo() public constant returns (uint date) {...
    POP			function periodTwo() public constant returns (uint date) {...
    PUSH 40		function periodTwo() public constant returns (uint date) {...
    MLOAD			function periodTwo() public constant returns (uint date) {...
    DUP1			function periodTwo() public constant returns (uint date) {...
    SWAP2			function periodTwo() public constant returns (uint date) {...
    SUB			function periodTwo() public constant returns (uint date) {...
    SWAP1			function periodTwo() public constant returns (uint date) {...
    RETURN			function periodTwo() public constant returns (uint date) {...
  tag8: 
    JUMPDEST		function proxyPurchase(address _user) returns (bool success) {...
    PUSH [tag55]		function proxyPurchase(address _user) returns (bool success) {...
    PUSH 4		function proxyPurchase(address _user) returns (bool success) {...
    DUP1			function proxyPurchase(address _user) returns (bool success) {...
    DUP1			function proxyPurchase(address _user) returns (bool success) {...
    CALLDATALOAD			function proxyPurchase(address _user) returns (bool success) {...
    SWAP1			function proxyPurchase(address _user) returns (bool success) {...
    PUSH 20		function proxyPurchase(address _user) returns (bool success) {...
    ADD			function proxyPurchase(address _user) returns (bool success) {...
    SWAP1			function proxyPurchase(address _user) returns (bool success) {...
    SWAP2			function proxyPurchase(address _user) returns (bool success) {...
    SWAP1			function proxyPurchase(address _user) returns (bool success) {...
    POP			function proxyPurchase(address _user) returns (bool success) {...
    POP			function proxyPurchase(address _user) returns (bool success) {...
    PUSH [tag56]		function proxyPurchase(address _user) returns (bool success) {...
    JUMP			function proxyPurchase(address _user) returns (bool success) {...
  tag55: 
    JUMPDEST		function proxyPurchase(address _user) returns (bool success) {...
    PUSH 40		function proxyPurchase(address _user) returns (bool success) {...
    MLOAD			function proxyPurchase(address _user) returns (bool success) {...
    DUP1			function proxyPurchase(address _user) returns (bool success) {...
    DUP3			function proxyPurchase(address _user) returns (bool success) {...
    DUP2			function proxyPurchase(address _user) returns (bool success) {...
    MSTORE			function proxyPurchase(address _user) returns (bool success) {...
    PUSH 20		function proxyPurchase(address _user) returns (bool success) {...
    ADD			function proxyPurchase(address _user) returns (bool success) {...
    SWAP2			function proxyPurchase(address _user) returns (bool success) {...
    POP			function proxyPurchase(address _user) returns (bool success) {...
    POP			function proxyPurchase(address _user) returns (bool success) {...
    PUSH 40		function proxyPurchase(address _user) returns (bool success) {...
    MLOAD			function proxyPurchase(address _user) returns (bool success) {...
    DUP1			function proxyPurchase(address _user) returns (bool success) {...
    SWAP2			function proxyPurchase(address _user) returns (bool success) {...
    SUB			function proxyPurchase(address _user) returns (bool success) {...
    SWAP1			function proxyPurchase(address _user) returns (bool success) {...
    RETURN			function proxyPurchase(address _user) returns (bool success) {...
  tag9: 
    JUMPDEST		uint256 public BILLION = 1000000000
    PUSH [tag57]		uint256 public BILLION = 1000000000
    PUSH 4		uint256 public BILLION = 1000000000
    DUP1			uint256 public BILLION = 1000000000
    POP			uint256 public BILLION = 1000000000
    POP			uint256 public BILLION = 1000000000
    PUSH [tag58]		uint256 public BILLION = 1000000000
    JUMP			uint256 public BILLION = 1000000000
  tag57: 
    JUMPDEST		uint256 public BILLION = 1000000000
    PUSH 40		uint256 public BILLION = 1000000000
    MLOAD			uint256 public BILLION = 1000000000
    DUP1			uint256 public BILLION = 1000000000
    DUP3			uint256 public BILLION = 1000000000
    DUP2			uint256 public BILLION = 1000000000
    MSTORE			uint256 public BILLION = 1000000000
    PUSH 20		uint256 public BILLION = 1000000000
    ADD			uint256 public BILLION = 1000000000
    SWAP2			uint256 public BILLION = 1000000000
    POP			uint256 public BILLION = 1000000000
    POP			uint256 public BILLION = 1000000000
    PUSH 40		uint256 public BILLION = 1000000000
    MLOAD			uint256 public BILLION = 1000000000
    DUP1			uint256 public BILLION = 1000000000
    SWAP2			uint256 public BILLION = 1000000000
    SUB			uint256 public BILLION = 1000000000
    SWAP1			uint256 public BILLION = 1000000000
    RETURN			uint256 public BILLION = 1000000000
  tag10: 
    JUMPDEST		function claim() returns (bool success) {...
    PUSH [tag59]		function claim() returns (bool success) {...
    PUSH 4		function claim() returns (bool success) {...
    DUP1			function claim() returns (bool success) {...
    POP			function claim() returns (bool success) {...
    POP			function claim() returns (bool success) {...
    PUSH [tag60]		function claim() returns (bool success) {...
    JUMP			function claim() returns (bool success) {...
  tag59: 
    JUMPDEST		function claim() returns (bool success) {...
    PUSH 40		function claim() returns (bool success) {...
    MLOAD			function claim() returns (bool success) {...
    DUP1			function claim() returns (bool success) {...
    DUP3			function claim() returns (bool success) {...
    DUP2			function claim() returns (bool success) {...
    MSTORE			function claim() returns (bool success) {...
    PUSH 20		function claim() returns (bool success) {...
    ADD			function claim() returns (bool success) {...
    SWAP2			function claim() returns (bool success) {...
    POP			function claim() returns (bool success) {...
    POP			function claim() returns (bool success) {...
    PUSH 40		function claim() returns (bool success) {...
    MLOAD			function claim() returns (bool success) {...
    DUP1			function claim() returns (bool success) {...
    SWAP2			function claim() returns (bool success) {...
    SUB			function claim() returns (bool success) {...
    SWAP1			function claim() returns (bool success) {...
    RETURN			function claim() returns (bool success) {...
  tag11: 
    JUMPDEST		uint256 public ethToCents
    PUSH [tag61]		uint256 public ethToCents
    PUSH 4		uint256 public ethToCents
    DUP1			uint256 public ethToCents
    POP			uint256 public ethToCents
    POP			uint256 public ethToCents
    PUSH [tag62]		uint256 public ethToCents
    JUMP			uint256 public ethToCents
  tag61: 
    JUMPDEST		uint256 public ethToCents
    PUSH 40		uint256 public ethToCents
    MLOAD			uint256 public ethToCents
    DUP1			uint256 public ethToCents
    DUP3			uint256 public ethToCents
    DUP2			uint256 public ethToCents
    MSTORE			uint256 public ethToCents
    PUSH 20		uint256 public ethToCents
    ADD			uint256 public ethToCents
    SWAP2			uint256 public ethToCents
    POP			uint256 public ethToCents
    POP			uint256 public ethToCents
    PUSH 40		uint256 public ethToCents
    MLOAD			uint256 public ethToCents
    DUP1			uint256 public ethToCents
    SWAP2			uint256 public ethToCents
    SUB			uint256 public ethToCents
    SWAP1			uint256 public ethToCents
    RETURN			uint256 public ethToCents
  tag12: 
    JUMPDEST		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    PUSH [tag63]		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    PUSH 4		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    DUP1			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    DUP1			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    CALLDATALOAD			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    SWAP1			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    PUSH 20		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    ADD			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    SWAP1			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    SWAP2			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    SWAP1			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    POP			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    POP			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    PUSH [tag64]		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    JUMP			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
  tag63: 
    JUMPDEST		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    PUSH 40		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    MLOAD			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    DUP1			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    DUP3			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    DUP2			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    MSTORE			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    PUSH 20		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    ADD			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    SWAP2			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    POP			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    POP			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    PUSH 40		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    MLOAD			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    DUP1			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    SWAP2			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    SUB			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    SWAP1			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    RETURN			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
  tag13: 
    JUMPDEST		function totalWei() public constant returns (uint) {...
    PUSH [tag65]		function totalWei() public constant returns (uint) {...
    PUSH 4		function totalWei() public constant returns (uint) {...
    DUP1			function totalWei() public constant returns (uint) {...
    POP			function totalWei() public constant returns (uint) {...
    POP			function totalWei() public constant returns (uint) {...
    PUSH [tag66]		function totalWei() public constant returns (uint) {...
    JUMP			function totalWei() public constant returns (uint) {...
  tag65: 
    JUMPDEST		function totalWei() public constant returns (uint) {...
    PUSH 40		function totalWei() public constant returns (uint) {...
    MLOAD			function totalWei() public constant returns (uint) {...
    DUP1			function totalWei() public constant returns (uint) {...
    DUP3			function totalWei() public constant returns (uint) {...
    DUP2			function totalWei() public constant returns (uint) {...
    MSTORE			function totalWei() public constant returns (uint) {...
    PUSH 20		function totalWei() public constant returns (uint) {...
    ADD			function totalWei() public constant returns (uint) {...
    SWAP2			function totalWei() public constant returns (uint) {...
    POP			function totalWei() public constant returns (uint) {...
    POP			function totalWei() public constant returns (uint) {...
    PUSH 40		function totalWei() public constant returns (uint) {...
    MLOAD			function totalWei() public constant returns (uint) {...
    DUP1			function totalWei() public constant returns (uint) {...
    SWAP2			function totalWei() public constant returns (uint) {...
    SUB			function totalWei() public constant returns (uint) {...
    SWAP1			function totalWei() public constant returns (uint) {...
    RETURN			function totalWei() public constant returns (uint) {...
  tag14: 
    JUMPDEST		uint256 public WEI_PER_ETH = 1000000000000000000
    PUSH [tag67]		uint256 public WEI_PER_ETH = 1000000000000000000
    PUSH 4		uint256 public WEI_PER_ETH = 1000000000000000000
    DUP1			uint256 public WEI_PER_ETH = 1000000000000000000
    POP			uint256 public WEI_PER_ETH = 1000000000000000000
    POP			uint256 public WEI_PER_ETH = 1000000000000000000
    PUSH [tag68]		uint256 public WEI_PER_ETH = 1000000000000000000
    JUMP			uint256 public WEI_PER_ETH = 1000000000000000000
  tag67: 
    JUMPDEST		uint256 public WEI_PER_ETH = 1000000000000000000
    PUSH 40		uint256 public WEI_PER_ETH = 1000000000000000000
    MLOAD			uint256 public WEI_PER_ETH = 1000000000000000000
    DUP1			uint256 public WEI_PER_ETH = 1000000000000000000
    DUP3			uint256 public WEI_PER_ETH = 1000000000000000000
    DUP2			uint256 public WEI_PER_ETH = 1000000000000000000
    MSTORE			uint256 public WEI_PER_ETH = 1000000000000000000
    PUSH 20		uint256 public WEI_PER_ETH = 1000000000000000000
    ADD			uint256 public WEI_PER_ETH = 1000000000000000000
    SWAP2			uint256 public WEI_PER_ETH = 1000000000000000000
    POP			uint256 public WEI_PER_ETH = 1000000000000000000
    POP			uint256 public WEI_PER_ETH = 1000000000000000000
    PUSH 40		uint256 public WEI_PER_ETH = 1000000000000000000
    MLOAD			uint256 public WEI_PER_ETH = 1000000000000000000
    DUP1			uint256 public WEI_PER_ETH = 1000000000000000000
    SWAP2			uint256 public WEI_PER_ETH = 1000000000000000000
    SUB			uint256 public WEI_PER_ETH = 1000000000000000000
    SWAP1			uint256 public WEI_PER_ETH = 1000000000000000000
    RETURN			uint256 public WEI_PER_ETH = 1000000000000000000
  tag15: 
    JUMPDEST		function goalReached() public constant returns (bool reached) {...
    PUSH [tag69]		function goalReached() public constant returns (bool reached) {...
    PUSH 4		function goalReached() public constant returns (bool reached) {...
    DUP1			function goalReached() public constant returns (bool reached) {...
    POP			function goalReached() public constant returns (bool reached) {...
    POP			function goalReached() public constant returns (bool reached) {...
    PUSH [tag70]		function goalReached() public constant returns (bool reached) {...
    JUMP			function goalReached() public constant returns (bool reached) {...
  tag69: 
    JUMPDEST		function goalReached() public constant returns (bool reached) {...
    PUSH 40		function goalReached() public constant returns (bool reached) {...
    MLOAD			function goalReached() public constant returns (bool reached) {...
    DUP1			function goalReached() public constant returns (bool reached) {...
    DUP3			function goalReached() public constant returns (bool reached) {...
    DUP2			function goalReached() public constant returns (bool reached) {...
    MSTORE			function goalReached() public constant returns (bool reached) {...
    PUSH 20		function goalReached() public constant returns (bool reached) {...
    ADD			function goalReached() public constant returns (bool reached) {...
    SWAP2			function goalReached() public constant returns (bool reached) {...
    POP			function goalReached() public constant returns (bool reached) {...
    POP			function goalReached() public constant returns (bool reached) {...
    PUSH 40		function goalReached() public constant returns (bool reached) {...
    MLOAD			function goalReached() public constant returns (bool reached) {...
    DUP1			function goalReached() public constant returns (bool reached) {...
    SWAP2			function goalReached() public constant returns (bool reached) {...
    SUB			function goalReached() public constant returns (bool reached) {...
    SWAP1			function goalReached() public constant returns (bool reached) {...
    RETURN			function goalReached() public constant returns (bool reached) {...
  tag16: 
    JUMPDEST		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    PUSH [tag71]		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    PUSH 4		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    DUP1			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    DUP1			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    CALLDATALOAD			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    SWAP1			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    PUSH 20		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    ADD			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    SWAP1			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    SWAP2			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    SWAP1			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    POP			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    POP			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    PUSH [tag72]		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    JUMP			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
  tag71: 
    JUMPDEST		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    PUSH 40		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    MLOAD			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    DUP1			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    DUP4			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    AND			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    DUP2			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    MSTORE			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    PUSH 20		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    ADD			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    DUP3			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    DUP2			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    MSTORE			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    PUSH 20		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    ADD			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    SWAP3			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    POP			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    POP			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    POP			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    PUSH 40		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    MLOAD			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    DUP1			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    SWAP2			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    SUB			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    SWAP1			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    RETURN			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
  tag17: 
    JUMPDEST		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH [tag73]		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 4		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP1			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH [tag74]		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    JUMP			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
  tag73: 
    JUMPDEST		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 40		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MLOAD			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP1			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP7			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP2			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MSTORE			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP6			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP2			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MSTORE			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP5			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP2			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MSTORE			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP4			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP2			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MSTORE			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP3			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP2			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MSTORE			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 20		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    ADD			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP6			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 40		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    MLOAD			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    DUP1			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP2			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SUB			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP1			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    RETURN			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
  tag18: 
    JUMPDEST		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    PUSH [tag75]		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    PUSH 4		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    DUP1			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    DUP1			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    CALLDATALOAD			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    SWAP1			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    PUSH 20		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    ADD			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    SWAP1			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    SWAP2			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    SWAP1			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    POP			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    POP			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    PUSH [tag76]		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    JUMP			function regProxy(address _payout) ifOOrigin returns (bool success) {...
  tag75: 
    JUMPDEST		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    PUSH 40		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    MLOAD			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    DUP1			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    DUP3			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    DUP2			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    MSTORE			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    PUSH 20		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    ADD			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    SWAP2			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    POP			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    POP			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    PUSH 40		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    MLOAD			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    DUP1			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    SWAP2			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    SUB			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    SWAP1			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    RETURN			function regProxy(address _payout) ifOOrigin returns (bool success) {...
  tag19: 
    JUMPDEST		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    PUSH [tag77]		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    PUSH 4		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP1			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    POP			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    POP			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    PUSH [tag78]		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    JUMP			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
  tag77: 
    JUMPDEST		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    PUSH 40		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    MLOAD			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP1			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP6			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP2			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    MSTORE			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    PUSH 20		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    ADD			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP5			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP2			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    MSTORE			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    PUSH 20		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    ADD			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP4			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP2			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    MSTORE			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    PUSH 20		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    ADD			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP3			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP2			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    MSTORE			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    PUSH 20		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    ADD			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    SWAP5			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    POP			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    POP			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    POP			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    POP			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    POP			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    PUSH 40		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    MLOAD			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    DUP1			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    SWAP2			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    SUB			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    SWAP1			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    RETURN			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
  tag20: 
    JUMPDEST		function sendFunds() public returns (bool success) {...
    PUSH [tag79]		function sendFunds() public returns (bool success) {...
    PUSH 4		function sendFunds() public returns (bool success) {...
    DUP1			function sendFunds() public returns (bool success) {...
    POP			function sendFunds() public returns (bool success) {...
    POP			function sendFunds() public returns (bool success) {...
    PUSH [tag80]		function sendFunds() public returns (bool success) {...
    JUMP			function sendFunds() public returns (bool success) {...
  tag79: 
    JUMPDEST		function sendFunds() public returns (bool success) {...
    PUSH 40		function sendFunds() public returns (bool success) {...
    MLOAD			function sendFunds() public returns (bool success) {...
    DUP1			function sendFunds() public returns (bool success) {...
    DUP3			function sendFunds() public returns (bool success) {...
    DUP2			function sendFunds() public returns (bool success) {...
    MSTORE			function sendFunds() public returns (bool success) {...
    PUSH 20		function sendFunds() public returns (bool success) {...
    ADD			function sendFunds() public returns (bool success) {...
    SWAP2			function sendFunds() public returns (bool success) {...
    POP			function sendFunds() public returns (bool success) {...
    POP			function sendFunds() public returns (bool success) {...
    PUSH 40		function sendFunds() public returns (bool success) {...
    MLOAD			function sendFunds() public returns (bool success) {...
    DUP1			function sendFunds() public returns (bool success) {...
    SWAP2			function sendFunds() public returns (bool success) {...
    SUB			function sendFunds() public returns (bool success) {...
    SWAP1			function sendFunds() public returns (bool success) {...
    RETURN			function sendFunds() public returns (bool success) {...
  tag21: 
    JUMPDEST		function isEnded() public constant returns (bool ended) {...
    PUSH [tag81]		function isEnded() public constant returns (bool ended) {...
    PUSH 4		function isEnded() public constant returns (bool ended) {...
    DUP1			function isEnded() public constant returns (bool ended) {...
    POP			function isEnded() public constant returns (bool ended) {...
    POP			function isEnded() public constant returns (bool ended) {...
    PUSH [tag82]		function isEnded() public constant returns (bool ended) {...
    JUMP			function isEnded() public constant returns (bool ended) {...
  tag81: 
    JUMPDEST		function isEnded() public constant returns (bool ended) {...
    PUSH 40		function isEnded() public constant returns (bool ended) {...
    MLOAD			function isEnded() public constant returns (bool ended) {...
    DUP1			function isEnded() public constant returns (bool ended) {...
    DUP3			function isEnded() public constant returns (bool ended) {...
    DUP2			function isEnded() public constant returns (bool ended) {...
    MSTORE			function isEnded() public constant returns (bool ended) {...
    PUSH 20		function isEnded() public constant returns (bool ended) {...
    ADD			function isEnded() public constant returns (bool ended) {...
    SWAP2			function isEnded() public constant returns (bool ended) {...
    POP			function isEnded() public constant returns (bool ended) {...
    POP			function isEnded() public constant returns (bool ended) {...
    PUSH 40		function isEnded() public constant returns (bool ended) {...
    MLOAD			function isEnded() public constant returns (bool ended) {...
    DUP1			function isEnded() public constant returns (bool ended) {...
    SWAP2			function isEnded() public constant returns (bool ended) {...
    SUB			function isEnded() public constant returns (bool ended) {...
    SWAP1			function isEnded() public constant returns (bool ended) {...
    RETURN			function isEnded() public constant returns (bool ended) {...
  tag22: 
    JUMPDEST		function unlock() ifOwner public returns (bool success) {...
    PUSH [tag83]		function unlock() ifOwner public returns (bool success) {...
    PUSH 4		function unlock() ifOwner public returns (bool success) {...
    DUP1			function unlock() ifOwner public returns (bool success) {...
    POP			function unlock() ifOwner public returns (bool success) {...
    POP			function unlock() ifOwner public returns (bool success) {...
    PUSH [tag84]		function unlock() ifOwner public returns (bool success) {...
    JUMP			function unlock() ifOwner public returns (bool success) {...
  tag83: 
    JUMPDEST		function unlock() ifOwner public returns (bool success) {...
    PUSH 40		function unlock() ifOwner public returns (bool success) {...
    MLOAD			function unlock() ifOwner public returns (bool success) {...
    DUP1			function unlock() ifOwner public returns (bool success) {...
    DUP3			function unlock() ifOwner public returns (bool success) {...
    DUP2			function unlock() ifOwner public returns (bool success) {...
    MSTORE			function unlock() ifOwner public returns (bool success) {...
    PUSH 20		function unlock() ifOwner public returns (bool success) {...
    ADD			function unlock() ifOwner public returns (bool success) {...
    SWAP2			function unlock() ifOwner public returns (bool success) {...
    POP			function unlock() ifOwner public returns (bool success) {...
    POP			function unlock() ifOwner public returns (bool success) {...
    PUSH 40		function unlock() ifOwner public returns (bool success) {...
    MLOAD			function unlock() ifOwner public returns (bool success) {...
    DUP1			function unlock() ifOwner public returns (bool success) {...
    SWAP2			function unlock() ifOwner public returns (bool success) {...
    SUB			function unlock() ifOwner public returns (bool success) {...
    SWAP1			function unlock() ifOwner public returns (bool success) {...
    RETURN			function unlock() ifOwner public returns (bool success) {...
  tag23: 
    JUMPDEST		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    PUSH [tag85]		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    PUSH 4		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    DUP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    DUP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    CALLDATALOAD			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    PUSH 20		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    ADD			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP2			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    DUP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    CALLDATALOAD			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    PUSH 20		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    ADD			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP2			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    POP			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    POP			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    PUSH [tag86]		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    JUMP			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
  tag85: 
    JUMPDEST		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    PUSH 40		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    MLOAD			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    DUP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    DUP3			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    DUP2			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    MSTORE			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    PUSH 20		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    ADD			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP2			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    POP			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    POP			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    PUSH 40		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    MLOAD			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    DUP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP2			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SUB			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP1			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    RETURN			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
  tag24: 
    JUMPDEST		function getProxy(address _payout) public returns (address proxy) {...
    PUSH [tag87]		function getProxy(address _payout) public returns (address proxy) {...
    PUSH 4		function getProxy(address _payout) public returns (address proxy) {...
    DUP1			function getProxy(address _payout) public returns (address proxy) {...
    DUP1			function getProxy(address _payout) public returns (address proxy) {...
    CALLDATALOAD			function getProxy(address _payout) public returns (address proxy) {...
    SWAP1			function getProxy(address _payout) public returns (address proxy) {...
    PUSH 20		function getProxy(address _payout) public returns (address proxy) {...
    ADD			function getProxy(address _payout) public returns (address proxy) {...
    SWAP1			function getProxy(address _payout) public returns (address proxy) {...
    SWAP2			function getProxy(address _payout) public returns (address proxy) {...
    SWAP1			function getProxy(address _payout) public returns (address proxy) {...
    POP			function getProxy(address _payout) public returns (address proxy) {...
    POP			function getProxy(address _payout) public returns (address proxy) {...
    PUSH [tag88]		function getProxy(address _payout) public returns (address proxy) {...
    JUMP			function getProxy(address _payout) public returns (address proxy) {...
  tag87: 
    JUMPDEST		function getProxy(address _payout) public returns (address proxy) {...
    PUSH 40		function getProxy(address _payout) public returns (address proxy) {...
    MLOAD			function getProxy(address _payout) public returns (address proxy) {...
    DUP1			function getProxy(address _payout) public returns (address proxy) {...
    DUP3			function getProxy(address _payout) public returns (address proxy) {...
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		function getProxy(address _payout) public returns (address proxy) {...
    AND			function getProxy(address _payout) public returns (address proxy) {...
    DUP2			function getProxy(address _payout) public returns (address proxy) {...
    MSTORE			function getProxy(address _payout) public returns (address proxy) {...
    PUSH 20		function getProxy(address _payout) public returns (address proxy) {...
    ADD			function getProxy(address _payout) public returns (address proxy) {...
    SWAP2			function getProxy(address _payout) public returns (address proxy) {...
    POP			function getProxy(address _payout) public returns (address proxy) {...
    POP			function getProxy(address _payout) public returns (address proxy) {...
    PUSH 40		function getProxy(address _payout) public returns (address proxy) {...
    MLOAD			function getProxy(address _payout) public returns (address proxy) {...
    DUP1			function getProxy(address _payout) public returns (address proxy) {...
    SWAP2			function getProxy(address _payout) public returns (address proxy) {...
    SUB			function getProxy(address _payout) public returns (address proxy) {...
    SWAP1			function getProxy(address _payout) public returns (address proxy) {...
    RETURN			function getProxy(address _payout) public returns (address proxy) {...
  tag25: 
    JUMPDEST		function periodThree() public constant returns (uint date) {...
    PUSH [tag89]		function periodThree() public constant returns (uint date) {...
    PUSH 4		function periodThree() public constant returns (uint date) {...
    DUP1			function periodThree() public constant returns (uint date) {...
    POP			function periodThree() public constant returns (uint date) {...
    POP			function periodThree() public constant returns (uint date) {...
    PUSH [tag90]		function periodThree() public constant returns (uint date) {...
    JUMP			function periodThree() public constant returns (uint date) {...
  tag89: 
    JUMPDEST		function periodThree() public constant returns (uint date) {...
    PUSH 40		function periodThree() public constant returns (uint date) {...
    MLOAD			function periodThree() public constant returns (uint date) {...
    DUP1			function periodThree() public constant returns (uint date) {...
    DUP3			function periodThree() public constant returns (uint date) {...
    DUP2			function periodThree() public constant returns (uint date) {...
    MSTORE			function periodThree() public constant returns (uint date) {...
    PUSH 20		function periodThree() public constant returns (uint date) {...
    ADD			function periodThree() public constant returns (uint date) {...
    SWAP2			function periodThree() public constant returns (uint date) {...
    POP			function periodThree() public constant returns (uint date) {...
    POP			function periodThree() public constant returns (uint date) {...
    PUSH 40		function periodThree() public constant returns (uint date) {...
    MLOAD			function periodThree() public constant returns (uint date) {...
    DUP1			function periodThree() public constant returns (uint date) {...
    SWAP2			function periodThree() public constant returns (uint date) {...
    SUB			function periodThree() public constant returns (uint date) {...
    SWAP1			function periodThree() public constant returns (uint date) {...
    RETURN			function periodThree() public constant returns (uint date) {...
  tag26: 
    JUMPDEST		function totalCents() public constant returns (uint) {...
    PUSH [tag91]		function totalCents() public constant returns (uint) {...
    PUSH 4		function totalCents() public constant returns (uint) {...
    DUP1			function totalCents() public constant returns (uint) {...
    POP			function totalCents() public constant returns (uint) {...
    POP			function totalCents() public constant returns (uint) {...
    PUSH [tag92]		function totalCents() public constant returns (uint) {...
    JUMP			function totalCents() public constant returns (uint) {...
  tag91: 
    JUMPDEST		function totalCents() public constant returns (uint) {...
    PUSH 40		function totalCents() public constant returns (uint) {...
    MLOAD			function totalCents() public constant returns (uint) {...
    DUP1			function totalCents() public constant returns (uint) {...
    DUP3			function totalCents() public constant returns (uint) {...
    DUP2			function totalCents() public constant returns (uint) {...
    MSTORE			function totalCents() public constant returns (uint) {...
    PUSH 20		function totalCents() public constant returns (uint) {...
    ADD			function totalCents() public constant returns (uint) {...
    SWAP2			function totalCents() public constant returns (uint) {...
    POP			function totalCents() public constant returns (uint) {...
    POP			function totalCents() public constant returns (uint) {...
    PUSH 40		function totalCents() public constant returns (uint) {...
    MLOAD			function totalCents() public constant returns (uint) {...
    DUP1			function totalCents() public constant returns (uint) {...
    SWAP2			function totalCents() public constant returns (uint) {...
    SUB			function totalCents() public constant returns (uint) {...
    SWAP1			function totalCents() public constant returns (uint) {...
    RETURN			function totalCents() public constant returns (uint) {...
  tag27: 
    JUMPDEST		function endDate() public constant returns (uint date) {...
    PUSH [tag93]		function endDate() public constant returns (uint date) {...
    PUSH 4		function endDate() public constant returns (uint date) {...
    DUP1			function endDate() public constant returns (uint date) {...
    POP			function endDate() public constant returns (uint date) {...
    POP			function endDate() public constant returns (uint date) {...
    PUSH [tag94]		function endDate() public constant returns (uint date) {...
    JUMP			function endDate() public constant returns (uint date) {...
  tag93: 
    JUMPDEST		function endDate() public constant returns (uint date) {...
    PUSH 40		function endDate() public constant returns (uint date) {...
    MLOAD			function endDate() public constant returns (uint date) {...
    DUP1			function endDate() public constant returns (uint date) {...
    DUP3			function endDate() public constant returns (uint date) {...
    DUP2			function endDate() public constant returns (uint date) {...
    MSTORE			function endDate() public constant returns (uint date) {...
    PUSH 20		function endDate() public constant returns (uint date) {...
    ADD			function endDate() public constant returns (uint date) {...
    SWAP2			function endDate() public constant returns (uint date) {...
    POP			function endDate() public constant returns (uint date) {...
    POP			function endDate() public constant returns (uint date) {...
    PUSH 40		function endDate() public constant returns (uint date) {...
    MLOAD			function endDate() public constant returns (uint date) {...
    DUP1			function endDate() public constant returns (uint date) {...
    SWAP2			function endDate() public constant returns (uint date) {...
    SUB			function endDate() public constant returns (uint date) {...
    SWAP1			function endDate() public constant returns (uint date) {...
    RETURN			function endDate() public constant returns (uint date) {...
  tag28: 
    JUMPDEST		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH [tag95]		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 4		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP1			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH [tag96]		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    JUMP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
  tag95: 
    JUMPDEST		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 40		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MLOAD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP1			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP11			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MSTORE			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 20		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    ADD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP10			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MSTORE			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 20		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    ADD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP9			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MSTORE			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 20		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    ADD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP8			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MSTORE			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 20		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    ADD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP7			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MSTORE			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 20		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    ADD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP6			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MSTORE			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 20		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    ADD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP5			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MSTORE			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 20		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    ADD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP4			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MSTORE			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 20		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    ADD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP3			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    AND			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MSTORE			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 20		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    ADD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP10			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    POP			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 40		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    MLOAD			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    DUP1			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SUB			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP1			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    RETURN			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
  tag29: 
    JUMPDEST		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    PUSH [tag97]		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    PUSH 4		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP1			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    POP			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    POP			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    PUSH [tag98]		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    JUMP			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
  tag97: 
    JUMPDEST		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    PUSH 40		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    MLOAD			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP1			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP6			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP2			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    MSTORE			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    PUSH 20		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    ADD			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP5			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP2			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    MSTORE			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    PUSH 20		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    ADD			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP4			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP2			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    MSTORE			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    PUSH 20		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    ADD			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP3			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP2			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    MSTORE			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    PUSH 20		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    ADD			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    SWAP5			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    POP			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    POP			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    POP			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    POP			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    POP			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    PUSH 40		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    MLOAD			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    DUP1			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    SWAP2			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    SUB			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    SWAP1			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    RETURN			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
  tag30: 
    JUMPDEST		function claimFor(address _user) returns (bool success) {...
    PUSH [tag99]		function claimFor(address _user) returns (bool success) {...
    PUSH 4		function claimFor(address _user) returns (bool success) {...
    DUP1			function claimFor(address _user) returns (bool success) {...
    DUP1			function claimFor(address _user) returns (bool success) {...
    CALLDATALOAD			function claimFor(address _user) returns (bool success) {...
    SWAP1			function claimFor(address _user) returns (bool success) {...
    PUSH 20		function claimFor(address _user) returns (bool success) {...
    ADD			function claimFor(address _user) returns (bool success) {...
    SWAP1			function claimFor(address _user) returns (bool success) {...
    SWAP2			function claimFor(address _user) returns (bool success) {...
    SWAP1			function claimFor(address _user) returns (bool success) {...
    POP			function claimFor(address _user) returns (bool success) {...
    POP			function claimFor(address _user) returns (bool success) {...
    PUSH [tag100]		function claimFor(address _user) returns (bool success) {...
    JUMP			function claimFor(address _user) returns (bool success) {...
  tag99: 
    JUMPDEST		function claimFor(address _user) returns (bool success) {...
    PUSH 40		function claimFor(address _user) returns (bool success) {...
    MLOAD			function claimFor(address _user) returns (bool success) {...
    DUP1			function claimFor(address _user) returns (bool success) {...
    DUP3			function claimFor(address _user) returns (bool success) {...
    DUP2			function claimFor(address _user) returns (bool success) {...
    MSTORE			function claimFor(address _user) returns (bool success) {...
    PUSH 20		function claimFor(address _user) returns (bool success) {...
    ADD			function claimFor(address _user) returns (bool success) {...
    SWAP2			function claimFor(address _user) returns (bool success) {...
    POP			function claimFor(address _user) returns (bool success) {...
    POP			function claimFor(address _user) returns (bool success) {...
    PUSH 40		function claimFor(address _user) returns (bool success) {...
    MLOAD			function claimFor(address _user) returns (bool success) {...
    DUP1			function claimFor(address _user) returns (bool success) {...
    SWAP2			function claimFor(address _user) returns (bool success) {...
    SUB			function claimFor(address _user) returns (bool success) {...
    SWAP1			function claimFor(address _user) returns (bool success) {...
    RETURN			function claimFor(address _user) returns (bool success) {...
  tag31: 
    JUMPDEST		uint256 public CENTS = 100
    PUSH [tag101]		uint256 public CENTS = 100
    PUSH 4		uint256 public CENTS = 100
    DUP1			uint256 public CENTS = 100
    POP			uint256 public CENTS = 100
    POP			uint256 public CENTS = 100
    PUSH [tag102]		uint256 public CENTS = 100
    JUMP			uint256 public CENTS = 100
  tag101: 
    JUMPDEST		uint256 public CENTS = 100
    PUSH 40		uint256 public CENTS = 100
    MLOAD			uint256 public CENTS = 100
    DUP1			uint256 public CENTS = 100
    DUP3			uint256 public CENTS = 100
    DUP2			uint256 public CENTS = 100
    MSTORE			uint256 public CENTS = 100
    PUSH 20		uint256 public CENTS = 100
    ADD			uint256 public CENTS = 100
    SWAP2			uint256 public CENTS = 100
    POP			uint256 public CENTS = 100
    POP			uint256 public CENTS = 100
    PUSH 40		uint256 public CENTS = 100
    MLOAD			uint256 public CENTS = 100
    DUP1			uint256 public CENTS = 100
    SWAP2			uint256 public CENTS = 100
    SUB			uint256 public CENTS = 100
    SWAP1			uint256 public CENTS = 100
    RETURN			uint256 public CENTS = 100
  tag32: 
    JUMPDEST		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    PUSH [tag103]		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    PUSH 4		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    DUP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    DUP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    CALLDATALOAD			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    PUSH 20		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    ADD			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP2			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    DUP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    CALLDATALOAD			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    PUSH 20		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    ADD			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP2			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    POP			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    POP			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    PUSH [tag104]		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    JUMP			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
  tag103: 
    JUMPDEST		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    PUSH 40		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    MLOAD			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    DUP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    DUP3			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    DUP2			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    MSTORE			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    PUSH 20		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    ADD			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP2			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    POP			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    POP			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    PUSH 40		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    MLOAD			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    DUP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP2			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SUB			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP1			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    RETURN			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
  tag78: 
    JUMPDEST		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    PUSH 0		bool fclaim
    PUSH 0		uint256 reltokens
    PUSH 0		uint256 relbadges
    PUSH 0		uint256 claimers
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 0		saleStatus.founderClaim
    ADD			saleStatus.founderClaim
    PUSH 0		saleStatus.founderClaim
    SWAP1			saleStatus.founderClaim
    SLOAD			saleStatus.founderClaim
    SWAP1			saleStatus.founderClaim
    PUSH 100		saleStatus.founderClaim
    EXP			saleStatus.founderClaim
    SWAP1			saleStatus.founderClaim
    DIV			saleStatus.founderClaim
    PUSH FF		saleStatus.founderClaim
    AND			saleStatus.founderClaim
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 1		saleStatus.releasedTokens
    ADD			saleStatus.releasedTokens
    PUSH 0		saleStatus.releasedTokens
    POP			saleStatus.releasedTokens
    SLOAD			saleStatus.releasedTokens
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 2		saleStatus.releasedBadges
    ADD			saleStatus.releasedBadges
    PUSH 0		saleStatus.releasedBadges
    POP			saleStatus.releasedBadges
    SLOAD			saleStatus.releasedBadges
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 3		saleStatus.claimers
    ADD			saleStatus.claimers
    PUSH 0		saleStatus.claimers
    POP			saleStatus.claimers
    SLOAD			saleStatus.claimers
    SWAP4			return (saleStatus.founderClaim, saleStatus.releasedTokens, saleStatus.releasedBadges, saleStatus.claimers)
    POP			return (saleStatus.founderClaim, saleStatus.releasedTokens, saleStatus.releasedBadges, saleStatus.claimers)
    SWAP4			return (saleStatus.founderClaim, saleStatus.releasedTokens, saleStatus.releasedBadges, saleStatus.claimers)
    POP			return (saleStatus.founderClaim, saleStatus.releasedTokens, saleStatus.releasedBadges, saleStatus.claimers)
    SWAP4			return (saleStatus.founderClaim, saleStatus.releasedTokens, saleStatus.releasedBadges, saleStatus.claimers)
    POP			return (saleStatus.founderClaim, saleStatus.releasedTokens, saleStatus.releasedBadges, saleStatus.claimers)
    SWAP4			return (saleStatus.founderClaim, saleStatus.releasedTokens, saleStatus.releasedBadges, saleStatus.claimers)
    POP			return (saleStatus.founderClaim, saleStatus.releasedTokens, saleStatus.releasedBadges, saleStatus.claimers)
    PUSH [tag105]		return (saleStatus.founderClaim, saleStatus.releasedTokens, saleStatus.releasedBadges, saleStatus.claimers)
    JUMP			return (saleStatus.founderClaim, saleStatus.releasedTokens, saleStatus.releasedBadges, saleStatus.claimers)
  tag105: 
    JUMPDEST		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    SWAP1			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    SWAP2			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    SWAP3			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    SWAP4			function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
    JUMP	[out]		function getSaleStatus() public constant returns (bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers) {...
  tag98: 
    JUMPDEST		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    PUSH 0		uint256 weiamount
    PUSH 0		uint256 cents
    PUSH 0		uint256 realcents
    PUSH 0		uint256 amount
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 0		saleInfo.totalWei
    ADD			saleInfo.totalWei
    PUSH 0		saleInfo.totalWei
    POP			saleInfo.totalWei
    SLOAD			saleInfo.totalWei
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 1		saleInfo.totalCents
    ADD			saleInfo.totalCents
    PUSH 0		saleInfo.totalCents
    POP			saleInfo.totalCents
    SLOAD			saleInfo.totalCents
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 2		saleInfo.realCents
    ADD			saleInfo.realCents
    PUSH 0		saleInfo.realCents
    POP			saleInfo.realCents
    SLOAD			saleInfo.realCents
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 3		saleInfo.amount
    ADD			saleInfo.amount
    PUSH 0		saleInfo.amount
    POP			saleInfo.amount
    SLOAD			saleInfo.amount
    SWAP4			return (saleInfo.totalWei, saleInfo.totalCents, saleInfo.realCents, saleInfo.amount)
    POP			return (saleInfo.totalWei, saleInfo.totalCents, saleInfo.realCents, saleInfo.amount)
    SWAP4			return (saleInfo.totalWei, saleInfo.totalCents, saleInfo.realCents, saleInfo.amount)
    POP			return (saleInfo.totalWei, saleInfo.totalCents, saleInfo.realCents, saleInfo.amount)
    SWAP4			return (saleInfo.totalWei, saleInfo.totalCents, saleInfo.realCents, saleInfo.amount)
    POP			return (saleInfo.totalWei, saleInfo.totalCents, saleInfo.realCents, saleInfo.amount)
    SWAP4			return (saleInfo.totalWei, saleInfo.totalCents, saleInfo.realCents, saleInfo.amount)
    POP			return (saleInfo.totalWei, saleInfo.totalCents, saleInfo.realCents, saleInfo.amount)
    PUSH [tag106]		return (saleInfo.totalWei, saleInfo.totalCents, saleInfo.realCents, saleInfo.amount)
    JUMP			return (saleInfo.totalWei, saleInfo.totalCents, saleInfo.realCents, saleInfo.amount)
  tag106: 
    JUMPDEST		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    SWAP1			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    SWAP2			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    SWAP3			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    SWAP4			function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
    JUMP	[out]		function getSaleInfo() public constant returns (uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount) {...
  tag96: 
    JUMPDEST		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    PUSH 0		uint256 start
    PUSH 0		uint256 two
    PUSH 0		uint256 three
    PUSH 0		uint256 end
    PUSH 0		uint256 goal
    PUSH 0		uint256 cap
    PUSH 0		uint256 badgecost
    PUSH 0		uint256 famount
    PUSH 0		address fwallet
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 0		saleConfig.startDate
    ADD			saleConfig.startDate
    PUSH 0		saleConfig.startDate
    POP			saleConfig.startDate
    SLOAD			saleConfig.startDate
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 1		saleConfig.periodTwo
    ADD			saleConfig.periodTwo
    PUSH 0		saleConfig.periodTwo
    POP			saleConfig.periodTwo
    SLOAD			saleConfig.periodTwo
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 2		saleConfig.periodThree
    ADD			saleConfig.periodThree
    PUSH 0		saleConfig.periodThree
    POP			saleConfig.periodThree
    SLOAD			saleConfig.periodThree
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 3		saleConfig.endDate
    ADD			saleConfig.endDate
    PUSH 0		saleConfig.endDate
    POP			saleConfig.endDate
    SLOAD			saleConfig.endDate
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 4		saleConfig.goal
    ADD			saleConfig.goal
    PUSH 0		saleConfig.goal
    POP			saleConfig.goal
    SLOAD			saleConfig.goal
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 5		saleConfig.cap
    ADD			saleConfig.cap
    PUSH 0		saleConfig.cap
    POP			saleConfig.cap
    SLOAD			saleConfig.cap
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 6		saleConfig.badgeCost
    ADD			saleConfig.badgeCost
    PUSH 0		saleConfig.badgeCost
    POP			saleConfig.badgeCost
    SLOAD			saleConfig.badgeCost
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 7		saleConfig.founderAmount
    ADD			saleConfig.founderAmount
    PUSH 0		saleConfig.founderAmount
    POP			saleConfig.founderAmount
    SLOAD			saleConfig.founderAmount
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 8		saleConfig.founderWallet
    ADD			saleConfig.founderWallet
    PUSH 0		saleConfig.founderWallet
    SWAP1			saleConfig.founderWallet
    SLOAD			saleConfig.founderWallet
    SWAP1			saleConfig.founderWallet
    PUSH 100		saleConfig.founderWallet
    EXP			saleConfig.founderWallet
    SWAP1			saleConfig.founderWallet
    DIV			saleConfig.founderWallet
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		saleConfig.founderWallet
    AND			saleConfig.founderWallet
    SWAP9			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    POP			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    SWAP9			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    POP			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    SWAP9			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    POP			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    SWAP9			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    POP			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    SWAP9			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    POP			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    SWAP9			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    POP			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    SWAP9			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    POP			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    SWAP9			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    POP			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    SWAP9			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    POP			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    PUSH [tag107]		return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
    JUMP			return (saleConfig.startDate, saleConfig.periodTwo, saleConfig.periodThree, saleConfig.endDate, saleConfig.goal, saleConfig.cap, saleConfig.badgeCost, saleConfig.founderAmount, saleConfig.founderWallet)
  tag107: 
    JUMPDEST		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP1			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP2			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP3			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP4			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP5			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP6			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP7			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP8			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    SWAP9			function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
    JUMP	[out]		function getSaleConfig() public constant returns (uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet) {...
  tag70: 
    JUMPDEST		function goalReached() public constant returns (bool reached) {...
    PUSH 0		bool reached
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 4		saleConfig.goal
    ADD			saleConfig.goal
    PUSH 0		saleConfig.goal
    POP			saleConfig.goal
    SLOAD			saleConfig.goal
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 1		saleInfo.totalCents
    ADD			saleInfo.totalCents
    PUSH 0		saleInfo.totalCents
    POP			saleInfo.totalCents
    SLOAD			saleInfo.totalCents
    LT			saleInfo.totalCents >= saleConfig.goal
    ISZERO			saleInfo.totalCents >= saleConfig.goal
    SWAP1			reached = (saleInfo.totalCents >= saleConfig.goal)
    POP			reached = (saleInfo.totalCents >= saleConfig.goal)
    DUP1			reached = (saleInfo.totalCents >= saleConfig.goal)
    POP			reached = (saleInfo.totalCents >= saleConfig.goal)
    DUP1			reached
    SWAP1			return reached
    POP			return reached
    PUSH [tag108]		return reached
    JUMP			return reached
  tag108: 
    JUMPDEST		function goalReached() public constant returns (bool reached) {...
    SWAP1			function goalReached() public constant returns (bool reached) {...
    JUMP	[out]		function goalReached() public constant returns (bool reached) {...
  tag60: 
    JUMPDEST		function claim() returns (bool success) {...
    PUSH 0		bool success
    PUSH [tag110]		claimFor(msg.sender)
    CALLER			msg.sender
    PUSH [tag100]		claimFor
    JUMP	[in]		claimFor(msg.sender)
  tag110: 
    JUMPDEST		claimFor(msg.sender)
    SWAP1			return claimFor(msg.sender)
    POP			return claimFor(msg.sender)
    PUSH [tag109]		return claimFor(msg.sender)
    JUMP			return claimFor(msg.sender)
  tag109: 
    JUMPDEST		function claim() returns (bool success) {...
    SWAP1			function claim() returns (bool success) {...
    JUMP	[out]		function claim() returns (bool success) {...
  tag100: 
    JUMPDEST		function claimFor(address _user) returns (bool success) {...
    PUSH 0		bool success
    PUSH 0		address _tokenc
    PUSH 0		uint256 _tokens
    PUSH 0		uint256 _badges
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 3		saleConfig.endDate
    ADD			saleConfig.endDate
    PUSH 0		saleConfig.endDate
    POP			saleConfig.endDate
    SLOAD			saleConfig.endDate
    TIMESTAMP			now
    LT			now < saleConfig.endDate
    DUP1			(now < saleConfig.endDate) || (buyers[_user].claimed == true)
    PUSH [tag112]		(now < saleConfig.endDate) || (buyers[_user].claimed == true)
    JUMPI			(now < saleConfig.endDate) || (buyers[_user].claimed == true)
    POP			(now < saleConfig.endDate) || (buyers[_user].claimed == true)
    PUSH 1		true
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP8			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 2		buyers[_user].claimed
    ADD			buyers[_user].claimed
    PUSH 0		buyers[_user].claimed
    SWAP1			buyers[_user].claimed
    SLOAD			buyers[_user].claimed
    SWAP1			buyers[_user].claimed
    PUSH 100		buyers[_user].claimed
    EXP			buyers[_user].claimed
    SWAP1			buyers[_user].claimed
    DIV			buyers[_user].claimed
    PUSH FF		buyers[_user].claimed
    AND			buyers[_user].claimed
    EQ			buyers[_user].claimed == true
  tag112: 
    JUMPDEST		(now < saleConfig.endDate) || (buyers[_user].claimed == true)
    ISZERO			if ( (now < saleConfig.endDate) || (buyers[_user].claimed == true) ) {...
    PUSH [tag113]		if ( (now < saleConfig.endDate) || (buyers[_user].claimed == true) ) {...
    JUMPI			if ( (now < saleConfig.endDate) || (buyers[_user].claimed == true) ) {...
    PUSH 1		true
    SWAP4			return true
    POP			return true
    PUSH [tag111]		return true
    JUMP			return true
  tag113: 
    JUMPDEST		if ( (now < saleConfig.endDate) || (buyers[_user].claimed == true) ) {...
    PUSH [tag114]		goalReached()
    PUSH [tag70]		goalReached
    JUMP	[in]		goalReached()
  tag114: 
    JUMPDEST		goalReached()
    ISZERO			!goalReached()
    ISZERO			if (!goalReached()) {...
    PUSH [tag115]		if (!goalReached()) {...
    JUMPI			if (!goalReached()) {...
    DUP5			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address(_user).send
    AND			address(_user).send
    PUSH 0		address(_user).send(buyers[_user].weiTotal)
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP9			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 1		buyers[_user].weiTotal
    ADD			buyers[_user].weiTotal
    PUSH 0		buyers[_user].weiTotal
    POP			buyers[_user].weiTotal
    SLOAD			buyers[_user].weiTotal
    PUSH 40		address(_user).send(buyers[_user].weiTotal)
    MLOAD			address(_user).send(buyers[_user].weiTotal)
    DUP1			address(_user).send(buyers[_user].weiTotal)
    SWAP1			address(_user).send(buyers[_user].weiTotal)
    POP			address(_user).send(buyers[_user].weiTotal)
    PUSH 0		address(_user).send(buyers[_user].weiTotal)
    PUSH 40		address(_user).send(buyers[_user].weiTotal)
    MLOAD			address(_user).send(buyers[_user].weiTotal)
    DUP1			address(_user).send(buyers[_user].weiTotal)
    DUP4			address(_user).send(buyers[_user].weiTotal)
    SUB			address(_user).send(buyers[_user].weiTotal)
    DUP2			address(_user).send(buyers[_user].weiTotal)
    DUP6			address(_user).send(buyers[_user].weiTotal)
    DUP9			address(_user).send(buyers[_user].weiTotal)
    DUP9			address(_user).send(buyers[_user].weiTotal)
    CALL			address(_user).send(buyers[_user].weiTotal)
    SWAP4			address(_user).send(buyers[_user].weiTotal)
    POP			address(_user).send(buyers[_user].weiTotal)
    POP			address(_user).send(buyers[_user].weiTotal)
    POP			address(_user).send(buyers[_user].weiTotal)
    POP			address(_user).send(buyers[_user].weiTotal)
    ISZERO			!address(_user).send(buyers[_user].weiTotal)
    ISZERO			if (!address(_user).send(buyers[_user].weiTotal)) throw
    PUSH [tag116]		if (!address(_user).send(buyers[_user].weiTotal)) throw
    JUMPI			if (!address(_user).send(buyers[_user].weiTotal)) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag116: 
    JUMPDEST		if (!address(_user).send(buyers[_user].weiTotal)) throw
    PUSH 1		true
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP8			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 2		buyers[_user].claimed
    ADD			buyers[_user].claimed
    PUSH 0		buyers[_user].claimed
    PUSH 100		buyers[_user].claimed = true
    EXP			buyers[_user].claimed = true
    DUP2			buyers[_user].claimed = true
    SLOAD			buyers[_user].claimed = true
    DUP2			buyers[_user].claimed = true
    PUSH FF		buyers[_user].claimed = true
    MUL			buyers[_user].claimed = true
    NOT			buyers[_user].claimed = true
    AND			buyers[_user].claimed = true
    SWAP1			buyers[_user].claimed = true
    DUP4			buyers[_user].claimed = true
    MUL			buyers[_user].claimed = true
    OR			buyers[_user].claimed = true
    SWAP1			buyers[_user].claimed = true
    SSTORE			buyers[_user].claimed = true
    POP			buyers[_user].claimed = true
    PUSH 1		true
    SWAP4			return true
    POP			return true
    PUSH [tag111]		return true
    JUMP			return true
  tag115: 
    JUMPDEST		if (!goalReached()) {...
    PUSH [tag117]		goalReached()
    PUSH [tag70]		goalReached
    JUMP	[in]		goalReached()
  tag117: 
    JUMPDEST		goalReached()
    ISZERO			if (goalReached()) {...
    PUSH [tag118]		if (goalReached()) {...
    JUMPI			if (goalReached()) {...
    PUSH 11		config
    PUSH 0		config
    SWAP1			config
    SLOAD			config
    SWAP1			config
    PUSH 100		config
    EXP			config
    SWAP1			config
    DIV			config
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		config
    AND			config
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(config).getConfigAddress
    AND			ConfigInterface(config).getConfigAddress
    PUSH F896503A		ConfigInterface(config).getConfigAddress
    PUSH 40		ConfigInterface(config).getConfigAddress("ledger")
    MLOAD			ConfigInterface(config).getConfigAddress("ledger")
    DUP2			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(config).getConfigAddress("ledger")
    MUL			ConfigInterface(config).getConfigAddress("ledger")
    DUP2			ConfigInterface(config).getConfigAddress("ledger")
    MSTORE			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 4		ConfigInterface(config).getConfigAddress("ledger")
    ADD			ConfigInterface(config).getConfigAddress("ledger")
    DUP1			ConfigInterface(config).getConfigAddress("ledger")
    DUP1			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 6C65646765720000000000000000000000000000000000000000000000000000		ConfigInterface(config).getConfigAddress("ledger")
    DUP2			ConfigInterface(config).getConfigAddress("ledger")
    MSTORE			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 20		ConfigInterface(config).getConfigAddress("ledger")
    ADD			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 20		ConfigInterface(config).getConfigAddress("ledger")
    ADD			ConfigInterface(config).getConfigAddress("ledger")
    SWAP1			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 20		ConfigInterface(config).getConfigAddress("ledger")
    PUSH 40		ConfigInterface(config).getConfigAddress("ledger")
    MLOAD			ConfigInterface(config).getConfigAddress("ledger")
    DUP1			ConfigInterface(config).getConfigAddress("ledger")
    DUP4			ConfigInterface(config).getConfigAddress("ledger")
    SUB			ConfigInterface(config).getConfigAddress("ledger")
    DUP2			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 0		ConfigInterface(config).getConfigAddress("ledger")
    DUP8			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 61DA		ConfigInterface(config).getConfigAddress("ledger")
    GAS			ConfigInterface(config).getConfigAddress("ledger")
    SUB			ConfigInterface(config).getConfigAddress("ledger")
    CALL			ConfigInterface(config).getConfigAddress("ledger")
    ISZERO			ConfigInterface(config).getConfigAddress("ledger")
    PUSH [ErrorTag]		ConfigInterface(config).getConfigAddress("ledger")
    JUMPI			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 40		ConfigInterface(config).getConfigAddress("ledger")
    MLOAD			ConfigInterface(config).getConfigAddress("ledger")
    DUP1			ConfigInterface(config).getConfigAddress("ledger")
    MLOAD			ConfigInterface(config).getConfigAddress("ledger")
    SWAP1			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 20		ConfigInterface(config).getConfigAddress("ledger")
    ADD			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    SWAP3			address _tokenc = ConfigInterface(config).getConfigAddress("ledger")
    POP			address _tokenc = ConfigInterface(config).getConfigAddress("ledger")
    PUSH [tag119]		calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP8			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 0		buyers[_user].centsTotal
    ADD			buyers[_user].centsTotal
    PUSH 0		buyers[_user].centsTotal
    POP			buyers[_user].centsTotal
    SLOAD			buyers[_user].centsTotal
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 1		saleInfo.totalCents
    ADD			saleInfo.totalCents
    PUSH 0		saleInfo.totalCents
    POP			saleInfo.totalCents
    SLOAD			saleInfo.totalCents
    PUSH [tag86]		calcShare
    JUMP	[in]		calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
  tag119: 
    JUMPDEST		calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
    SWAP2			uint256 _tokens = calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
    POP			uint256 _tokens = calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 6		saleConfig.badgeCost
    ADD			saleConfig.badgeCost
    PUSH 0		saleConfig.badgeCost
    POP			saleConfig.badgeCost
    SLOAD			saleConfig.badgeCost
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP8			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 0		buyers[_user].centsTotal
    ADD			buyers[_user].centsTotal
    PUSH 0		buyers[_user].centsTotal
    POP			buyers[_user].centsTotal
    SLOAD			buyers[_user].centsTotal
    DIV			buyers[_user].centsTotal / saleConfig.badgeCost
    SWAP1			uint256 _badges = buyers[_user].centsTotal / saleConfig.badgeCost
    POP			uint256 _badges = buyers[_user].centsTotal / saleConfig.badgeCost
    DUP3			_tokenc
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenInterface(_tokenc).mint
    AND			TokenInterface(_tokenc).mint
    PUSH 40C10F19		TokenInterface(_tokenc).mint
    CALLER			msg.sender
    DUP5			_tokens
    PUSH 40		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    MLOAD			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP4			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH 100000000000000000000000000000000000000000000000000000000		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    MUL			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP2			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    MSTORE			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH 4		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    ADD			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP1			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP4			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    AND			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP2			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    MSTORE			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH 20		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    ADD			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP3			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP2			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    MSTORE			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH 20		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    ADD			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    SWAP3			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    POP			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    POP			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    POP			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH 20		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH 40		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    MLOAD			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP1			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP4			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    SUB			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP2			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH 0		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP8			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH 61DA		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    GAS			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    SUB			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    CALL			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    ISZERO			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH [ErrorTag]		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    JUMPI			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    POP			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    POP			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    POP			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH 40		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    MLOAD			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP1			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    MLOAD			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    SWAP1			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    PUSH 20		TokenInterface(_tokenc).mint(msg.sender, _tokens)
    ADD			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    POP			TokenInterface(_tokenc).mint(msg.sender, _tokens)
    DUP1			(TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))
    ISZERO			(TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))
    PUSH [tag120]		(TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))
    JUMPI			(TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))
    POP			(TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))
    DUP3			_tokenc
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenInterface(_tokenc).mintBadge
    AND			TokenInterface(_tokenc).mintBadge
    PUSH E42BFF66		TokenInterface(_tokenc).mintBadge
    DUP7			_user
    DUP4			_badges
    PUSH 40		TokenInterface(_tokenc).mintBadge(_user, _badges)
    MLOAD			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP4			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH 100000000000000000000000000000000000000000000000000000000		TokenInterface(_tokenc).mintBadge(_user, _badges)
    MUL			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP2			TokenInterface(_tokenc).mintBadge(_user, _badges)
    MSTORE			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH 4		TokenInterface(_tokenc).mintBadge(_user, _badges)
    ADD			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP1			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP4			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenInterface(_tokenc).mintBadge(_user, _badges)
    AND			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP2			TokenInterface(_tokenc).mintBadge(_user, _badges)
    MSTORE			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH 20		TokenInterface(_tokenc).mintBadge(_user, _badges)
    ADD			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP3			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP2			TokenInterface(_tokenc).mintBadge(_user, _badges)
    MSTORE			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH 20		TokenInterface(_tokenc).mintBadge(_user, _badges)
    ADD			TokenInterface(_tokenc).mintBadge(_user, _badges)
    SWAP3			TokenInterface(_tokenc).mintBadge(_user, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_user, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_user, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH 20		TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH 40		TokenInterface(_tokenc).mintBadge(_user, _badges)
    MLOAD			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP1			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP4			TokenInterface(_tokenc).mintBadge(_user, _badges)
    SUB			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP2			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH 0		TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP8			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH 61DA		TokenInterface(_tokenc).mintBadge(_user, _badges)
    GAS			TokenInterface(_tokenc).mintBadge(_user, _badges)
    SUB			TokenInterface(_tokenc).mintBadge(_user, _badges)
    CALL			TokenInterface(_tokenc).mintBadge(_user, _badges)
    ISZERO			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH [ErrorTag]		TokenInterface(_tokenc).mintBadge(_user, _badges)
    JUMPI			TokenInterface(_tokenc).mintBadge(_user, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_user, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_user, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH 40		TokenInterface(_tokenc).mintBadge(_user, _badges)
    MLOAD			TokenInterface(_tokenc).mintBadge(_user, _badges)
    DUP1			TokenInterface(_tokenc).mintBadge(_user, _badges)
    MLOAD			TokenInterface(_tokenc).mintBadge(_user, _badges)
    SWAP1			TokenInterface(_tokenc).mintBadge(_user, _badges)
    PUSH 20		TokenInterface(_tokenc).mintBadge(_user, _badges)
    ADD			TokenInterface(_tokenc).mintBadge(_user, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_user, _badges)
  tag120: 
    JUMPDEST		(TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))
    ISZERO			if ((TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))) {...
    PUSH [tag121]		if ((TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))) {...
    JUMPI			if ((TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))) {...
    DUP2			_tokens
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 1		saleStatus.releasedTokens
    ADD			saleStatus.releasedTokens
    PUSH 0		saleStatus.releasedTokens
    DUP3			saleStatus.releasedTokens += _tokens
    DUP3			saleStatus.releasedTokens += _tokens
    DUP3			saleStatus.releasedTokens += _tokens
    POP			saleStatus.releasedTokens += _tokens
    SLOAD			saleStatus.releasedTokens += _tokens
    ADD			saleStatus.releasedTokens += _tokens
    SWAP3			saleStatus.releasedTokens += _tokens
    POP			saleStatus.releasedTokens += _tokens
    POP			saleStatus.releasedTokens += _tokens
    DUP2			saleStatus.releasedTokens += _tokens
    SWAP1			saleStatus.releasedTokens += _tokens
    SSTORE			saleStatus.releasedTokens += _tokens
    POP			saleStatus.releasedTokens += _tokens
    DUP1			_badges
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 2		saleStatus.releasedBadges
    ADD			saleStatus.releasedBadges
    PUSH 0		saleStatus.releasedBadges
    DUP3			saleStatus.releasedBadges += _badges
    DUP3			saleStatus.releasedBadges += _badges
    DUP3			saleStatus.releasedBadges += _badges
    POP			saleStatus.releasedBadges += _badges
    SLOAD			saleStatus.releasedBadges += _badges
    ADD			saleStatus.releasedBadges += _badges
    SWAP3			saleStatus.releasedBadges += _badges
    POP			saleStatus.releasedBadges += _badges
    POP			saleStatus.releasedBadges += _badges
    DUP2			saleStatus.releasedBadges += _badges
    SWAP1			saleStatus.releasedBadges += _badges
    SSTORE			saleStatus.releasedBadges += _badges
    POP			saleStatus.releasedBadges += _badges
    PUSH 1		1
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 3		saleStatus.claimers
    ADD			saleStatus.claimers
    PUSH 0		saleStatus.claimers
    DUP3			saleStatus.claimers += 1
    DUP3			saleStatus.claimers += 1
    DUP3			saleStatus.claimers += 1
    POP			saleStatus.claimers += 1
    SLOAD			saleStatus.claimers += 1
    ADD			saleStatus.claimers += 1
    SWAP3			saleStatus.claimers += 1
    POP			saleStatus.claimers += 1
    POP			saleStatus.claimers += 1
    DUP2			saleStatus.claimers += 1
    SWAP1			saleStatus.claimers += 1
    SSTORE			saleStatus.claimers += 1
    POP			saleStatus.claimers += 1
    PUSH 1		true
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP8			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 2		buyers[_user].claimed
    ADD			buyers[_user].claimed
    PUSH 0		buyers[_user].claimed
    PUSH 100		buyers[_user].claimed = true
    EXP			buyers[_user].claimed = true
    DUP2			buyers[_user].claimed = true
    SLOAD			buyers[_user].claimed = true
    DUP2			buyers[_user].claimed = true
    PUSH FF		buyers[_user].claimed = true
    MUL			buyers[_user].claimed = true
    NOT			buyers[_user].claimed = true
    AND			buyers[_user].claimed = true
    SWAP1			buyers[_user].claimed = true
    DUP4			buyers[_user].claimed = true
    MUL			buyers[_user].claimed = true
    OR			buyers[_user].claimed = true
    SWAP1			buyers[_user].claimed = true
    SSTORE			buyers[_user].claimed = true
    POP			buyers[_user].claimed = true
    DUP1			_badges
    DUP3			_tokens
    DUP7			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Claim(_user, _tokens, _badges)
    AND			Claim(_user, _tokens, _badges)
    PUSH 34FCBAC0073D7C3D388E51312FAF357774904998EEB8FCA628B9E6F65EE1CBF7		Claim(_user, _tokens, _badges)
    PUSH 40		Claim(_user, _tokens, _badges)
    MLOAD			Claim(_user, _tokens, _badges)
    DUP1			Claim(_user, _tokens, _badges)
    SWAP1			Claim(_user, _tokens, _badges)
    POP			Claim(_user, _tokens, _badges)
    PUSH 40		Claim(_user, _tokens, _badges)
    MLOAD			Claim(_user, _tokens, _badges)
    DUP1			Claim(_user, _tokens, _badges)
    SWAP2			Claim(_user, _tokens, _badges)
    SUB			Claim(_user, _tokens, _badges)
    SWAP1			Claim(_user, _tokens, _badges)
    LOG4			Claim(_user, _tokens, _badges)
    PUSH 1		true
    SWAP4			return true
    POP			return true
    PUSH [tag111]		return true
    JUMP			return true
    PUSH [tag122]		if ((TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))) {...
    JUMP			if ((TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))) {...
  tag121: 
    JUMPDEST		if ((TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))) {...
    PUSH 0		false
    SWAP4			return false
    POP			return false
    PUSH [tag111]		return false
    JUMP			return false
  tag122: 
    JUMPDEST		if ((TokenInterface(_tokenc).mint(msg.sender, _tokens)) && (TokenInterface(_tokenc).mintBadge(_user, _badges))) {...
  tag118: 
    JUMPDEST		if (goalReached()) {...
  tag111: 
    JUMPDEST		function claimFor(address _user) returns (bool success) {...
    POP			function claimFor(address _user) returns (bool success) {...
    POP			function claimFor(address _user) returns (bool success) {...
    POP			function claimFor(address _user) returns (bool success) {...
    SWAP2			function claimFor(address _user) returns (bool success) {...
    SWAP1			function claimFor(address _user) returns (bool success) {...
    POP			function claimFor(address _user) returns (bool success) {...
    JUMP	[out]		function claimFor(address _user) returns (bool success) {...
  tag49: 
    JUMPDEST		function claimFounders() returns (bool success) {...
    PUSH 0		bool success
    PUSH 0		address _tokenc
    PUSH 0		uint256 _tokens
    PUSH 0		uint256 _badges
    PUSH 0		address _faddr
    PUSH 1		true
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 0		saleStatus.founderClaim
    ADD			saleStatus.founderClaim
    PUSH 0		saleStatus.founderClaim
    SWAP1			saleStatus.founderClaim
    SLOAD			saleStatus.founderClaim
    SWAP1			saleStatus.founderClaim
    PUSH 100		saleStatus.founderClaim
    EXP			saleStatus.founderClaim
    SWAP1			saleStatus.founderClaim
    DIV			saleStatus.founderClaim
    PUSH FF		saleStatus.founderClaim
    AND			saleStatus.founderClaim
    EQ			saleStatus.founderClaim == true
    ISZERO			if (saleStatus.founderClaim == true) return false
    PUSH [tag124]		if (saleStatus.founderClaim == true) return false
    JUMPI			if (saleStatus.founderClaim == true) return false
    PUSH 0		false
    SWAP5			return false
    POP			return false
    PUSH [tag123]		return false
    JUMP			return false
  tag124: 
    JUMPDEST		if (saleStatus.founderClaim == true) return false
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 3		saleConfig.endDate
    ADD			saleConfig.endDate
    PUSH 0		saleConfig.endDate
    POP			saleConfig.endDate
    SLOAD			saleConfig.endDate
    TIMESTAMP			now
    LT			now < saleConfig.endDate
    ISZERO			if (now < saleConfig.endDate) return false
    PUSH [tag125]		if (now < saleConfig.endDate) return false
    JUMPI			if (now < saleConfig.endDate) return false
    PUSH 0		false
    SWAP5			return false
    POP			return false
    PUSH [tag123]		return false
    JUMP			return false
  tag125: 
    JUMPDEST		if (now < saleConfig.endDate) return false
    PUSH [tag126]		goalReached()
    PUSH [tag70]		goalReached
    JUMP	[in]		goalReached()
  tag126: 
    JUMPDEST		goalReached()
    ISZERO			!goalReached()
    ISZERO			if (!goalReached()) return false
    PUSH [tag127]		if (!goalReached()) return false
    JUMPI			if (!goalReached()) return false
    PUSH 0		false
    SWAP5			return false
    POP			return false
    PUSH [tag123]		return false
    JUMP			return false
  tag127: 
    JUMPDEST		if (!goalReached()) return false
    PUSH 11		config
    PUSH 0		config
    SWAP1			config
    SLOAD			config
    SWAP1			config
    PUSH 100		config
    EXP			config
    SWAP1			config
    DIV			config
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		config
    AND			config
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(config).getConfigAddress
    AND			ConfigInterface(config).getConfigAddress
    PUSH F896503A		ConfigInterface(config).getConfigAddress
    PUSH 40		ConfigInterface(config).getConfigAddress("ledger")
    MLOAD			ConfigInterface(config).getConfigAddress("ledger")
    DUP2			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(config).getConfigAddress("ledger")
    MUL			ConfigInterface(config).getConfigAddress("ledger")
    DUP2			ConfigInterface(config).getConfigAddress("ledger")
    MSTORE			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 4		ConfigInterface(config).getConfigAddress("ledger")
    ADD			ConfigInterface(config).getConfigAddress("ledger")
    DUP1			ConfigInterface(config).getConfigAddress("ledger")
    DUP1			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 6C65646765720000000000000000000000000000000000000000000000000000		ConfigInterface(config).getConfigAddress("ledger")
    DUP2			ConfigInterface(config).getConfigAddress("ledger")
    MSTORE			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 20		ConfigInterface(config).getConfigAddress("ledger")
    ADD			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 20		ConfigInterface(config).getConfigAddress("ledger")
    ADD			ConfigInterface(config).getConfigAddress("ledger")
    SWAP1			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 20		ConfigInterface(config).getConfigAddress("ledger")
    PUSH 40		ConfigInterface(config).getConfigAddress("ledger")
    MLOAD			ConfigInterface(config).getConfigAddress("ledger")
    DUP1			ConfigInterface(config).getConfigAddress("ledger")
    DUP4			ConfigInterface(config).getConfigAddress("ledger")
    SUB			ConfigInterface(config).getConfigAddress("ledger")
    DUP2			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 0		ConfigInterface(config).getConfigAddress("ledger")
    DUP8			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 61DA		ConfigInterface(config).getConfigAddress("ledger")
    GAS			ConfigInterface(config).getConfigAddress("ledger")
    SUB			ConfigInterface(config).getConfigAddress("ledger")
    CALL			ConfigInterface(config).getConfigAddress("ledger")
    ISZERO			ConfigInterface(config).getConfigAddress("ledger")
    PUSH [ErrorTag]		ConfigInterface(config).getConfigAddress("ledger")
    JUMPI			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 40		ConfigInterface(config).getConfigAddress("ledger")
    MLOAD			ConfigInterface(config).getConfigAddress("ledger")
    DUP1			ConfigInterface(config).getConfigAddress("ledger")
    MLOAD			ConfigInterface(config).getConfigAddress("ledger")
    SWAP1			ConfigInterface(config).getConfigAddress("ledger")
    PUSH 20		ConfigInterface(config).getConfigAddress("ledger")
    ADD			ConfigInterface(config).getConfigAddress("ledger")
    POP			ConfigInterface(config).getConfigAddress("ledger")
    SWAP4			address _tokenc = ConfigInterface(config).getConfigAddress("ledger")
    POP			address _tokenc = ConfigInterface(config).getConfigAddress("ledger")
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 7		saleConfig.founderAmount
    ADD			saleConfig.founderAmount
    PUSH 0		saleConfig.founderAmount
    POP			saleConfig.founderAmount
    SLOAD			saleConfig.founderAmount
    SWAP3			uint256 _tokens = saleConfig.founderAmount
    POP			uint256 _tokens = saleConfig.founderAmount
    PUSH 4		4
    SWAP2			uint256 _badges = 4
    POP			uint256 _badges = 4
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 8		saleConfig.founderWallet
    ADD			saleConfig.founderWallet
    PUSH 0		saleConfig.founderWallet
    SWAP1			saleConfig.founderWallet
    SLOAD			saleConfig.founderWallet
    SWAP1			saleConfig.founderWallet
    PUSH 100		saleConfig.founderWallet
    EXP			saleConfig.founderWallet
    SWAP1			saleConfig.founderWallet
    DIV			saleConfig.founderWallet
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		saleConfig.founderWallet
    AND			saleConfig.founderWallet
    SWAP1			address _faddr = saleConfig.founderWallet
    POP			address _faddr = saleConfig.founderWallet
    DUP4			_tokenc
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenInterface(_tokenc).mint
    AND			TokenInterface(_tokenc).mint
    PUSH 40C10F19		TokenInterface(_tokenc).mint
    DUP3			_faddr
    DUP6			_tokens
    PUSH 40		TokenInterface(_tokenc).mint(_faddr, _tokens)
    MLOAD			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP4			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH 100000000000000000000000000000000000000000000000000000000		TokenInterface(_tokenc).mint(_faddr, _tokens)
    MUL			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP2			TokenInterface(_tokenc).mint(_faddr, _tokens)
    MSTORE			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH 4		TokenInterface(_tokenc).mint(_faddr, _tokens)
    ADD			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP1			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP4			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenInterface(_tokenc).mint(_faddr, _tokens)
    AND			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP2			TokenInterface(_tokenc).mint(_faddr, _tokens)
    MSTORE			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH 20		TokenInterface(_tokenc).mint(_faddr, _tokens)
    ADD			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP3			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP2			TokenInterface(_tokenc).mint(_faddr, _tokens)
    MSTORE			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH 20		TokenInterface(_tokenc).mint(_faddr, _tokens)
    ADD			TokenInterface(_tokenc).mint(_faddr, _tokens)
    SWAP3			TokenInterface(_tokenc).mint(_faddr, _tokens)
    POP			TokenInterface(_tokenc).mint(_faddr, _tokens)
    POP			TokenInterface(_tokenc).mint(_faddr, _tokens)
    POP			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH 20		TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH 40		TokenInterface(_tokenc).mint(_faddr, _tokens)
    MLOAD			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP1			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP4			TokenInterface(_tokenc).mint(_faddr, _tokens)
    SUB			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP2			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH 0		TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP8			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH 61DA		TokenInterface(_tokenc).mint(_faddr, _tokens)
    GAS			TokenInterface(_tokenc).mint(_faddr, _tokens)
    SUB			TokenInterface(_tokenc).mint(_faddr, _tokens)
    CALL			TokenInterface(_tokenc).mint(_faddr, _tokens)
    ISZERO			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH [ErrorTag]		TokenInterface(_tokenc).mint(_faddr, _tokens)
    JUMPI			TokenInterface(_tokenc).mint(_faddr, _tokens)
    POP			TokenInterface(_tokenc).mint(_faddr, _tokens)
    POP			TokenInterface(_tokenc).mint(_faddr, _tokens)
    POP			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH 40		TokenInterface(_tokenc).mint(_faddr, _tokens)
    MLOAD			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP1			TokenInterface(_tokenc).mint(_faddr, _tokens)
    MLOAD			TokenInterface(_tokenc).mint(_faddr, _tokens)
    SWAP1			TokenInterface(_tokenc).mint(_faddr, _tokens)
    PUSH 20		TokenInterface(_tokenc).mint(_faddr, _tokens)
    ADD			TokenInterface(_tokenc).mint(_faddr, _tokens)
    POP			TokenInterface(_tokenc).mint(_faddr, _tokens)
    DUP1			(TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))
    ISZERO			(TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))
    PUSH [tag128]		(TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))
    JUMPI			(TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))
    POP			(TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))
    DUP4			_tokenc
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenInterface(_tokenc).mintBadge
    AND			TokenInterface(_tokenc).mintBadge
    PUSH E42BFF66		TokenInterface(_tokenc).mintBadge
    DUP3			_faddr
    DUP5			_badges
    PUSH 40		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    MLOAD			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP4			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH 100000000000000000000000000000000000000000000000000000000		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    MUL			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP2			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    MSTORE			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH 4		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    ADD			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP1			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP4			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    AND			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP2			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    MSTORE			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH 20		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    ADD			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP3			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP2			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    MSTORE			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH 20		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    ADD			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    SWAP3			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH 20		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH 40		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    MLOAD			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP1			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP4			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    SUB			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP2			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH 0		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP8			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH 61DA		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    GAS			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    SUB			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    CALL			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    ISZERO			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH [ErrorTag]		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    JUMPI			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH 40		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    MLOAD			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    DUP1			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    MLOAD			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    SWAP1			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    PUSH 20		TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    ADD			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
    POP			TokenInterface(_tokenc).mintBadge(_faddr, _badges)
  tag128: 
    JUMPDEST		(TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))
    ISZERO			if ((TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))) {...
    PUSH [tag129]		if ((TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))) {...
    JUMPI			if ((TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))) {...
    PUSH 1		true
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 0		saleStatus.founderClaim
    ADD			saleStatus.founderClaim
    PUSH 0		saleStatus.founderClaim
    PUSH 100		saleStatus.founderClaim = true
    EXP			saleStatus.founderClaim = true
    DUP2			saleStatus.founderClaim = true
    SLOAD			saleStatus.founderClaim = true
    DUP2			saleStatus.founderClaim = true
    PUSH FF		saleStatus.founderClaim = true
    MUL			saleStatus.founderClaim = true
    NOT			saleStatus.founderClaim = true
    AND			saleStatus.founderClaim = true
    SWAP1			saleStatus.founderClaim = true
    DUP4			saleStatus.founderClaim = true
    MUL			saleStatus.founderClaim = true
    OR			saleStatus.founderClaim = true
    SWAP1			saleStatus.founderClaim = true
    SSTORE			saleStatus.founderClaim = true
    POP			saleStatus.founderClaim = true
    DUP3			_tokens
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 1		saleStatus.releasedTokens
    ADD			saleStatus.releasedTokens
    PUSH 0		saleStatus.releasedTokens
    DUP3			saleStatus.releasedTokens += _tokens
    DUP3			saleStatus.releasedTokens += _tokens
    DUP3			saleStatus.releasedTokens += _tokens
    POP			saleStatus.releasedTokens += _tokens
    SLOAD			saleStatus.releasedTokens += _tokens
    ADD			saleStatus.releasedTokens += _tokens
    SWAP3			saleStatus.releasedTokens += _tokens
    POP			saleStatus.releasedTokens += _tokens
    POP			saleStatus.releasedTokens += _tokens
    DUP2			saleStatus.releasedTokens += _tokens
    SWAP1			saleStatus.releasedTokens += _tokens
    SSTORE			saleStatus.releasedTokens += _tokens
    POP			saleStatus.releasedTokens += _tokens
    DUP2			_badges
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 2		saleStatus.releasedBadges
    ADD			saleStatus.releasedBadges
    PUSH 0		saleStatus.releasedBadges
    DUP3			saleStatus.releasedBadges += _badges
    DUP3			saleStatus.releasedBadges += _badges
    DUP3			saleStatus.releasedBadges += _badges
    POP			saleStatus.releasedBadges += _badges
    SLOAD			saleStatus.releasedBadges += _badges
    ADD			saleStatus.releasedBadges += _badges
    SWAP3			saleStatus.releasedBadges += _badges
    POP			saleStatus.releasedBadges += _badges
    POP			saleStatus.releasedBadges += _badges
    DUP2			saleStatus.releasedBadges += _badges
    SWAP1			saleStatus.releasedBadges += _badges
    SSTORE			saleStatus.releasedBadges += _badges
    POP			saleStatus.releasedBadges += _badges
    PUSH 1		1
    PUSH D		saleStatus
    PUSH 0		saleStatus
    POP			saleStatus
    PUSH 3		saleStatus.claimers
    ADD			saleStatus.claimers
    PUSH 0		saleStatus.claimers
    DUP3			saleStatus.claimers += 1
    DUP3			saleStatus.claimers += 1
    DUP3			saleStatus.claimers += 1
    POP			saleStatus.claimers += 1
    SLOAD			saleStatus.claimers += 1
    ADD			saleStatus.claimers += 1
    SWAP3			saleStatus.claimers += 1
    POP			saleStatus.claimers += 1
    POP			saleStatus.claimers += 1
    DUP2			saleStatus.claimers += 1
    SWAP1			saleStatus.claimers += 1
    SSTORE			saleStatus.claimers += 1
    POP			saleStatus.claimers += 1
    DUP2			_badges
    DUP4			_tokens
    DUP3			_faddr
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Claim(_faddr, _tokens, _badges)
    AND			Claim(_faddr, _tokens, _badges)
    PUSH 34FCBAC0073D7C3D388E51312FAF357774904998EEB8FCA628B9E6F65EE1CBF7		Claim(_faddr, _tokens, _badges)
    PUSH 40		Claim(_faddr, _tokens, _badges)
    MLOAD			Claim(_faddr, _tokens, _badges)
    DUP1			Claim(_faddr, _tokens, _badges)
    SWAP1			Claim(_faddr, _tokens, _badges)
    POP			Claim(_faddr, _tokens, _badges)
    PUSH 40		Claim(_faddr, _tokens, _badges)
    MLOAD			Claim(_faddr, _tokens, _badges)
    DUP1			Claim(_faddr, _tokens, _badges)
    SWAP2			Claim(_faddr, _tokens, _badges)
    SUB			Claim(_faddr, _tokens, _badges)
    SWAP1			Claim(_faddr, _tokens, _badges)
    LOG4			Claim(_faddr, _tokens, _badges)
    PUSH 1		true
    SWAP5			return true
    POP			return true
    PUSH [tag123]		return true
    JUMP			return true
    PUSH [tag130]		if ((TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))) {...
    JUMP			if ((TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))) {...
  tag129: 
    JUMPDEST		if ((TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))) {...
    PUSH 0		false
    SWAP5			return false
    POP			return false
    PUSH [tag123]		return false
    JUMP			return false
  tag130: 
    JUMPDEST		if ((TokenInterface(_tokenc).mint(_faddr, _tokens)) && (TokenInterface(_tokenc).mintBadge(_faddr, _badges))) {...
  tag123: 
    JUMPDEST		function claimFounders() returns (bool success) {...
    POP			function claimFounders() returns (bool success) {...
    POP			function claimFounders() returns (bool success) {...
    POP			function claimFounders() returns (bool success) {...
    POP			function claimFounders() returns (bool success) {...
    SWAP1			function claimFounders() returns (bool success) {...
    JUMP	[out]		function claimFounders() returns (bool success) {...
  tag37: 
    JUMPDEST		function getPeriod() public constant returns (uint saleperiod) {...
    PUSH 0		uint saleperiod
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 3		saleConfig.endDate
    ADD			saleConfig.endDate
    PUSH 0		saleConfig.endDate
    POP			saleConfig.endDate
    SLOAD			saleConfig.endDate
    TIMESTAMP			now
    GT			now > saleConfig.endDate
    DUP1			(now > saleConfig.endDate) || (now < saleConfig.startDate)
    PUSH [tag132]		(now > saleConfig.endDate) || (now < saleConfig.startDate)
    JUMPI			(now > saleConfig.endDate) || (now < saleConfig.startDate)
    POP			(now > saleConfig.endDate) || (now < saleConfig.startDate)
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 0		saleConfig.startDate
    ADD			saleConfig.startDate
    PUSH 0		saleConfig.startDate
    POP			saleConfig.startDate
    SLOAD			saleConfig.startDate
    TIMESTAMP			now
    LT			now < saleConfig.startDate
  tag132: 
    JUMPDEST		(now > saleConfig.endDate) || (now < saleConfig.startDate)
    ISZERO			if ((now > saleConfig.endDate) || (now < saleConfig.startDate)) {...
    PUSH [tag133]		if ((now > saleConfig.endDate) || (now < saleConfig.startDate)) {...
    JUMPI			if ((now > saleConfig.endDate) || (now < saleConfig.startDate)) {...
    PUSH 0		0
    SWAP1			saleperiod = 0
    POP			saleperiod = 0
    DUP1			saleperiod = 0
    POP			saleperiod = 0
    DUP1			saleperiod
    SWAP1			return saleperiod
    POP			return saleperiod
    PUSH [tag131]		return saleperiod
    JUMP			return saleperiod
  tag133: 
    JUMPDEST		if ((now > saleConfig.endDate) || (now < saleConfig.startDate)) {...
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 2		saleConfig.periodThree
    ADD			saleConfig.periodThree
    PUSH 0		saleConfig.periodThree
    POP			saleConfig.periodThree
    SLOAD			saleConfig.periodThree
    TIMESTAMP			now
    LT			now >= saleConfig.periodThree
    ISZERO			now >= saleConfig.periodThree
    ISZERO			if (now >= saleConfig.periodThree) {...
    PUSH [tag134]		if (now >= saleConfig.periodThree) {...
    JUMPI			if (now >= saleConfig.periodThree) {...
    PUSH 3		3
    SWAP1			saleperiod = 3
    POP			saleperiod = 3
    DUP1			saleperiod = 3
    POP			saleperiod = 3
    DUP1			saleperiod
    SWAP1			return saleperiod
    POP			return saleperiod
    PUSH [tag131]		return saleperiod
    JUMP			return saleperiod
  tag134: 
    JUMPDEST		if (now >= saleConfig.periodThree) {...
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 1		saleConfig.periodTwo
    ADD			saleConfig.periodTwo
    PUSH 0		saleConfig.periodTwo
    POP			saleConfig.periodTwo
    SLOAD			saleConfig.periodTwo
    TIMESTAMP			now
    LT			now >= saleConfig.periodTwo
    ISZERO			now >= saleConfig.periodTwo
    ISZERO			if (now >= saleConfig.periodTwo) {...
    PUSH [tag135]		if (now >= saleConfig.periodTwo) {...
    JUMPI			if (now >= saleConfig.periodTwo) {...
    PUSH 2		2
    SWAP1			saleperiod = 2
    POP			saleperiod = 2
    DUP1			saleperiod = 2
    POP			saleperiod = 2
    DUP1			saleperiod
    SWAP1			return saleperiod
    POP			return saleperiod
    PUSH [tag131]		return saleperiod
    JUMP			return saleperiod
  tag135: 
    JUMPDEST		if (now >= saleConfig.periodTwo) {...
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 1		saleConfig.periodTwo
    ADD			saleConfig.periodTwo
    PUSH 0		saleConfig.periodTwo
    POP			saleConfig.periodTwo
    SLOAD			saleConfig.periodTwo
    TIMESTAMP			now
    LT			now < saleConfig.periodTwo
    ISZERO			if (now < saleConfig.periodTwo) {...
    PUSH [tag136]		if (now < saleConfig.periodTwo) {...
    JUMPI			if (now < saleConfig.periodTwo) {...
    PUSH 1		1
    SWAP1			saleperiod = 1
    POP			saleperiod = 1
    DUP1			saleperiod = 1
    POP			saleperiod = 1
    DUP1			saleperiod
    SWAP1			return saleperiod
    POP			return saleperiod
    PUSH [tag131]		return saleperiod
    JUMP			return saleperiod
  tag136: 
    JUMPDEST		if (now < saleConfig.periodTwo) {...
  tag131: 
    JUMPDEST		function getPeriod() public constant returns (uint saleperiod) {...
    SWAP1			function getPeriod() public constant returns (uint saleperiod) {...
    JUMP	[out]		function getPeriod() public constant returns (uint saleperiod) {...
  tag51: 
    JUMPDEST		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 0		uint256 centstotal
    PUSH 0		uint256 weitotal
    PUSH 0		uint256 share
    PUSH 0		uint badges
    PUSH 0		bool claimed
    PUSH [tag138]		calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP9			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 0		buyers[_user].centsTotal
    ADD			buyers[_user].centsTotal
    PUSH 0		buyers[_user].centsTotal
    POP			buyers[_user].centsTotal
    SLOAD			buyers[_user].centsTotal
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 1		saleInfo.totalCents
    ADD			saleInfo.totalCents
    PUSH 0		saleInfo.totalCents
    POP			saleInfo.totalCents
    SLOAD			saleInfo.totalCents
    PUSH [tag86]		calcShare
    JUMP	[in]		calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
  tag138: 
    JUMPDEST		calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
    SWAP3			share = calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
    POP			share = calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
    DUP3			share = calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
    POP			share = calcShare(buyers[_user].centsTotal, saleInfo.totalCents)
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 6		saleConfig.badgeCost
    ADD			saleConfig.badgeCost
    PUSH 0		saleConfig.badgeCost
    POP			saleConfig.badgeCost
    SLOAD			saleConfig.badgeCost
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP9			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 0		buyers[_user].centsTotal
    ADD			buyers[_user].centsTotal
    PUSH 0		buyers[_user].centsTotal
    POP			buyers[_user].centsTotal
    SLOAD			buyers[_user].centsTotal
    DIV			buyers[_user].centsTotal / saleConfig.badgeCost
    SWAP2			badges = buyers[_user].centsTotal / saleConfig.badgeCost
    POP			badges = buyers[_user].centsTotal / saleConfig.badgeCost
    DUP2			badges = buyers[_user].centsTotal / saleConfig.badgeCost
    POP			badges = buyers[_user].centsTotal / saleConfig.badgeCost
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP8			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 0		buyers[_user].centsTotal
    ADD			buyers[_user].centsTotal
    PUSH 0		buyers[_user].centsTotal
    POP			buyers[_user].centsTotal
    SLOAD			buyers[_user].centsTotal
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP9			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 1		buyers[_user].weiTotal
    ADD			buyers[_user].weiTotal
    PUSH 0		buyers[_user].weiTotal
    POP			buyers[_user].weiTotal
    SLOAD			buyers[_user].weiTotal
    DUP5			share
    DUP5			badges
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP12			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 2		buyers[_user].claimed
    ADD			buyers[_user].claimed
    PUSH 0		buyers[_user].claimed
    SWAP1			buyers[_user].claimed
    SLOAD			buyers[_user].claimed
    SWAP1			buyers[_user].claimed
    PUSH 100		buyers[_user].claimed
    EXP			buyers[_user].claimed
    SWAP1			buyers[_user].claimed
    DIV			buyers[_user].claimed
    PUSH FF		buyers[_user].claimed
    AND			buyers[_user].claimed
    SWAP5			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    POP			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    SWAP5			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    POP			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    SWAP5			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    POP			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    SWAP5			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    POP			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    SWAP5			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    POP			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    PUSH [tag137]		return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
    JUMP			return (buyers[_user].centsTotal, buyers[_user].weiTotal, share, badges, buyers[_user].claimed)
  tag137: 
    JUMPDEST		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP2			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP4			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP6			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP1			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP3			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP5			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    POP			function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    JUMP	[out]		function userInfo(address _user) public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
  tag74: 
    JUMPDEST		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    PUSH 0		uint256 centstotal
    PUSH 0		uint256 weitotal
    PUSH 0		uint256 share
    PUSH 0		uint badges
    PUSH 0		bool claimed
    PUSH [tag140]		userInfo(msg.sender)
    CALLER			msg.sender
    PUSH [tag51]		userInfo
    JUMP	[in]		userInfo(msg.sender)
  tag140: 
    JUMPDEST		userInfo(msg.sender)
    SWAP5			return userInfo(msg.sender)
    POP			return userInfo(msg.sender)
    SWAP5			return userInfo(msg.sender)
    POP			return userInfo(msg.sender)
    SWAP5			return userInfo(msg.sender)
    POP			return userInfo(msg.sender)
    SWAP5			return userInfo(msg.sender)
    POP			return userInfo(msg.sender)
    SWAP5			return userInfo(msg.sender)
    POP			return userInfo(msg.sender)
    PUSH [tag139]		return userInfo(msg.sender)
    JUMP			return userInfo(msg.sender)
  tag139: 
    JUMPDEST		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP1			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP2			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP3			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP4			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    SWAP5			function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
    JUMP	[out]		function myInfo() public constant returns (uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed) {...
  tag66: 
    JUMPDEST		function totalWei() public constant returns (uint) {...
    PUSH 0		uint
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 0		saleInfo.totalWei
    ADD			saleInfo.totalWei
    PUSH 0		saleInfo.totalWei
    POP			saleInfo.totalWei
    SLOAD			saleInfo.totalWei
    SWAP1			return saleInfo.totalWei
    POP			return saleInfo.totalWei
    PUSH [tag141]		return saleInfo.totalWei
    JUMP			return saleInfo.totalWei
  tag141: 
    JUMPDEST		function totalWei() public constant returns (uint) {...
    SWAP1			function totalWei() public constant returns (uint) {...
    JUMP	[out]		function totalWei() public constant returns (uint) {...
  tag92: 
    JUMPDEST		function totalCents() public constant returns (uint) {...
    PUSH 0		uint
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 1		saleInfo.totalCents
    ADD			saleInfo.totalCents
    PUSH 0		saleInfo.totalCents
    POP			saleInfo.totalCents
    SLOAD			saleInfo.totalCents
    SWAP1			return saleInfo.totalCents
    POP			return saleInfo.totalCents
    PUSH [tag142]		return saleInfo.totalCents
    JUMP			return saleInfo.totalCents
  tag142: 
    JUMPDEST		function totalCents() public constant returns (uint) {...
    SWAP1			function totalCents() public constant returns (uint) {...
    JUMP	[out]		function totalCents() public constant returns (uint) {...
  tag47: 
    JUMPDEST		function startDate() public constant returns (uint date) {...
    PUSH 0		uint date
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 0		saleConfig.startDate
    ADD			saleConfig.startDate
    PUSH 0		saleConfig.startDate
    POP			saleConfig.startDate
    SLOAD			saleConfig.startDate
    SWAP1			return saleConfig.startDate
    POP			return saleConfig.startDate
    PUSH [tag143]		return saleConfig.startDate
    JUMP			return saleConfig.startDate
  tag143: 
    JUMPDEST		function startDate() public constant returns (uint date) {...
    SWAP1			function startDate() public constant returns (uint date) {...
    JUMP	[out]		function startDate() public constant returns (uint date) {...
  tag54: 
    JUMPDEST		function periodTwo() public constant returns (uint date) {...
    PUSH 0		uint date
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 1		saleConfig.periodTwo
    ADD			saleConfig.periodTwo
    PUSH 0		saleConfig.periodTwo
    POP			saleConfig.periodTwo
    SLOAD			saleConfig.periodTwo
    SWAP1			return saleConfig.periodTwo
    POP			return saleConfig.periodTwo
    PUSH [tag144]		return saleConfig.periodTwo
    JUMP			return saleConfig.periodTwo
  tag144: 
    JUMPDEST		function periodTwo() public constant returns (uint date) {...
    SWAP1			function periodTwo() public constant returns (uint date) {...
    JUMP	[out]		function periodTwo() public constant returns (uint date) {...
  tag90: 
    JUMPDEST		function periodThree() public constant returns (uint date) {...
    PUSH 0		uint date
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 2		saleConfig.periodThree
    ADD			saleConfig.periodThree
    PUSH 0		saleConfig.periodThree
    POP			saleConfig.periodThree
    SLOAD			saleConfig.periodThree
    SWAP1			return saleConfig.periodThree
    POP			return saleConfig.periodThree
    PUSH [tag145]		return saleConfig.periodThree
    JUMP			return saleConfig.periodThree
  tag145: 
    JUMPDEST		function periodThree() public constant returns (uint date) {...
    SWAP1			function periodThree() public constant returns (uint date) {...
    JUMP	[out]		function periodThree() public constant returns (uint date) {...
  tag94: 
    JUMPDEST		function endDate() public constant returns (uint date) {...
    PUSH 0		uint date
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 3		saleConfig.endDate
    ADD			saleConfig.endDate
    PUSH 0		saleConfig.endDate
    POP			saleConfig.endDate
    SLOAD			saleConfig.endDate
    SWAP1			return saleConfig.endDate
    POP			return saleConfig.endDate
    PUSH [tag146]		return saleConfig.endDate
    JUMP			return saleConfig.endDate
  tag146: 
    JUMPDEST		function endDate() public constant returns (uint date) {...
    SWAP1			function endDate() public constant returns (uint date) {...
    JUMP	[out]		function endDate() public constant returns (uint date) {...
  tag82: 
    JUMPDEST		function isEnded() public constant returns (bool ended) {...
    PUSH 0		bool ended
    PUSH [tag148]		endDate()
    PUSH [tag94]		endDate
    JUMP	[in]		endDate()
  tag148: 
    JUMPDEST		endDate()
    TIMESTAMP			now
    LT			now >= endDate()
    ISZERO			now >= endDate()
    SWAP1			return (now >= endDate())
    POP			return (now >= endDate())
    PUSH [tag147]		return (now >= endDate())
    JUMP			return (now >= endDate())
  tag147: 
    JUMPDEST		function isEnded() public constant returns (bool ended) {...
    SWAP1			function isEnded() public constant returns (bool ended) {...
    JUMP	[out]		function isEnded() public constant returns (bool ended) {...
  tag80: 
    JUMPDEST		function sendFunds() public returns (bool success) {...
    PUSH 0		bool success
    PUSH 0		address _dao
    PUSH 12		locked
    PUSH 14		locked
    SWAP1			locked
    SLOAD			locked
    SWAP1			locked
    PUSH 100		locked
    EXP			locked
    SWAP1			locked
    DIV			locked
    PUSH FF		locked
    AND			locked
    ISZERO			if (locked) return false
    PUSH [tag150]		if (locked) return false
    JUMPI			if (locked) return false
    PUSH 0		false
    SWAP2			return false
    POP			return false
    PUSH [tag149]		return false
    JUMP			return false
  tag150: 
    JUMPDEST		if (locked) return false
    PUSH [tag151]		goalReached()
    PUSH [tag70]		goalReached
    JUMP	[in]		goalReached()
  tag151: 
    JUMPDEST		goalReached()
    ISZERO			!goalReached()
    ISZERO			if (!goalReached()) return false
    PUSH [tag152]		if (!goalReached()) return false
    JUMPI			if (!goalReached()) return false
    PUSH 0		false
    SWAP2			return false
    POP			return false
    PUSH [tag149]		return false
    JUMP			return false
  tag152: 
    JUMPDEST		if (!goalReached()) return false
    PUSH [tag153]		isEnded()
    PUSH [tag82]		isEnded
    JUMP	[in]		isEnded()
  tag153: 
    JUMPDEST		isEnded()
    ISZERO			!isEnded()
    ISZERO			if (!isEnded()) return false
    PUSH [tag154]		if (!isEnded()) return false
    JUMPI			if (!isEnded()) return false
    PUSH 0		false
    SWAP2			return false
    POP			return false
    PUSH [tag149]		return false
    JUMP			return false
  tag154: 
    JUMPDEST		if (!isEnded()) return false
    PUSH 11		config
    PUSH 0		config
    SWAP1			config
    SLOAD			config
    SWAP1			config
    PUSH 100		config
    EXP			config
    SWAP1			config
    DIV			config
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		config
    AND			config
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(config).getConfigAddress
    AND			ConfigInterface(config).getConfigAddress
    PUSH F896503A		ConfigInterface(config).getConfigAddress
    PUSH 40		ConfigInterface(config).getConfigAddress("sale1:dao")
    MLOAD			ConfigInterface(config).getConfigAddress("sale1:dao")
    DUP2			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(config).getConfigAddress("sale1:dao")
    MUL			ConfigInterface(config).getConfigAddress("sale1:dao")
    DUP2			ConfigInterface(config).getConfigAddress("sale1:dao")
    MSTORE			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 4		ConfigInterface(config).getConfigAddress("sale1:dao")
    ADD			ConfigInterface(config).getConfigAddress("sale1:dao")
    DUP1			ConfigInterface(config).getConfigAddress("sale1:dao")
    DUP1			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 73616C65313A64616F0000000000000000000000000000000000000000000000		ConfigInterface(config).getConfigAddress("sale1:dao")
    DUP2			ConfigInterface(config).getConfigAddress("sale1:dao")
    MSTORE			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 20		ConfigInterface(config).getConfigAddress("sale1:dao")
    ADD			ConfigInterface(config).getConfigAddress("sale1:dao")
    POP			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 20		ConfigInterface(config).getConfigAddress("sale1:dao")
    ADD			ConfigInterface(config).getConfigAddress("sale1:dao")
    SWAP1			ConfigInterface(config).getConfigAddress("sale1:dao")
    POP			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 20		ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 40		ConfigInterface(config).getConfigAddress("sale1:dao")
    MLOAD			ConfigInterface(config).getConfigAddress("sale1:dao")
    DUP1			ConfigInterface(config).getConfigAddress("sale1:dao")
    DUP4			ConfigInterface(config).getConfigAddress("sale1:dao")
    SUB			ConfigInterface(config).getConfigAddress("sale1:dao")
    DUP2			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 0		ConfigInterface(config).getConfigAddress("sale1:dao")
    DUP8			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 61DA		ConfigInterface(config).getConfigAddress("sale1:dao")
    GAS			ConfigInterface(config).getConfigAddress("sale1:dao")
    SUB			ConfigInterface(config).getConfigAddress("sale1:dao")
    CALL			ConfigInterface(config).getConfigAddress("sale1:dao")
    ISZERO			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH [ErrorTag]		ConfigInterface(config).getConfigAddress("sale1:dao")
    JUMPI			ConfigInterface(config).getConfigAddress("sale1:dao")
    POP			ConfigInterface(config).getConfigAddress("sale1:dao")
    POP			ConfigInterface(config).getConfigAddress("sale1:dao")
    POP			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 40		ConfigInterface(config).getConfigAddress("sale1:dao")
    MLOAD			ConfigInterface(config).getConfigAddress("sale1:dao")
    DUP1			ConfigInterface(config).getConfigAddress("sale1:dao")
    MLOAD			ConfigInterface(config).getConfigAddress("sale1:dao")
    SWAP1			ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 20		ConfigInterface(config).getConfigAddress("sale1:dao")
    ADD			ConfigInterface(config).getConfigAddress("sale1:dao")
    POP			ConfigInterface(config).getConfigAddress("sale1:dao")
    SWAP1			address _dao = ConfigInterface(config).getConfigAddress("sale1:dao")
    POP			address _dao = ConfigInterface(config).getConfigAddress("sale1:dao")
    PUSH 0		0x0000000000000000000000000000000000000000
    DUP2			_dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		_dao == 0x0000000000000000000000000000000000000000
    AND			_dao == 0x0000000000000000000000000000000000000000
    EQ			_dao == 0x0000000000000000000000000000000000000000
    ISZERO			if (_dao == 0x0000000000000000000000000000000000000000) return false
    PUSH [tag155]		if (_dao == 0x0000000000000000000000000000000000000000) return false
    JUMPI			if (_dao == 0x0000000000000000000000000000000000000000) return false
    PUSH 0		false
    SWAP2			return false
    POP			return false
    PUSH [tag149]		return false
    JUMP			return false
  tag155: 
    JUMPDEST		if (_dao == 0x0000000000000000000000000000000000000000) return false
    DUP1			_dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		_dao.send
    AND			_dao.send
    PUSH 0		_dao.send(totalWei())
    PUSH [tag156]		totalWei()
    PUSH [tag66]		totalWei
    JUMP	[in]		totalWei()
  tag156: 
    JUMPDEST		totalWei()
    PUSH 40		_dao.send(totalWei())
    MLOAD			_dao.send(totalWei())
    DUP1			_dao.send(totalWei())
    SWAP1			_dao.send(totalWei())
    POP			_dao.send(totalWei())
    PUSH 0		_dao.send(totalWei())
    PUSH 40		_dao.send(totalWei())
    MLOAD			_dao.send(totalWei())
    DUP1			_dao.send(totalWei())
    DUP4			_dao.send(totalWei())
    SUB			_dao.send(totalWei())
    DUP2			_dao.send(totalWei())
    DUP6			_dao.send(totalWei())
    DUP9			_dao.send(totalWei())
    DUP9			_dao.send(totalWei())
    CALL			_dao.send(totalWei())
    SWAP4			_dao.send(totalWei())
    POP			_dao.send(totalWei())
    POP			_dao.send(totalWei())
    POP			_dao.send(totalWei())
    POP			_dao.send(totalWei())
    SWAP2			return _dao.send(totalWei())
    POP			return _dao.send(totalWei())
    PUSH [tag149]		return _dao.send(totalWei())
    JUMP			return _dao.send(totalWei())
  tag149: 
    JUMPDEST		function sendFunds() public returns (bool success) {...
    POP			function sendFunds() public returns (bool success) {...
    SWAP1			function sendFunds() public returns (bool success) {...
    JUMP	[out]		function sendFunds() public returns (bool success) {...
  tag76: 
    JUMPDEST		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    PUSH 0		bool success
    PUSH 0		address _proxy
    PUSH 12		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		tx.origin != owner
    AND			tx.origin != owner
    ORIGIN			tx.origin
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		tx.origin != owner
    AND			tx.origin != owner
    EQ			tx.origin != owner
    ISZERO			tx.origin != owner
    ISZERO			if (tx.origin != owner) throw
    PUSH [tag158]		if (tx.origin != owner) throw
    JUMPI			if (tx.origin != owner) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag158: 
    JUMPDEST		if (tx.origin != owner) throw
    DUP3			_payout
    ADDRESS			this
    PUSH 40		new ProxyPayment(_payout, address(this))
    MLOAD			new ProxyPayment(_payout, address(this))
    PUSH #[$00000000…00000000]		new ProxyPayment(_payout, address(this))
    DUP1			new ProxyPayment(_payout, address(this))
    PUSH [$00000000…00000000]		new ProxyPayment(_payout, address(this))
    DUP4			new ProxyPayment(_payout, address(this))
    CODECOPY			new ProxyPayment(_payout, address(this))
    ADD			new ProxyPayment(_payout, address(this))
    DUP1			new ProxyPayment(_payout, address(this))
    DUP4			new ProxyPayment(_payout, address(this))
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		new ProxyPayment(_payout, address(this))
    AND			new ProxyPayment(_payout, address(this))
    DUP2			new ProxyPayment(_payout, address(this))
    MSTORE			new ProxyPayment(_payout, address(this))
    PUSH 20		new ProxyPayment(_payout, address(this))
    ADD			new ProxyPayment(_payout, address(this))
    DUP3			new ProxyPayment(_payout, address(this))
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		new ProxyPayment(_payout, address(this))
    AND			new ProxyPayment(_payout, address(this))
    DUP2			new ProxyPayment(_payout, address(this))
    MSTORE			new ProxyPayment(_payout, address(this))
    PUSH 20		new ProxyPayment(_payout, address(this))
    ADD			new ProxyPayment(_payout, address(this))
    SWAP3			new ProxyPayment(_payout, address(this))
    POP			new ProxyPayment(_payout, address(this))
    POP			new ProxyPayment(_payout, address(this))
    POP			new ProxyPayment(_payout, address(this))
    PUSH 40		new ProxyPayment(_payout, address(this))
    MLOAD			new ProxyPayment(_payout, address(this))
    DUP1			new ProxyPayment(_payout, address(this))
    SWAP2			new ProxyPayment(_payout, address(this))
    SUB			new ProxyPayment(_payout, address(this))
    SWAP1			new ProxyPayment(_payout, address(this))
    PUSH 0		new ProxyPayment(_payout, address(this))
    CREATE			new ProxyPayment(_payout, address(this))
    SWAP1			address _proxy = new ProxyPayment(_payout, address(this))
    POP			address _proxy = new ProxyPayment(_payout, address(this))
    DUP3			_payout
    PUSH 15		proxies
    PUSH 0		proxies
    POP			proxies
    PUSH 0		proxies[_proxy]
    DUP4			_proxy
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxies[_proxy]
    AND			proxies[_proxy]
    DUP2			proxies[_proxy]
    MSTORE			proxies[_proxy]
    PUSH 20		proxies[_proxy]
    ADD			proxies[_proxy]
    SWAP1			proxies[_proxy]
    DUP2			proxies[_proxy]
    MSTORE			proxies[_proxy]
    PUSH 20		proxies[_proxy]
    ADD			proxies[_proxy]
    PUSH 0		proxies[_proxy]
    SHA3			proxies[_proxy]
    PUSH 0		proxies[_proxy]
    POP			proxies[_proxy]
    PUSH 0		proxies[_proxy].payout
    ADD			proxies[_proxy].payout
    PUSH 0		proxies[_proxy].payout
    PUSH 100		proxies[_proxy].payout = _payout
    EXP			proxies[_proxy].payout = _payout
    DUP2			proxies[_proxy].payout = _payout
    SLOAD			proxies[_proxy].payout = _payout
    DUP2			proxies[_proxy].payout = _payout
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxies[_proxy].payout = _payout
    MUL			proxies[_proxy].payout = _payout
    NOT			proxies[_proxy].payout = _payout
    AND			proxies[_proxy].payout = _payout
    SWAP1			proxies[_proxy].payout = _payout
    DUP4			proxies[_proxy].payout = _payout
    MUL			proxies[_proxy].payout = _payout
    OR			proxies[_proxy].payout = _payout
    SWAP1			proxies[_proxy].payout = _payout
    SSTORE			proxies[_proxy].payout = _payout
    POP			proxies[_proxy].payout = _payout
    PUSH 1		true
    PUSH 15		proxies
    PUSH 0		proxies
    POP			proxies
    PUSH 0		proxies[_proxy]
    DUP4			_proxy
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxies[_proxy]
    AND			proxies[_proxy]
    DUP2			proxies[_proxy]
    MSTORE			proxies[_proxy]
    PUSH 20		proxies[_proxy]
    ADD			proxies[_proxy]
    SWAP1			proxies[_proxy]
    DUP2			proxies[_proxy]
    MSTORE			proxies[_proxy]
    PUSH 20		proxies[_proxy]
    ADD			proxies[_proxy]
    PUSH 0		proxies[_proxy]
    SHA3			proxies[_proxy]
    PUSH 0		proxies[_proxy]
    POP			proxies[_proxy]
    PUSH 0		proxies[_proxy].isProxy
    ADD			proxies[_proxy].isProxy
    PUSH 14		proxies[_proxy].isProxy
    PUSH 100		proxies[_proxy].isProxy = true
    EXP			proxies[_proxy].isProxy = true
    DUP2			proxies[_proxy].isProxy = true
    SLOAD			proxies[_proxy].isProxy = true
    DUP2			proxies[_proxy].isProxy = true
    PUSH FF		proxies[_proxy].isProxy = true
    MUL			proxies[_proxy].isProxy = true
    NOT			proxies[_proxy].isProxy = true
    AND			proxies[_proxy].isProxy = true
    SWAP1			proxies[_proxy].isProxy = true
    DUP4			proxies[_proxy].isProxy = true
    MUL			proxies[_proxy].isProxy = true
    OR			proxies[_proxy].isProxy = true
    SWAP1			proxies[_proxy].isProxy = true
    SSTORE			proxies[_proxy].isProxy = true
    POP			proxies[_proxy].isProxy = true
    DUP1			_proxy
    PUSH 16		proxyPayouts
    PUSH 0		proxyPayouts
    POP			proxyPayouts
    PUSH 0		proxyPayouts[_payout]
    DUP6			_payout
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxyPayouts[_payout]
    AND			proxyPayouts[_payout]
    DUP2			proxyPayouts[_payout]
    MSTORE			proxyPayouts[_payout]
    PUSH 20		proxyPayouts[_payout]
    ADD			proxyPayouts[_payout]
    SWAP1			proxyPayouts[_payout]
    DUP2			proxyPayouts[_payout]
    MSTORE			proxyPayouts[_payout]
    PUSH 20		proxyPayouts[_payout]
    ADD			proxyPayouts[_payout]
    PUSH 0		proxyPayouts[_payout]
    SHA3			proxyPayouts[_payout]
    PUSH 0		proxyPayouts[_payout]
    PUSH 100		proxyPayouts[_payout] = _proxy
    EXP			proxyPayouts[_payout] = _proxy
    DUP2			proxyPayouts[_payout] = _proxy
    SLOAD			proxyPayouts[_payout] = _proxy
    DUP2			proxyPayouts[_payout] = _proxy
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxyPayouts[_payout] = _proxy
    MUL			proxyPayouts[_payout] = _proxy
    NOT			proxyPayouts[_payout] = _proxy
    AND			proxyPayouts[_payout] = _proxy
    SWAP1			proxyPayouts[_payout] = _proxy
    DUP4			proxyPayouts[_payout] = _proxy
    MUL			proxyPayouts[_payout] = _proxy
    OR			proxyPayouts[_payout] = _proxy
    SWAP1			proxyPayouts[_payout] = _proxy
    SSTORE			proxyPayouts[_payout] = _proxy
    POP			proxyPayouts[_payout] = _proxy
    PUSH 1		true
    SWAP2			return true
    POP			return true
    PUSH [tag157]		return true
    JUMP			return true
  tag157: 
    JUMPDEST		function regProxy(address _payout) ifOOrigin returns (bool success) {...
    POP			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    SWAP2			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    SWAP1			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    POP			function regProxy(address _payout) ifOOrigin returns (bool success) {...
    JUMP	[out]		function regProxy(address _payout) ifOOrigin returns (bool success) {...
  tag88: 
    JUMPDEST		function getProxy(address _payout) public returns (address proxy) {...
    PUSH 0		address proxy
    PUSH 16		proxyPayouts
    PUSH 0		proxyPayouts
    POP			proxyPayouts
    PUSH 0		proxyPayouts[_payout]
    DUP4			_payout
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxyPayouts[_payout]
    AND			proxyPayouts[_payout]
    DUP2			proxyPayouts[_payout]
    MSTORE			proxyPayouts[_payout]
    PUSH 20		proxyPayouts[_payout]
    ADD			proxyPayouts[_payout]
    SWAP1			proxyPayouts[_payout]
    DUP2			proxyPayouts[_payout]
    MSTORE			proxyPayouts[_payout]
    PUSH 20		proxyPayouts[_payout]
    ADD			proxyPayouts[_payout]
    PUSH 0		proxyPayouts[_payout]
    SHA3			proxyPayouts[_payout]
    PUSH 0		proxyPayouts[_payout]
    SWAP1			proxyPayouts[_payout]
    SLOAD			proxyPayouts[_payout]
    SWAP1			proxyPayouts[_payout]
    PUSH 100		proxyPayouts[_payout]
    EXP			proxyPayouts[_payout]
    SWAP1			proxyPayouts[_payout]
    DIV			proxyPayouts[_payout]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxyPayouts[_payout]
    AND			proxyPayouts[_payout]
    SWAP1			return proxyPayouts[_payout]
    POP			return proxyPayouts[_payout]
    PUSH [tag159]		return proxyPayouts[_payout]
    JUMP			return proxyPayouts[_payout]
  tag159: 
    JUMPDEST		function getProxy(address _payout) public returns (address proxy) {...
    SWAP2			function getProxy(address _payout) public returns (address proxy) {...
    SWAP1			function getProxy(address _payout) public returns (address proxy) {...
    POP			function getProxy(address _payout) public returns (address proxy) {...
    JUMP	[out]		function getProxy(address _payout) public returns (address proxy) {...
  tag72: 
    JUMPDEST		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    PUSH 0		address payout
    PUSH 0		bool isproxy
    PUSH 15		proxies
    PUSH 0		proxies
    POP			proxies
    PUSH 0		proxies[_proxy]
    DUP5			_proxy
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxies[_proxy]
    AND			proxies[_proxy]
    DUP2			proxies[_proxy]
    MSTORE			proxies[_proxy]
    PUSH 20		proxies[_proxy]
    ADD			proxies[_proxy]
    SWAP1			proxies[_proxy]
    DUP2			proxies[_proxy]
    MSTORE			proxies[_proxy]
    PUSH 20		proxies[_proxy]
    ADD			proxies[_proxy]
    PUSH 0		proxies[_proxy]
    SHA3			proxies[_proxy]
    PUSH 0		proxies[_proxy]
    POP			proxies[_proxy]
    PUSH 0		proxies[_proxy].payout
    ADD			proxies[_proxy].payout
    PUSH 0		proxies[_proxy].payout
    SWAP1			proxies[_proxy].payout
    SLOAD			proxies[_proxy].payout
    SWAP1			proxies[_proxy].payout
    PUSH 100		proxies[_proxy].payout
    EXP			proxies[_proxy].payout
    SWAP1			proxies[_proxy].payout
    DIV			proxies[_proxy].payout
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxies[_proxy].payout
    AND			proxies[_proxy].payout
    PUSH 15		proxies
    PUSH 0		proxies
    POP			proxies
    PUSH 0		proxies[_proxy]
    DUP6			_proxy
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		proxies[_proxy]
    AND			proxies[_proxy]
    DUP2			proxies[_proxy]
    MSTORE			proxies[_proxy]
    PUSH 20		proxies[_proxy]
    ADD			proxies[_proxy]
    SWAP1			proxies[_proxy]
    DUP2			proxies[_proxy]
    MSTORE			proxies[_proxy]
    PUSH 20		proxies[_proxy]
    ADD			proxies[_proxy]
    PUSH 0		proxies[_proxy]
    SHA3			proxies[_proxy]
    PUSH 0		proxies[_proxy]
    POP			proxies[_proxy]
    PUSH 0		proxies[_proxy].isProxy
    ADD			proxies[_proxy].isProxy
    PUSH 14		proxies[_proxy].isProxy
    SWAP1			proxies[_proxy].isProxy
    SLOAD			proxies[_proxy].isProxy
    SWAP1			proxies[_proxy].isProxy
    PUSH 100		proxies[_proxy].isProxy
    EXP			proxies[_proxy].isProxy
    SWAP1			proxies[_proxy].isProxy
    DIV			proxies[_proxy].isProxy
    PUSH FF		proxies[_proxy].isProxy
    AND			proxies[_proxy].isProxy
    SWAP2			return (proxies[_proxy].payout, proxies[_proxy].isProxy)
    POP			return (proxies[_proxy].payout, proxies[_proxy].isProxy)
    SWAP2			return (proxies[_proxy].payout, proxies[_proxy].isProxy)
    POP			return (proxies[_proxy].payout, proxies[_proxy].isProxy)
    PUSH [tag160]		return (proxies[_proxy].payout, proxies[_proxy].isProxy)
    JUMP			return (proxies[_proxy].payout, proxies[_proxy].isProxy)
  tag160: 
    JUMPDEST		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    SWAP2			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    POP			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    SWAP2			function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
    JUMP	[out]		function getPayout(address _proxy) public returns (address payout, bool isproxy) {...
  tag84: 
    JUMPDEST		function unlock() ifOwner public returns (bool success) {...
    PUSH 0		bool success
    PUSH 12		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
    AND			msg.sender != owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
    AND			msg.sender != owner
    EQ			msg.sender != owner
    ISZERO			msg.sender != owner
    ISZERO			if (msg.sender != owner) throw
    PUSH [tag162]		if (msg.sender != owner) throw
    JUMPI			if (msg.sender != owner) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag162: 
    JUMPDEST		if (msg.sender != owner) throw
    PUSH 0		false
    PUSH 12		locked
    PUSH 14		locked
    PUSH 100		locked = false
    EXP			locked = false
    DUP2			locked = false
    SLOAD			locked = false
    DUP2			locked = false
    PUSH FF		locked = false
    MUL			locked = false
    NOT			locked = false
    AND			locked = false
    SWAP1			locked = false
    DUP4			locked = false
    MUL			locked = false
    OR			locked = false
    SWAP1			locked = false
    SSTORE			locked = false
    POP			locked = false
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag161]		return true
    JUMP			return true
  tag161: 
    JUMPDEST		function unlock() ifOwner public returns (bool success) {...
    SWAP1			function unlock() ifOwner public returns (bool success) {...
    JUMP	[out]		function unlock() ifOwner public returns (bool success) {...
  tag62: 
    JUMPDEST		uint256 public ethToCents
    PUSH 13		uint256 public ethToCents
    PUSH 0		uint256 public ethToCents
    POP			uint256 public ethToCents
    SLOAD			uint256 public ethToCents
    DUP2			uint256 public ethToCents
    JUMP	[out]		uint256 public ethToCents
  tag68: 
    JUMPDEST		uint256 public WEI_PER_ETH = 1000000000000000000
    PUSH 17		uint256 public WEI_PER_ETH = 1000000000000000000
    PUSH 0		uint256 public WEI_PER_ETH = 1000000000000000000
    POP			uint256 public WEI_PER_ETH = 1000000000000000000
    SLOAD			uint256 public WEI_PER_ETH = 1000000000000000000
    DUP2			uint256 public WEI_PER_ETH = 1000000000000000000
    JUMP	[out]		uint256 public WEI_PER_ETH = 1000000000000000000
  tag58: 
    JUMPDEST		uint256 public BILLION = 1000000000
    PUSH 18		uint256 public BILLION = 1000000000
    PUSH 0		uint256 public BILLION = 1000000000
    POP			uint256 public BILLION = 1000000000
    SLOAD			uint256 public BILLION = 1000000000
    DUP2			uint256 public BILLION = 1000000000
    JUMP	[out]		uint256 public BILLION = 1000000000
  tag102: 
    JUMPDEST		uint256 public CENTS = 100
    PUSH 19		uint256 public CENTS = 100
    PUSH 0		uint256 public CENTS = 100
    POP			uint256 public CENTS = 100
    SLOAD			uint256 public CENTS = 100
    DUP2			uint256 public CENTS = 100
    JUMP	[out]		uint256 public CENTS = 100
  tag56: 
    JUMPDEST		function proxyPurchase(address _user) returns (bool success) {...
    PUSH 0		bool success
    PUSH [tag164]		purchase(_user, msg.value)
    DUP3			_user
    CALLVALUE			msg.value
    PUSH [tag42]		purchase
    JUMP	[in]		purchase(_user, msg.value)
  tag164: 
    JUMPDEST		purchase(_user, msg.value)
    SWAP1			return purchase(_user, msg.value)
    POP			return purchase(_user, msg.value)
    PUSH [tag163]		return purchase(_user, msg.value)
    JUMP			return purchase(_user, msg.value)
  tag163: 
    JUMPDEST		function proxyPurchase(address _user) returns (bool success) {...
    SWAP2			function proxyPurchase(address _user) returns (bool success) {...
    SWAP1			function proxyPurchase(address _user) returns (bool success) {...
    POP			function proxyPurchase(address _user) returns (bool success) {...
    JUMP	[out]		function proxyPurchase(address _user) returns (bool success) {...
  tag42: 
    JUMPDEST		function purchase(address _user, uint256 _amount) private returns (bool success) {...
    PUSH 0		bool success
    PUSH 0		uint256 _cents
    PUSH 0		uint256 _wei
    PUSH 0		uint256 _modifier
    PUSH 0		uint _period
    PUSH 0		uint256 _creditwei
    PUSH 0		uint256 _creditcents
    PUSH [tag166]		weiToCents(_amount)
    DUP9			_amount
    PUSH [tag64]		weiToCents
    JUMP	[in]		weiToCents(_amount)
  tag166: 
    JUMPDEST		weiToCents(_amount)
    SWAP6			uint256 _cents = weiToCents(_amount)
    POP			uint256 _cents = weiToCents(_amount)
    PUSH 4		saleConfig
    PUSH 0		saleConfig
    POP			saleConfig
    PUSH 5		saleConfig.cap
    ADD			saleConfig.cap
    PUSH 0		saleConfig.cap
    POP			saleConfig.cap
    SLOAD			saleConfig.cap
    DUP7			_cents
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 2		saleInfo.realCents
    ADD			saleInfo.realCents
    PUSH 0		saleInfo.realCents
    POP			saleInfo.realCents
    SLOAD			saleInfo.realCents
    ADD			saleInfo.realCents + _cents
    GT			(saleInfo.realCents + _cents) > saleConfig.cap
    ISZERO			if ((saleInfo.realCents + _cents) > saleConfig.cap) return false
    PUSH [tag167]		if ((saleInfo.realCents + _cents) > saleConfig.cap) return false
    JUMPI			if ((saleInfo.realCents + _cents) > saleConfig.cap) return false
    PUSH 0		false
    SWAP7			return false
    POP			return false
    PUSH [tag165]		return false
    JUMP			return false
  tag167: 
    JUMPDEST		if ((saleInfo.realCents + _cents) > saleConfig.cap) return false
    DUP8			_amount
    SWAP5			uint256 _wei = _amount
    POP			uint256 _wei = _amount
    PUSH [tag168]		getPeriod()
    PUSH [tag37]		getPeriod
    JUMP	[in]		getPeriod()
  tag168: 
    JUMPDEST		getPeriod()
    SWAP3			uint _period = getPeriod()
    POP			uint _period = getPeriod()
    PUSH 0		0
    DUP4			_period
    EQ			_period == 0
    DUP1			(_period == 0) || (_cents == 0)
    PUSH [tag169]		(_period == 0) || (_cents == 0)
    JUMPI			(_period == 0) || (_cents == 0)
    POP			(_period == 0) || (_cents == 0)
    PUSH 0		0
    DUP7			_cents
    EQ			_cents == 0
  tag169: 
    JUMPDEST		(_period == 0) || (_cents == 0)
    ISZERO			if ((_period == 0) || (_cents == 0)) {...
    PUSH [tag170]		if ((_period == 0) || (_cents == 0)) {...
    JUMPI			if ((_period == 0) || (_cents == 0)) {...
    PUSH 0		false
    SWAP7			return false
    POP			return false
    PUSH [tag165]		return false
    JUMP			return false
    PUSH [tag171]		if ((_period == 0) || (_cents == 0)) {...
    JUMP			if ((_period == 0) || (_cents == 0)) {...
  tag170: 
    JUMPDEST		if ((_period == 0) || (_cents == 0)) {...
    PUSH 3		3
    DUP4			_period
    EQ			_period == 3
    ISZERO			if (_period == 3) _modifier = 100
    PUSH [tag172]		if (_period == 3) _modifier = 100
    JUMPI			if (_period == 3) _modifier = 100
    PUSH 64		100
    SWAP4			_modifier = 100
    POP			_modifier = 100
    DUP4			_modifier = 100
    POP			_modifier = 100
  tag172: 
    JUMPDEST		if (_period == 3) _modifier = 100
    PUSH 2		2
    DUP4			_period
    EQ			_period == 2
    ISZERO			if (_period == 2) _modifier = 115
    PUSH [tag173]		if (_period == 2) _modifier = 115
    JUMPI			if (_period == 2) _modifier = 115
    PUSH 73		115
    SWAP4			_modifier = 115
    POP			_modifier = 115
    DUP4			_modifier = 115
    POP			_modifier = 115
  tag173: 
    JUMPDEST		if (_period == 2) _modifier = 115
    PUSH 1		1
    DUP4			_period
    EQ			_period == 1
    ISZERO			if (_period == 1) _modifier = 130
    PUSH [tag174]		if (_period == 1) _modifier = 130
    JUMPI			if (_period == 1) _modifier = 130
    PUSH 82		130
    SWAP4			_modifier = 130
    POP			_modifier = 130
    DUP4			_modifier = 130
    POP			_modifier = 130
  tag174: 
    JUMPDEST		if (_period == 1) _modifier = 130
    DUP8			_amount
    SWAP2			uint256 _creditwei = _amount
    POP			uint256 _creditwei = _amount
    PUSH F4240		1000000
    PUSH 2710		10000
    DUP6			_modifier
    PUSH [tag175]		weiToCents(_creditwei)
    DUP6			_creditwei
    PUSH [tag64]		weiToCents
    JUMP	[in]		weiToCents(_creditwei)
  tag175: 
    JUMPDEST		weiToCents(_creditwei)
    MUL			weiToCents(_creditwei) * _modifier
    MUL			weiToCents(_creditwei) * _modifier * 10000
    DIV			(weiToCents(_creditwei) * _modifier * 10000) / 1000000
    SWAP1			uint256 _creditcents = (weiToCents(_creditwei) * _modifier * 10000) / 1000000
    POP			uint256 _creditcents = (weiToCents(_creditwei) * _modifier * 10000) / 1000000
    DUP1			_creditcents
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP12			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 0		buyers[_user].centsTotal
    ADD			buyers[_user].centsTotal
    PUSH 0		buyers[_user].centsTotal
    DUP3			buyers[_user].centsTotal += _creditcents
    DUP3			buyers[_user].centsTotal += _creditcents
    DUP3			buyers[_user].centsTotal += _creditcents
    POP			buyers[_user].centsTotal += _creditcents
    SLOAD			buyers[_user].centsTotal += _creditcents
    ADD			buyers[_user].centsTotal += _creditcents
    SWAP3			buyers[_user].centsTotal += _creditcents
    POP			buyers[_user].centsTotal += _creditcents
    POP			buyers[_user].centsTotal += _creditcents
    DUP2			buyers[_user].centsTotal += _creditcents
    SWAP1			buyers[_user].centsTotal += _creditcents
    SSTORE			buyers[_user].centsTotal += _creditcents
    POP			buyers[_user].centsTotal += _creditcents
    DUP2			_creditwei
    PUSH 14		buyers
    PUSH 0		buyers
    POP			buyers
    PUSH 0		buyers[_user]
    DUP12			_user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		buyers[_user]
    AND			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    SWAP1			buyers[_user]
    DUP2			buyers[_user]
    MSTORE			buyers[_user]
    PUSH 20		buyers[_user]
    ADD			buyers[_user]
    PUSH 0		buyers[_user]
    SHA3			buyers[_user]
    PUSH 0		buyers[_user]
    POP			buyers[_user]
    PUSH 1		buyers[_user].weiTotal
    ADD			buyers[_user].weiTotal
    PUSH 0		buyers[_user].weiTotal
    DUP3			buyers[_user].weiTotal += _creditwei
    DUP3			buyers[_user].weiTotal += _creditwei
    DUP3			buyers[_user].weiTotal += _creditwei
    POP			buyers[_user].weiTotal += _creditwei
    SLOAD			buyers[_user].weiTotal += _creditwei
    ADD			buyers[_user].weiTotal += _creditwei
    SWAP3			buyers[_user].weiTotal += _creditwei
    POP			buyers[_user].weiTotal += _creditwei
    POP			buyers[_user].weiTotal += _creditwei
    DUP2			buyers[_user].weiTotal += _creditwei
    SWAP1			buyers[_user].weiTotal += _creditwei
    SSTORE			buyers[_user].weiTotal += _creditwei
    POP			buyers[_user].weiTotal += _creditwei
    DUP1			_creditcents
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 1		saleInfo.totalCents
    ADD			saleInfo.totalCents
    PUSH 0		saleInfo.totalCents
    DUP3			saleInfo.totalCents += _creditcents
    DUP3			saleInfo.totalCents += _creditcents
    DUP3			saleInfo.totalCents += _creditcents
    POP			saleInfo.totalCents += _creditcents
    SLOAD			saleInfo.totalCents += _creditcents
    ADD			saleInfo.totalCents += _creditcents
    SWAP3			saleInfo.totalCents += _creditcents
    POP			saleInfo.totalCents += _creditcents
    POP			saleInfo.totalCents += _creditcents
    DUP2			saleInfo.totalCents += _creditcents
    SWAP1			saleInfo.totalCents += _creditcents
    SSTORE			saleInfo.totalCents += _creditcents
    POP			saleInfo.totalCents += _creditcents
    DUP6			_cents
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 2		saleInfo.realCents
    ADD			saleInfo.realCents
    PUSH 0		saleInfo.realCents
    DUP3			saleInfo.realCents += _cents
    DUP3			saleInfo.realCents += _cents
    DUP3			saleInfo.realCents += _cents
    POP			saleInfo.realCents += _cents
    SLOAD			saleInfo.realCents += _cents
    ADD			saleInfo.realCents += _cents
    SWAP3			saleInfo.realCents += _cents
    POP			saleInfo.realCents += _cents
    POP			saleInfo.realCents += _cents
    DUP2			saleInfo.realCents += _cents
    SWAP1			saleInfo.realCents += _cents
    SSTORE			saleInfo.realCents += _cents
    POP			saleInfo.realCents += _cents
    DUP2			_creditwei
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 0		saleInfo.totalWei
    ADD			saleInfo.totalWei
    PUSH 0		saleInfo.totalWei
    DUP3			saleInfo.totalWei += _creditwei
    DUP3			saleInfo.totalWei += _creditwei
    DUP3			saleInfo.totalWei += _creditwei
    POP			saleInfo.totalWei += _creditwei
    SLOAD			saleInfo.totalWei += _creditwei
    ADD			saleInfo.totalWei += _creditwei
    SWAP3			saleInfo.totalWei += _creditwei
    POP			saleInfo.totalWei += _creditwei
    POP			saleInfo.totalWei += _creditwei
    DUP2			saleInfo.totalWei += _creditwei
    SWAP1			saleInfo.totalWei += _creditwei
    SSTORE			saleInfo.totalWei += _creditwei
    POP			saleInfo.totalWei += _creditwei
    DUP1			_creditcents
    DUP5			_modifier
    PUSH 13		ethToCents
    PUSH 0		ethToCents
    POP			ethToCents
    SLOAD			ethToCents
    PUSH 75CC31666F3B6385BA515CF89FD41064642231A796FA7EEEA1BA48D9B8EBE269		Purchase(ethToCents, _modifier, _creditcents)
    PUSH 40		Purchase(ethToCents, _modifier, _creditcents)
    MLOAD			Purchase(ethToCents, _modifier, _creditcents)
    DUP1			Purchase(ethToCents, _modifier, _creditcents)
    SWAP1			Purchase(ethToCents, _modifier, _creditcents)
    POP			Purchase(ethToCents, _modifier, _creditcents)
    PUSH 40		Purchase(ethToCents, _modifier, _creditcents)
    MLOAD			Purchase(ethToCents, _modifier, _creditcents)
    DUP1			Purchase(ethToCents, _modifier, _creditcents)
    SWAP2			Purchase(ethToCents, _modifier, _creditcents)
    SUB			Purchase(ethToCents, _modifier, _creditcents)
    SWAP1			Purchase(ethToCents, _modifier, _creditcents)
    LOG4			Purchase(ethToCents, _modifier, _creditcents)
    PUSH 1		true
    SWAP7			return true
    POP			return true
    PUSH [tag165]		return true
    JUMP			return true
  tag171: 
    JUMPDEST		if ((_period == 0) || (_cents == 0)) {...
  tag165: 
    JUMPDEST		function purchase(address _user, uint256 _amount) private returns (bool success) {...
    POP			function purchase(address _user, uint256 _amount) private returns (bool success) {...
    POP			function purchase(address _user, uint256 _amount) private returns (bool success) {...
    POP			function purchase(address _user, uint256 _amount) private returns (bool success) {...
    POP			function purchase(address _user, uint256 _amount) private returns (bool success) {...
    POP			function purchase(address _user, uint256 _amount) private returns (bool success) {...
    POP			function purchase(address _user, uint256 _amount) private returns (bool success) {...
    SWAP3			function purchase(address _user, uint256 _amount) private returns (bool success) {...
    SWAP2			function purchase(address _user, uint256 _amount) private returns (bool success) {...
    POP			function purchase(address _user, uint256 _amount) private returns (bool success) {...
    POP			function purchase(address _user, uint256 _amount) private returns (bool success) {...
    JUMP	[out]		function purchase(address _user, uint256 _amount) private returns (bool success) {...
  tag104: 
    JUMPDEST		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    PUSH 0		uint256 b
    DUP2			_c
    PUSH 2		2
    DUP4			_c
    DIV			_c / 2
    DUP5			_a
    PUSH 18		BILLION
    PUSH 0		BILLION
    POP			BILLION
    SLOAD			BILLION
    MUL			BILLION * _a
    ADD			BILLION * _a + _c / 2
    DIV			(BILLION * _a + _c / 2) / _c
    SWAP1			b = (BILLION * _a + _c / 2) / _c
    POP			b = (BILLION * _a + _c / 2) / _c
    DUP1			b = (BILLION * _a + _c / 2) / _c
    POP			b = (BILLION * _a + _c / 2) / _c
    DUP1			b
    SWAP1			return b
    POP			return b
    PUSH [tag176]		return b
    JUMP			return b
  tag176: 
    JUMPDEST		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP3			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    SWAP2			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    POP			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    POP			function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
    JUMP	[out]		function ppb(uint256 _a, uint256 _c) public constant returns (uint256 b) {...
  tag86: 
    JUMPDEST		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    PUSH 0		uint256 share
    PUSH 0		uint256 _ppb
    PUSH [tag178]		ppb(_contrib, _total)
    DUP5			_contrib
    DUP5			_total
    PUSH [tag104]		ppb
    JUMP	[in]		ppb(_contrib, _total)
  tag178: 
    JUMPDEST		ppb(_contrib, _total)
    SWAP1			uint256 _ppb = ppb(_contrib, _total)
    POP			uint256 _ppb = ppb(_contrib, _total)
    PUSH 18		BILLION
    PUSH 0		BILLION
    POP			BILLION
    SLOAD			BILLION
    PUSH 0		saleInfo
    PUSH 0		saleInfo
    POP			saleInfo
    PUSH 3		saleInfo.amount
    ADD			saleInfo.amount
    PUSH 0		saleInfo.amount
    POP			saleInfo.amount
    SLOAD			saleInfo.amount
    DUP3			_ppb
    MUL			_ppb * saleInfo.amount
    DIV			(_ppb * saleInfo.amount) / BILLION
    SWAP2			share = ((_ppb * saleInfo.amount) / BILLION)
    POP			share = ((_ppb * saleInfo.amount) / BILLION)
    DUP2			share = ((_ppb * saleInfo.amount) / BILLION)
    POP			share = ((_ppb * saleInfo.amount) / BILLION)
    DUP2			share
    SWAP2			return share
    POP			return share
    PUSH [tag177]		return share
    JUMP			return share
  tag177: 
    JUMPDEST		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    POP			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP3			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    SWAP2			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    POP			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    POP			function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
    JUMP	[out]		function calcShare(uint256 _contrib, uint256 _total) public constant returns (uint256 share) {...
  tag64: 
    JUMPDEST		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    PUSH 0		uint256 centsvalue
    PUSH 186A0		100000
    PUSH 13		ethToCents
    PUSH 0		ethToCents
    POP			ethToCents
    SLOAD			ethToCents
    PUSH 17		WEI_PER_ETH
    PUSH 0		WEI_PER_ETH
    POP			WEI_PER_ETH
    SLOAD			WEI_PER_ETH
    PUSH 186A0		100000
    DUP6			_wei
    MUL			_wei * 100000
    DIV			_wei * 100000 / WEI_PER_ETH
    MUL			(_wei * 100000 / WEI_PER_ETH) * ethToCents
    DIV			((_wei * 100000 / WEI_PER_ETH) * ethToCents) / 100000
    SWAP1			centsvalue = ((_wei * 100000 / WEI_PER_ETH) * ethToCents) / 100000
    POP			centsvalue = ((_wei * 100000 / WEI_PER_ETH) * ethToCents) / 100000
    DUP1			centsvalue = ((_wei * 100000 / WEI_PER_ETH) * ethToCents) / 100000
    POP			centsvalue = ((_wei * 100000 / WEI_PER_ETH) * ethToCents) / 100000
    DUP1			centsvalue
    SWAP1			return centsvalue
    POP			return centsvalue
    PUSH [tag179]		return centsvalue
    JUMP			return centsvalue
  tag179: 
    JUMPDEST		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    SWAP2			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    SWAP1			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    POP			function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
    JUMP	[out]		function weiToCents(uint256 _wei) public constant returns (uint256 centsvalue) {...
  tag45: 
    JUMPDEST		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    PUSH 0		bool success
    PUSH 12		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
    AND			msg.sender != owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
    AND			msg.sender != owner
    EQ			msg.sender != owner
    ISZERO			msg.sender != owner
    ISZERO			if (msg.sender != owner) throw
    PUSH [tag181]		if (msg.sender != owner) throw
    JUMPI			if (msg.sender != owner) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag181: 
    JUMPDEST		if (msg.sender != owner) throw
    DUP2			_eth
    PUSH 13		ethToCents
    PUSH 0		ethToCents
    POP			ethToCents = _eth
    DUP2			ethToCents = _eth
    SWAP1			ethToCents = _eth
    SSTORE			ethToCents = _eth
    POP			ethToCents = _eth
    PUSH 1		true
    SWAP1			success = true
    POP			success = true
    DUP1			success = true
    POP			success = true
    DUP1			success
    SWAP1			return success
    POP			return success
    PUSH [tag180]		return success
    JUMP			return success
  tag180: 
    JUMPDEST		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    SWAP2			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    SWAP1			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    POP			function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
    JUMP	[out]		function setEthToCents(uint256 _eth) ifOwner returns (bool success) {...
  .data:
    0: 
    .code:
      PUSH 60		contract ProxyPayment {...
      PUSH 40		contract ProxyPayment {...
      MSTORE			contract ProxyPayment {...
      PUSH 40		function ProxyPayment(address _payout, address _tokenSales) {...
      MLOAD			function ProxyPayment(address _payout, address _tokenSales) {...
      PUSH 40		function ProxyPayment(address _payout, address _tokenSales) {...
      DUP1			function ProxyPayment(address _payout, address _tokenSales) {...
      PUSHSIZE		function ProxyPayment(address _payout, address _tokenSales) {...
      DUP4			function ProxyPayment(address _payout, address _tokenSales) {...
      CODECOPY			function ProxyPayment(address _payout, address _tokenSales) {...
      DUP2			function ProxyPayment(address _payout, address _tokenSales) {...
      ADD			function ProxyPayment(address _payout, address _tokenSales) {...
      PUSH 40		function ProxyPayment(address _payout, address _tokenSales) {...
      MSTORE			function ProxyPayment(address _payout, address _tokenSales) {...
      DUP1			function ProxyPayment(address _payout, address _tokenSales) {...
      DUP1			function ProxyPayment(address _payout, address _tokenSales) {...
      MLOAD			function ProxyPayment(address _payout, address _tokenSales) {...
      SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
      PUSH 20		function ProxyPayment(address _payout, address _tokenSales) {...
      ADD			function ProxyPayment(address _payout, address _tokenSales) {...
      SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
      SWAP2			function ProxyPayment(address _payout, address _tokenSales) {...
      SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
      DUP1			function ProxyPayment(address _payout, address _tokenSales) {...
      MLOAD			function ProxyPayment(address _payout, address _tokenSales) {...
      SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
      PUSH 20		function ProxyPayment(address _payout, address _tokenSales) {...
      ADD			function ProxyPayment(address _payout, address _tokenSales) {...
      SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
      SWAP2			function ProxyPayment(address _payout, address _tokenSales) {...
      SWAP1			function ProxyPayment(address _payout, address _tokenSales) {...
      POP			function ProxyPayment(address _payout, address _tokenSales) {...
      POP			function ProxyPayment(address _payout, address _tokenSales) {...
    tag1: 
      JUMPDEST		function ProxyPayment(address _payout, address _tokenSales) {...
      DUP2			_payout
      PUSH 0		payout
      PUSH 0		payout
      PUSH 100		payout = _payout
      EXP			payout = _payout
      DUP2			payout = _payout
      SLOAD			payout = _payout
      DUP2			payout = _payout
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		payout = _payout
      MUL			payout = _payout
      NOT			payout = _payout
      AND			payout = _payout
      SWAP1			payout = _payout
      DUP4			payout = _payout
      MUL			payout = _payout
      OR			payout = _payout
      SWAP1			payout = _payout
      SSTORE			payout = _payout
      POP			payout = _payout
      DUP1			_tokenSales
      PUSH 1		tokenSales
      PUSH 0		tokenSales
      PUSH 100		tokenSales = _tokenSales
      EXP			tokenSales = _tokenSales
      DUP2			tokenSales = _tokenSales
      SLOAD			tokenSales = _tokenSales
      DUP2			tokenSales = _tokenSales
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		tokenSales = _tokenSales
      MUL			tokenSales = _tokenSales
      NOT			tokenSales = _tokenSales
      AND			tokenSales = _tokenSales
      SWAP1			tokenSales = _tokenSales
      DUP4			tokenSales = _tokenSales
      MUL			tokenSales = _tokenSales
      OR			tokenSales = _tokenSales
      SWAP1			tokenSales = _tokenSales
      SSTORE			tokenSales = _tokenSales
      POP			tokenSales = _tokenSales
      DUP2			_payout
      PUSH 2		owner
      PUSH 0		owner
      PUSH 100		owner = _payout
      EXP			owner = _payout
      DUP2			owner = _payout
      SLOAD			owner = _payout
      DUP2			owner = _payout
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = _payout
      MUL			owner = _payout
      NOT			owner = _payout
      AND			owner = _payout
      SWAP1			owner = _payout
      DUP4			owner = _payout
      MUL			owner = _payout
      OR			owner = _payout
      SWAP1			owner = _payout
      SSTORE			owner = _payout
      POP			owner = _payout
    tag2: 
      JUMPDEST		function ProxyPayment(address _payout, address _tokenSales) {...
      POP			function ProxyPayment(address _payout, address _tokenSales) {...
      POP			function ProxyPayment(address _payout, address _tokenSales) {...
      PUSH #[$00000000…00000000]		contract ProxyPayment {...
      DUP1			contract ProxyPayment {...
      PUSH [$00000000…00000000]		contract ProxyPayment {...
      PUSH 0		contract ProxyPayment {...
      CODECOPY			contract ProxyPayment {...
      PUSH 0		contract ProxyPayment {...
      RETURN			contract ProxyPayment {...
    .data:
      0: 
      .code:
        PUSH 60		contract ProxyPayment {...
        PUSH 40		contract ProxyPayment {...
        MSTORE			contract ProxyPayment {...
        CALLDATASIZE			contract ProxyPayment {...
        ISZERO			contract ProxyPayment {...
        PUSH [tag1]		contract ProxyPayment {...
        JUMPI			contract ProxyPayment {...
        PUSH [tag1]		contract ProxyPayment {...
        JUMP			contract ProxyPayment {...
      tag1: 
        JUMPDEST		contract ProxyPayment {...
        PUSH [tag2]		contract ProxyPayment {...
      tag3: 
        JUMPDEST		function () {...
        PUSH 1		tokenSales
        PUSH 0		tokenSales
        SWAP1			tokenSales
        SLOAD			tokenSales
        SWAP1			tokenSales
        PUSH 100		tokenSales
        EXP			tokenSales
        SWAP1			tokenSales
        DIV			tokenSales
        PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		tokenSales
        AND			tokenSales
        PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenSalesInterface(tokenSales).proxyPurchase
        AND			TokenSalesInterface(tokenSales).proxyPurchase
        PUSH 4A5DDDD2		TokenSalesInterface(tokenSales).proxyPurchase
        CALLVALUE			msg.value
        PUSH 19E10		106000
        SWAP1			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)
        PUSH 0		payout
        PUSH 0		payout
        SWAP1			payout
        SLOAD			payout
        SWAP1			payout
        PUSH 100		payout
        EXP			payout
        SWAP1			payout
        DIV			payout
        PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		payout
        AND			payout
        PUSH 40		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        MLOAD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP5			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        PUSH 100000000000000000000000000000000000000000000000000000000		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        MUL			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP2			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        MSTORE			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        PUSH 4		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        ADD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP1			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP3			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        AND			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP2			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        MSTORE			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        PUSH 20		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        ADD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        SWAP2			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        PUSH 20		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        PUSH 40		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        MLOAD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP1			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP4			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        SUB			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP2			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP6			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP10			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP9			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        CALL			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        ISZERO			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        PUSH [ErrorTag]		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        JUMPI			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        PUSH 40		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        MLOAD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        DUP1			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        MLOAD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        SWAP1			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        PUSH 20		TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        ADD			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        POP			TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        ISZERO			!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)
        ISZERO			if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw
        PUSH [tag5]		if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw
        JUMPI			if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw
        PUSH [ErrorTag]		throw
        JUMP			throw
      tag5: 
        JUMPDEST		if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw
      tag4: 
        JUMPDEST		function () {...
        JUMP	[out]		function () {...
      tag2: 
        JUMPDEST		contract ProxyPayment {...
        STOP			contract ProxyPayment {...

======= TokenSalesInterface =======
EVM assembly:
Contract not fully implemented
