
======= Badge =======
EVM assembly:
.code:
  PUSH 60		contract Badge {...
  PUSH 40		contract Badge {...
  MSTORE			contract Badge {...
tag1: 
  JUMPDEST		function Badge() {...
  CALLER			msg.sender
  PUSH 2		owner
  PUSH 0		owner
  PUSH 100		owner = msg.sender
  EXP			owner = msg.sender
  DUP2			owner = msg.sender
  SLOAD			owner = msg.sender
  DUP2			owner = msg.sender
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = msg.sender
  MUL			owner = msg.sender
  NOT			owner = msg.sender
  AND			owner = msg.sender
  SWAP1			owner = msg.sender
  DUP4			owner = msg.sender
  MUL			owner = msg.sender
  OR			owner = msg.sender
  SWAP1			owner = msg.sender
  SSTORE			owner = msg.sender
  POP			owner = msg.sender
tag2: 
  JUMPDEST		function Badge() {...
  PUSH #[$00000000…00000000]		contract Badge {...
  DUP1			contract Badge {...
  PUSH [$00000000…00000000]		contract Badge {...
  PUSH 0		contract Badge {...
  CODECOPY			contract Badge {...
  PUSH 0		contract Badge {...
  RETURN			contract Badge {...
.data:
  0: 
  .code:
    PUSH 60		contract Badge {...
    PUSH 40		contract Badge {...
    MSTORE			contract Badge {...
    CALLDATASIZE			contract Badge {...
    ISZERO			contract Badge {...
    PUSH [tag1]		contract Badge {...
    JUMPI			contract Badge {...
    PUSH 0		contract Badge {...
    CALLDATALOAD			contract Badge {...
    PUSH 100000000000000000000000000000000000000000000000000000000		contract Badge {...
    SWAP1			contract Badge {...
    DIV			contract Badge {...
    DUP1			contract Badge {...
    PUSH 95EA7B3		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag2]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH 13AF4035		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag3]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH 18160DDD		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag4]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH 23B872DD		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag5]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH 3416F9D4		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag6]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH 40C10F19		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag7]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH 4E30A66C		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag8]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH 70A08231		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag9]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH 8DA5CB5B		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag10]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH A9059CBB		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag11]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH C74C251F		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag12]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH CF309012		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag13]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH DD62ED3E		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag14]		contract Badge {...
    JUMPI			contract Badge {...
    DUP1			contract Badge {...
    PUSH E74B9D11		contract Badge {...
    EQ			contract Badge {...
    PUSH [tag15]		contract Badge {...
    JUMPI			contract Badge {...
    PUSH [tag1]		contract Badge {...
    JUMP			contract Badge {...
  tag1: 
    JUMPDEST		contract Badge {...
    STOP			contract Badge {...
  tag2: 
    JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH [tag16]		function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 4		function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 20		function approve(address _spender, uint256 _value) returns(bool success) {...
    ADD			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 20		function approve(address _spender, uint256 _value) returns(bool success) {...
    ADD			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH [tag17]		function approve(address _spender, uint256 _value) returns(bool success) {...
    JUMP			function approve(address _spender, uint256 _value) returns(bool success) {...
  tag16: 
    JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 40		function approve(address _spender, uint256 _value) returns(bool success) {...
    MLOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP3			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    MSTORE			function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 20		function approve(address _spender, uint256 _value) returns(bool success) {...
    ADD			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 40		function approve(address _spender, uint256 _value) returns(bool success) {...
    MLOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    SUB			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    RETURN			function approve(address _spender, uint256 _value) returns(bool success) {...
  tag3: 
    JUMPDEST		function setOwner(address _owner) ifOwner returns(bool success) {...
    PUSH [tag18]		function setOwner(address _owner) ifOwner returns(bool success) {...
    PUSH 4		function setOwner(address _owner) ifOwner returns(bool success) {...
    DUP1			function setOwner(address _owner) ifOwner returns(bool success) {...
    DUP1			function setOwner(address _owner) ifOwner returns(bool success) {...
    CALLDATALOAD			function setOwner(address _owner) ifOwner returns(bool success) {...
    SWAP1			function setOwner(address _owner) ifOwner returns(bool success) {...
    PUSH 20		function setOwner(address _owner) ifOwner returns(bool success) {...
    ADD			function setOwner(address _owner) ifOwner returns(bool success) {...
    SWAP1			function setOwner(address _owner) ifOwner returns(bool success) {...
    SWAP2			function setOwner(address _owner) ifOwner returns(bool success) {...
    SWAP1			function setOwner(address _owner) ifOwner returns(bool success) {...
    POP			function setOwner(address _owner) ifOwner returns(bool success) {...
    POP			function setOwner(address _owner) ifOwner returns(bool success) {...
    PUSH [tag19]		function setOwner(address _owner) ifOwner returns(bool success) {...
    JUMP			function setOwner(address _owner) ifOwner returns(bool success) {...
  tag18: 
    JUMPDEST		function setOwner(address _owner) ifOwner returns(bool success) {...
    PUSH 40		function setOwner(address _owner) ifOwner returns(bool success) {...
    MLOAD			function setOwner(address _owner) ifOwner returns(bool success) {...
    DUP1			function setOwner(address _owner) ifOwner returns(bool success) {...
    DUP3			function setOwner(address _owner) ifOwner returns(bool success) {...
    DUP2			function setOwner(address _owner) ifOwner returns(bool success) {...
    MSTORE			function setOwner(address _owner) ifOwner returns(bool success) {...
    PUSH 20		function setOwner(address _owner) ifOwner returns(bool success) {...
    ADD			function setOwner(address _owner) ifOwner returns(bool success) {...
    SWAP2			function setOwner(address _owner) ifOwner returns(bool success) {...
    POP			function setOwner(address _owner) ifOwner returns(bool success) {...
    POP			function setOwner(address _owner) ifOwner returns(bool success) {...
    PUSH 40		function setOwner(address _owner) ifOwner returns(bool success) {...
    MLOAD			function setOwner(address _owner) ifOwner returns(bool success) {...
    DUP1			function setOwner(address _owner) ifOwner returns(bool success) {...
    SWAP2			function setOwner(address _owner) ifOwner returns(bool success) {...
    SUB			function setOwner(address _owner) ifOwner returns(bool success) {...
    SWAP1			function setOwner(address _owner) ifOwner returns(bool success) {...
    RETURN			function setOwner(address _owner) ifOwner returns(bool success) {...
  tag4: 
    JUMPDEST		uint256 public totalSupply
    PUSH [tag20]		uint256 public totalSupply
    PUSH 4		uint256 public totalSupply
    DUP1			uint256 public totalSupply
    POP			uint256 public totalSupply
    POP			uint256 public totalSupply
    PUSH [tag21]		uint256 public totalSupply
    JUMP			uint256 public totalSupply
  tag20: 
    JUMPDEST		uint256 public totalSupply
    PUSH 40		uint256 public totalSupply
    MLOAD			uint256 public totalSupply
    DUP1			uint256 public totalSupply
    DUP3			uint256 public totalSupply
    DUP2			uint256 public totalSupply
    MSTORE			uint256 public totalSupply
    PUSH 20		uint256 public totalSupply
    ADD			uint256 public totalSupply
    SWAP2			uint256 public totalSupply
    POP			uint256 public totalSupply
    POP			uint256 public totalSupply
    PUSH 40		uint256 public totalSupply
    MLOAD			uint256 public totalSupply
    DUP1			uint256 public totalSupply
    SWAP2			uint256 public totalSupply
    SUB			uint256 public totalSupply
    SWAP1			uint256 public totalSupply
    RETURN			uint256 public totalSupply
  tag5: 
    JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH [tag22]		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 4		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH [tag23]		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    JUMP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
  tag22: 
    JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 40		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    MLOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP3			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    MSTORE			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 40		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    MLOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SUB			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    RETURN			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
  tag6: 
    JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH [tag24]		function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 4		function subtractSafely(uint a, uint b) returns(uint) {...
    DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
    CALLDATALOAD			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 20		function subtractSafely(uint a, uint b) returns(uint) {...
    ADD			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
    CALLDATALOAD			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 20		function subtractSafely(uint a, uint b) returns(uint) {...
    ADD			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH [tag25]		function subtractSafely(uint a, uint b) returns(uint) {...
    JUMP			function subtractSafely(uint a, uint b) returns(uint) {...
  tag24: 
    JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 40		function subtractSafely(uint a, uint b) returns(uint) {...
    MLOAD			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP3			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP2			function subtractSafely(uint a, uint b) returns(uint) {...
    MSTORE			function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 20		function subtractSafely(uint a, uint b) returns(uint) {...
    ADD			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 40		function subtractSafely(uint a, uint b) returns(uint) {...
    MLOAD			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
    SUB			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    RETURN			function subtractSafely(uint a, uint b) returns(uint) {...
  tag7: 
    JUMPDEST		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    PUSH [tag26]		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    PUSH 4		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    DUP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    DUP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    CALLDATALOAD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    PUSH 20		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    ADD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    DUP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    CALLDATALOAD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    PUSH 20		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    ADD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    PUSH [tag27]		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    JUMP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
  tag26: 
    JUMPDEST		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    PUSH 40		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    MLOAD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    DUP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    DUP3			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    DUP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    MSTORE			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    PUSH 20		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    ADD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    PUSH 40		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    MLOAD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    DUP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SUB			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    RETURN			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
  tag8: 
    JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH [tag28]		function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 4		function safeToAdd(uint a, uint b) returns(bool) {...
    DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
    CALLDATALOAD			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToAdd(uint a, uint b) returns(bool) {...
    ADD			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
    CALLDATALOAD			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToAdd(uint a, uint b) returns(bool) {...
    ADD			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH [tag29]		function safeToAdd(uint a, uint b) returns(bool) {...
    JUMP			function safeToAdd(uint a, uint b) returns(bool) {...
  tag28: 
    JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 40		function safeToAdd(uint a, uint b) returns(bool) {...
    MLOAD			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP3			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP2			function safeToAdd(uint a, uint b) returns(bool) {...
    MSTORE			function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToAdd(uint a, uint b) returns(bool) {...
    ADD			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 40		function safeToAdd(uint a, uint b) returns(bool) {...
    MLOAD			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
    SUB			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    RETURN			function safeToAdd(uint a, uint b) returns(bool) {...
  tag9: 
    JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH [tag30]		function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 4		function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    CALLDATALOAD			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 20		function balanceOf(address _owner) constant returns(uint256 balance) {...
    ADD			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH [tag31]		function balanceOf(address _owner) constant returns(uint256 balance) {...
    JUMP			function balanceOf(address _owner) constant returns(uint256 balance) {...
  tag30: 
    JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 40		function balanceOf(address _owner) constant returns(uint256 balance) {...
    MLOAD			function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP3			function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
    MSTORE			function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 20		function balanceOf(address _owner) constant returns(uint256 balance) {...
    ADD			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
    POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 40		function balanceOf(address _owner) constant returns(uint256 balance) {...
    MLOAD			function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SUB			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    RETURN			function balanceOf(address _owner) constant returns(uint256 balance) {...
  tag10: 
    JUMPDEST		address public owner
    PUSH [tag32]		address public owner
    PUSH 4		address public owner
    DUP1			address public owner
    POP			address public owner
    POP			address public owner
    PUSH [tag33]		address public owner
    JUMP			address public owner
  tag32: 
    JUMPDEST		address public owner
    PUSH 40		address public owner
    MLOAD			address public owner
    DUP1			address public owner
    DUP3			address public owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
    AND			address public owner
    DUP2			address public owner
    MSTORE			address public owner
    PUSH 20		address public owner
    ADD			address public owner
    SWAP2			address public owner
    POP			address public owner
    POP			address public owner
    PUSH 40		address public owner
    MLOAD			address public owner
    DUP1			address public owner
    SWAP2			address public owner
    SUB			address public owner
    SWAP1			address public owner
    RETURN			address public owner
  tag11: 
    JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH [tag34]		function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 4		function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transfer(address _to, uint256 _value) returns(bool success) {...
    ADD			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transfer(address _to, uint256 _value) returns(bool success) {...
    ADD			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH [tag35]		function transfer(address _to, uint256 _value) returns(bool success) {...
    JUMP			function transfer(address _to, uint256 _value) returns(bool success) {...
  tag34: 
    JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 40		function transfer(address _to, uint256 _value) returns(bool success) {...
    MLOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP3			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    MSTORE			function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transfer(address _to, uint256 _value) returns(bool success) {...
    ADD			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 40		function transfer(address _to, uint256 _value) returns(bool success) {...
    MLOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    SUB			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    RETURN			function transfer(address _to, uint256 _value) returns(bool success) {...
  tag12: 
    JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
    PUSH [tag36]		function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 4		function addSafely(uint a, uint b) returns(uint result) {...
    DUP1			function addSafely(uint a, uint b) returns(uint result) {...
    DUP1			function addSafely(uint a, uint b) returns(uint result) {...
    CALLDATALOAD			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 20		function addSafely(uint a, uint b) returns(uint result) {...
    ADD			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    DUP1			function addSafely(uint a, uint b) returns(uint result) {...
    CALLDATALOAD			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 20		function addSafely(uint a, uint b) returns(uint result) {...
    ADD			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    PUSH [tag37]		function addSafely(uint a, uint b) returns(uint result) {...
    JUMP			function addSafely(uint a, uint b) returns(uint result) {...
  tag36: 
    JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 40		function addSafely(uint a, uint b) returns(uint result) {...
    MLOAD			function addSafely(uint a, uint b) returns(uint result) {...
    DUP1			function addSafely(uint a, uint b) returns(uint result) {...
    DUP3			function addSafely(uint a, uint b) returns(uint result) {...
    DUP2			function addSafely(uint a, uint b) returns(uint result) {...
    MSTORE			function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 20		function addSafely(uint a, uint b) returns(uint result) {...
    ADD			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 40		function addSafely(uint a, uint b) returns(uint result) {...
    MLOAD			function addSafely(uint a, uint b) returns(uint result) {...
    DUP1			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
    SUB			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    RETURN			function addSafely(uint a, uint b) returns(uint result) {...
  tag13: 
    JUMPDEST		bool public locked
    PUSH [tag38]		bool public locked
    PUSH 4		bool public locked
    DUP1			bool public locked
    POP			bool public locked
    POP			bool public locked
    PUSH [tag39]		bool public locked
    JUMP			bool public locked
  tag38: 
    JUMPDEST		bool public locked
    PUSH 40		bool public locked
    MLOAD			bool public locked
    DUP1			bool public locked
    DUP3			bool public locked
    DUP2			bool public locked
    MSTORE			bool public locked
    PUSH 20		bool public locked
    ADD			bool public locked
    SWAP2			bool public locked
    POP			bool public locked
    POP			bool public locked
    PUSH 40		bool public locked
    MLOAD			bool public locked
    DUP1			bool public locked
    SWAP2			bool public locked
    SUB			bool public locked
    SWAP1			bool public locked
    RETURN			bool public locked
  tag14: 
    JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH [tag40]		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 4		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    CALLDATALOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 20		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    ADD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    CALLDATALOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 20		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    ADD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH [tag41]		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    JUMP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
  tag40: 
    JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 40		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    MLOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP3			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    MSTORE			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 20		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    ADD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 40		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    MLOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SUB			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    RETURN			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
  tag15: 
    JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH [tag42]		function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 4		function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    CALLDATALOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToSubtract(uint a, uint b) returns(bool) {...
    ADD			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    CALLDATALOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToSubtract(uint a, uint b) returns(bool) {...
    ADD			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH [tag43]		function safeToSubtract(uint a, uint b) returns(bool) {...
    JUMP			function safeToSubtract(uint a, uint b) returns(bool) {...
  tag42: 
    JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 40		function safeToSubtract(uint a, uint b) returns(bool) {...
    MLOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP3			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    MSTORE			function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToSubtract(uint a, uint b) returns(bool) {...
    ADD			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 40		function safeToSubtract(uint a, uint b) returns(bool) {...
    MLOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    SUB			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    RETURN			function safeToSubtract(uint a, uint b) returns(bool) {...
  tag33: 
    JUMPDEST		address public owner
    PUSH 2		address public owner
    PUSH 0		address public owner
    SWAP1			address public owner
    SLOAD			address public owner
    SWAP1			address public owner
    PUSH 100		address public owner
    EXP			address public owner
    SWAP1			address public owner
    DIV			address public owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
    AND			address public owner
    DUP2			address public owner
    JUMP	[out]		address public owner
  tag39: 
    JUMPDEST		bool public locked
    PUSH 2		bool public locked
    PUSH 14		bool public locked
    SWAP1			bool public locked
    SLOAD			bool public locked
    SWAP1			bool public locked
    PUSH 100		bool public locked
    EXP			bool public locked
    SWAP1			bool public locked
    DIV			bool public locked
    PUSH FF		bool public locked
    AND			bool public locked
    DUP2			bool public locked
    JUMP	[out]		bool public locked
  tag21: 
    JUMPDEST		uint256 public totalSupply
    PUSH 3		uint256 public totalSupply
    PUSH 0		uint256 public totalSupply
    POP			uint256 public totalSupply
    SLOAD			uint256 public totalSupply
    DUP2			uint256 public totalSupply
    JUMP	[out]		uint256 public totalSupply
  tag29: 
    JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 0		bool
    DUP3			a
    DUP3			b
    DUP5			a
    ADD			a + b
    LT			a + b >= a
    ISZERO			a + b >= a
    SWAP1			return (a + b >= a)
    POP			return (a + b >= a)
    PUSH [tag44]		return (a + b >= a)
    JUMP			return (a + b >= a)
  tag44: 
    JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP3			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    JUMP	[out]		function safeToAdd(uint a, uint b) returns(bool) {...
  tag37: 
    JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 0		uint result
    PUSH [tag46]		safeToAdd(a, b)
    DUP4			a
    DUP4			b
    PUSH [tag29]		safeToAdd
    JUMP	[in]		safeToAdd(a, b)
  tag46: 
    JUMPDEST		safeToAdd(a, b)
    ISZERO			!safeToAdd(a, b)
    ISZERO			if (!safeToAdd(a, b)) {...
    PUSH [tag47]		if (!safeToAdd(a, b)) {...
    JUMPI			if (!safeToAdd(a, b)) {...
    PUSH [ErrorTag]		throw
    JUMP			throw
    PUSH [tag48]		if (!safeToAdd(a, b)) {...
    JUMP			if (!safeToAdd(a, b)) {...
  tag47: 
    JUMPDEST		if (!safeToAdd(a, b)) {...
    DUP2			b
    DUP4			a
    ADD			a + b
    SWAP1			result = a + b
    POP			result = a + b
    DUP1			result = a + b
    POP			result = a + b
    DUP1			result
    SWAP1			return result
    POP			return result
    PUSH [tag45]		return result
    JUMP			return result
  tag48: 
    JUMPDEST		if (!safeToAdd(a, b)) {...
  tag45: 
    JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
    SWAP3			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    JUMP	[out]		function addSafely(uint a, uint b) returns(uint result) {...
  tag43: 
    JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 0		bool
    DUP3			a
    DUP3			b
    GT			b <= a
    ISZERO			b <= a
    SWAP1			return (b <= a)
    POP			return (b <= a)
    PUSH [tag49]		return (b <= a)
    JUMP			return (b <= a)
  tag49: 
    JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP3			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    JUMP	[out]		function safeToSubtract(uint a, uint b) returns(bool) {...
  tag25: 
    JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 0		uint
    PUSH [tag51]		safeToSubtract(a, b)
    DUP4			a
    DUP4			b
    PUSH [tag43]		safeToSubtract
    JUMP	[in]		safeToSubtract(a, b)
  tag51: 
    JUMPDEST		safeToSubtract(a, b)
    ISZERO			!safeToSubtract(a, b)
    ISZERO			if (!safeToSubtract(a, b)) throw
    PUSH [tag52]		if (!safeToSubtract(a, b)) throw
    JUMPI			if (!safeToSubtract(a, b)) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag52: 
    JUMPDEST		if (!safeToSubtract(a, b)) throw
    DUP2			b
    DUP4			a
    SUB			a - b
    SWAP1			return a - b
    POP			return a - b
    PUSH [tag50]		return a - b
    JUMP			return a - b
  tag50: 
    JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP3			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    JUMP	[out]		function subtractSafely(uint a, uint b) returns(uint) {...
  tag31: 
    JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 0		uint256 balance
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_owner]
    DUP4			_owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_owner]
    AND			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    SWAP1			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    PUSH 0		balances[_owner]
    SHA3			balances[_owner]
    PUSH 0		balances[_owner]
    POP			balances[_owner]
    SLOAD			balances[_owner]
    SWAP1			return balances[_owner]
    POP			return balances[_owner]
    PUSH [tag53]		return balances[_owner]
    JUMP			return balances[_owner]
  tag53: 
    JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    JUMP	[out]		function balanceOf(address _owner) constant returns(uint256 balance) {...
  tag35: 
    JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 0		bool success
    DUP2			_value
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[msg.sender]
    AND			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    SWAP1			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    SHA3			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    POP			balances[msg.sender]
    SLOAD			balances[msg.sender]
    LT			balances[msg.sender] >= _value
    ISZERO			balances[msg.sender] >= _value
    DUP1			balances[msg.sender] >= _value && _value > 0
    ISZERO			balances[msg.sender] >= _value && _value > 0
    PUSH [tag55]		balances[msg.sender] >= _value && _value > 0
    JUMPI			balances[msg.sender] >= _value && _value > 0
    POP			balances[msg.sender] >= _value && _value > 0
    PUSH 0		0
    DUP3			_value
    GT			_value > 0
  tag55: 
    JUMPDEST		balances[msg.sender] >= _value && _value > 0
    ISZERO			if (balances[msg.sender] >= _value && _value > 0) {...
    PUSH [tag56]		if (balances[msg.sender] >= _value && _value > 0) {...
    JUMPI			if (balances[msg.sender] >= _value && _value > 0) {...
    PUSH [tag57]		subtractSafely(balances[msg.sender], _value)
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[msg.sender]
    AND			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    SWAP1			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    SHA3			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    POP			balances[msg.sender]
    SLOAD			balances[msg.sender]
    DUP4			_value
    PUSH [tag25]		subtractSafely
    JUMP	[in]		subtractSafely(balances[msg.sender], _value)
  tag57: 
    JUMPDEST		subtractSafely(balances[msg.sender], _value)
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[msg.sender]
    AND			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    SWAP1			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    SHA3			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    POP			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
    DUP2			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
    SWAP1			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
    SSTORE			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
    POP			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
    PUSH [tag58]		addSafely(_value, balances[_to])
    DUP3			_value
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_to]
    DUP7			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
    AND			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    SWAP1			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    PUSH 0		balances[_to]
    SHA3			balances[_to]
    PUSH 0		balances[_to]
    POP			balances[_to]
    SLOAD			balances[_to]
    PUSH [tag37]		addSafely
    JUMP	[in]		addSafely(_value, balances[_to])
  tag58: 
    JUMPDEST		addSafely(_value, balances[_to])
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_to]
    DUP6			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
    AND			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    SWAP1			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    PUSH 0		balances[_to]
    SHA3			balances[_to]
    PUSH 0		balances[_to]
    POP			balances[_to] = addSafely(_value, balances[_to])
    DUP2			balances[_to] = addSafely(_value, balances[_to])
    SWAP1			balances[_to] = addSafely(_value, balances[_to])
    SSTORE			balances[_to] = addSafely(_value, balances[_to])
    POP			balances[_to] = addSafely(_value, balances[_to])
    DUP3			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(msg.sender, _to, _value)
    AND			Transfer(msg.sender, _to, _value)
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(msg.sender, _to, _value)
    AND			Transfer(msg.sender, _to, _value)
    PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF		Transfer(msg.sender, _to, _value)
    DUP5			_value
    PUSH 40		Transfer(msg.sender, _to, _value)
    MLOAD			Transfer(msg.sender, _to, _value)
    DUP1			Transfer(msg.sender, _to, _value)
    DUP3			Transfer(msg.sender, _to, _value)
    DUP2			Transfer(msg.sender, _to, _value)
    MSTORE			Transfer(msg.sender, _to, _value)
    PUSH 20		Transfer(msg.sender, _to, _value)
    ADD			Transfer(msg.sender, _to, _value)
    SWAP2			Transfer(msg.sender, _to, _value)
    POP			Transfer(msg.sender, _to, _value)
    POP			Transfer(msg.sender, _to, _value)
    PUSH 40		Transfer(msg.sender, _to, _value)
    MLOAD			Transfer(msg.sender, _to, _value)
    DUP1			Transfer(msg.sender, _to, _value)
    SWAP2			Transfer(msg.sender, _to, _value)
    SUB			Transfer(msg.sender, _to, _value)
    SWAP1			Transfer(msg.sender, _to, _value)
    LOG3			Transfer(msg.sender, _to, _value)
    PUSH 1		true
    SWAP1			success = true
    POP			success = true
    DUP1			success = true
    POP			success = true
    PUSH [tag59]		if (balances[msg.sender] >= _value && _value > 0) {...
    JUMP			if (balances[msg.sender] >= _value && _value > 0) {...
  tag56: 
    JUMPDEST		if (balances[msg.sender] >= _value && _value > 0) {...
    PUSH 0		false
    SWAP1			success = false
    POP			success = false
    DUP1			success = false
    POP			success = false
  tag59: 
    JUMPDEST		if (balances[msg.sender] >= _value && _value > 0) {...
    DUP1			success
    SWAP1			return success
    POP			return success
    PUSH [tag54]		return success
    JUMP			return success
  tag54: 
    JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP3			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    JUMP	[out]		function transfer(address _to, uint256 _value) returns(bool success) {...
  tag23: 
    JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 0		bool success
    DUP2			_value
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_from]
    AND			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    SWAP1			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    PUSH 0		balances[_from]
    SHA3			balances[_from]
    PUSH 0		balances[_from]
    POP			balances[_from]
    SLOAD			balances[_from]
    LT			balances[_from] >= _value
    ISZERO			balances[_from] >= _value
    DUP1			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    ISZERO			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    PUSH [tag61]		balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    JUMPI			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    POP			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    DUP2			_value
    PUSH 1		allowed
    PUSH 0		allowed
    POP			allowed
    PUSH 0		allowed[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from]
    AND			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    SWAP1			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    PUSH 0		allowed[_from]
    SHA3			allowed[_from]
    PUSH 0		allowed[_from]
    POP			allowed[_from]
    PUSH 0		allowed[_from][msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from][msg.sender]
    AND			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    SWAP1			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    SHA3			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    POP			allowed[_from][msg.sender]
    SLOAD			allowed[_from][msg.sender]
    LT			allowed[_from][msg.sender] >= _value
    ISZERO			allowed[_from][msg.sender] >= _value
  tag61: 
    JUMPDEST		balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    DUP1			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    ISZERO			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    PUSH [tag62]		balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    JUMPI			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    POP			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    PUSH 0		0
    DUP3			_value
    GT			_value > 0
  tag62: 
    JUMPDEST		balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    ISZERO			if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    PUSH [tag63]		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    JUMPI			if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    PUSH [tag64]		addSafely(balances[_to], _value)
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_to]
    DUP6			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
    AND			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    SWAP1			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    PUSH 0		balances[_to]
    SHA3			balances[_to]
    PUSH 0		balances[_to]
    POP			balances[_to]
    SLOAD			balances[_to]
    DUP4			_value
    PUSH [tag37]		addSafely
    JUMP	[in]		addSafely(balances[_to], _value)
  tag64: 
    JUMPDEST		addSafely(balances[_to], _value)
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_to]
    DUP6			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
    AND			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    SWAP1			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    PUSH 0		balances[_to]
    SHA3			balances[_to]
    PUSH 0		balances[_to]
    POP			balances[_to] = addSafely(balances[_to], _value)
    DUP2			balances[_to] = addSafely(balances[_to], _value)
    SWAP1			balances[_to] = addSafely(balances[_to], _value)
    SSTORE			balances[_to] = addSafely(balances[_to], _value)
    POP			balances[_to] = addSafely(balances[_to], _value)
    PUSH [tag65]		subtractSafely(balances[_from], _value)
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_from]
    AND			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    SWAP1			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    PUSH 0		balances[_from]
    SHA3			balances[_from]
    PUSH 0		balances[_from]
    POP			balances[_from]
    SLOAD			balances[_from]
    DUP4			_value
    PUSH [tag25]		subtractSafely
    JUMP	[in]		subtractSafely(balances[_from], _value)
  tag65: 
    JUMPDEST		subtractSafely(balances[_from], _value)
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_from]
    AND			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    SWAP1			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    PUSH 0		balances[_from]
    SHA3			balances[_from]
    PUSH 0		balances[_from]
    POP			balances[_from] = subtractSafely(balances[_from], _value)
    DUP2			balances[_from] = subtractSafely(balances[_from], _value)
    SWAP1			balances[_from] = subtractSafely(balances[_from], _value)
    SSTORE			balances[_from] = subtractSafely(balances[_from], _value)
    POP			balances[_from] = subtractSafely(balances[_from], _value)
    PUSH [tag66]		subtractSafely(allowed[_from][msg.sender], _value)
    PUSH 1		allowed
    PUSH 0		allowed
    POP			allowed
    PUSH 0		allowed[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from]
    AND			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    SWAP1			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    PUSH 0		allowed[_from]
    SHA3			allowed[_from]
    PUSH 0		allowed[_from]
    POP			allowed[_from]
    PUSH 0		allowed[_from][msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from][msg.sender]
    AND			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    SWAP1			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    SHA3			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    POP			allowed[_from][msg.sender]
    SLOAD			allowed[_from][msg.sender]
    DUP4			_value
    PUSH [tag25]		subtractSafely
    JUMP	[in]		subtractSafely(allowed[_from][msg.sender], _value)
  tag66: 
    JUMPDEST		subtractSafely(allowed[_from][msg.sender], _value)
    PUSH 1		allowed
    PUSH 0		allowed
    POP			allowed
    PUSH 0		allowed[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from]
    AND			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    SWAP1			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    PUSH 0		allowed[_from]
    SHA3			allowed[_from]
    PUSH 0		allowed[_from]
    POP			allowed[_from]
    PUSH 0		allowed[_from][msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from][msg.sender]
    AND			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    SWAP1			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    SHA3			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    POP			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
    DUP2			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
    SWAP1			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
    SSTORE			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
    POP			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
    DUP3			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(_from, _to, _value)
    AND			Transfer(_from, _to, _value)
    DUP5			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(_from, _to, _value)
    AND			Transfer(_from, _to, _value)
    PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF		Transfer(_from, _to, _value)
    DUP5			_value
    PUSH 40		Transfer(_from, _to, _value)
    MLOAD			Transfer(_from, _to, _value)
    DUP1			Transfer(_from, _to, _value)
    DUP3			Transfer(_from, _to, _value)
    DUP2			Transfer(_from, _to, _value)
    MSTORE			Transfer(_from, _to, _value)
    PUSH 20		Transfer(_from, _to, _value)
    ADD			Transfer(_from, _to, _value)
    SWAP2			Transfer(_from, _to, _value)
    POP			Transfer(_from, _to, _value)
    POP			Transfer(_from, _to, _value)
    PUSH 40		Transfer(_from, _to, _value)
    MLOAD			Transfer(_from, _to, _value)
    DUP1			Transfer(_from, _to, _value)
    SWAP2			Transfer(_from, _to, _value)
    SUB			Transfer(_from, _to, _value)
    SWAP1			Transfer(_from, _to, _value)
    LOG3			Transfer(_from, _to, _value)
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag60]		return true
    JUMP			return true
    PUSH [tag67]		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    JUMP			if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
  tag63: 
    JUMPDEST		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    PUSH 0		false
    SWAP1			return false
    POP			return false
    PUSH [tag60]		return false
    JUMP			return false
  tag67: 
    JUMPDEST		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
  tag60: 
    JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP4			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP3			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    JUMP	[out]		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
  tag17: 
    JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 0		bool success
    DUP2			_value
    PUSH 1		allowed
    PUSH 0		allowed
    POP			allowed
    PUSH 0		allowed[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[msg.sender]
    AND			allowed[msg.sender]
    DUP2			allowed[msg.sender]
    MSTORE			allowed[msg.sender]
    PUSH 20		allowed[msg.sender]
    ADD			allowed[msg.sender]
    SWAP1			allowed[msg.sender]
    DUP2			allowed[msg.sender]
    MSTORE			allowed[msg.sender]
    PUSH 20		allowed[msg.sender]
    ADD			allowed[msg.sender]
    PUSH 0		allowed[msg.sender]
    SHA3			allowed[msg.sender]
    PUSH 0		allowed[msg.sender]
    POP			allowed[msg.sender]
    PUSH 0		allowed[msg.sender][_spender]
    DUP6			_spender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[msg.sender][_spender]
    AND			allowed[msg.sender][_spender]
    DUP2			allowed[msg.sender][_spender]
    MSTORE			allowed[msg.sender][_spender]
    PUSH 20		allowed[msg.sender][_spender]
    ADD			allowed[msg.sender][_spender]
    SWAP1			allowed[msg.sender][_spender]
    DUP2			allowed[msg.sender][_spender]
    MSTORE			allowed[msg.sender][_spender]
    PUSH 20		allowed[msg.sender][_spender]
    ADD			allowed[msg.sender][_spender]
    PUSH 0		allowed[msg.sender][_spender]
    SHA3			allowed[msg.sender][_spender]
    PUSH 0		allowed[msg.sender][_spender]
    POP			allowed[msg.sender][_spender] = _value
    DUP2			allowed[msg.sender][_spender] = _value
    SWAP1			allowed[msg.sender][_spender] = _value
    SSTORE			allowed[msg.sender][_spender] = _value
    POP			allowed[msg.sender][_spender] = _value
    DUP3			_spender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Approval(msg.sender, _spender, _value)
    AND			Approval(msg.sender, _spender, _value)
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Approval(msg.sender, _spender, _value)
    AND			Approval(msg.sender, _spender, _value)
    PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925		Approval(msg.sender, _spender, _value)
    DUP5			_value
    PUSH 40		Approval(msg.sender, _spender, _value)
    MLOAD			Approval(msg.sender, _spender, _value)
    DUP1			Approval(msg.sender, _spender, _value)
    DUP3			Approval(msg.sender, _spender, _value)
    DUP2			Approval(msg.sender, _spender, _value)
    MSTORE			Approval(msg.sender, _spender, _value)
    PUSH 20		Approval(msg.sender, _spender, _value)
    ADD			Approval(msg.sender, _spender, _value)
    SWAP2			Approval(msg.sender, _spender, _value)
    POP			Approval(msg.sender, _spender, _value)
    POP			Approval(msg.sender, _spender, _value)
    PUSH 40		Approval(msg.sender, _spender, _value)
    MLOAD			Approval(msg.sender, _spender, _value)
    DUP1			Approval(msg.sender, _spender, _value)
    SWAP2			Approval(msg.sender, _spender, _value)
    SUB			Approval(msg.sender, _spender, _value)
    SWAP1			Approval(msg.sender, _spender, _value)
    LOG3			Approval(msg.sender, _spender, _value)
    PUSH 1		true
    SWAP1			success = true
    POP			success = true
    DUP1			success = true
    POP			success = true
    DUP1			success
    SWAP1			return success
    POP			return success
    PUSH [tag68]		return success
    JUMP			return success
  tag68: 
    JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP3			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    JUMP	[out]		function approve(address _spender, uint256 _value) returns(bool success) {...
  tag41: 
    JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 0		uint256 remaining
    PUSH 1		allowed
    PUSH 0		allowed
    POP			allowed
    PUSH 0		allowed[_owner]
    DUP5			_owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_owner]
    AND			allowed[_owner]
    DUP2			allowed[_owner]
    MSTORE			allowed[_owner]
    PUSH 20		allowed[_owner]
    ADD			allowed[_owner]
    SWAP1			allowed[_owner]
    DUP2			allowed[_owner]
    MSTORE			allowed[_owner]
    PUSH 20		allowed[_owner]
    ADD			allowed[_owner]
    PUSH 0		allowed[_owner]
    SHA3			allowed[_owner]
    PUSH 0		allowed[_owner]
    POP			allowed[_owner]
    PUSH 0		allowed[_owner][_spender]
    DUP4			_spender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_owner][_spender]
    AND			allowed[_owner][_spender]
    DUP2			allowed[_owner][_spender]
    MSTORE			allowed[_owner][_spender]
    PUSH 20		allowed[_owner][_spender]
    ADD			allowed[_owner][_spender]
    SWAP1			allowed[_owner][_spender]
    DUP2			allowed[_owner][_spender]
    MSTORE			allowed[_owner][_spender]
    PUSH 20		allowed[_owner][_spender]
    ADD			allowed[_owner][_spender]
    PUSH 0		allowed[_owner][_spender]
    SHA3			allowed[_owner][_spender]
    PUSH 0		allowed[_owner][_spender]
    POP			allowed[_owner][_spender]
    SLOAD			allowed[_owner][_spender]
    SWAP1			remaining = allowed[_owner][_spender]
    POP			remaining = allowed[_owner][_spender]
    DUP1			remaining = allowed[_owner][_spender]
    POP			remaining = allowed[_owner][_spender]
    DUP1			remaining
    SWAP1			return remaining
    POP			return remaining
    PUSH [tag69]		return remaining
    JUMP			return remaining
  tag69: 
    JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP3			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    JUMP	[out]		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
  tag27: 
    JUMPDEST		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    PUSH 0		bool success
    PUSH 2		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
    AND			msg.sender != owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
    AND			msg.sender != owner
    EQ			msg.sender != owner
    ISZERO			msg.sender != owner
    ISZERO			if (msg.sender != owner) {...
    PUSH [tag71]		if (msg.sender != owner) {...
    JUMPI			if (msg.sender != owner) {...
    PUSH [ErrorTag]		throw
    JUMP			throw
    PUSH [tag72]		if (msg.sender != owner) {...
    JUMP			if (msg.sender != owner) {...
  tag71: 
    JUMPDEST		if (msg.sender != owner) {...
    PUSH [tag73]		addSafely(totalSupply, _amount)
    PUSH 3		totalSupply
    PUSH 0		totalSupply
    POP			totalSupply
    SLOAD			totalSupply
    DUP4			_amount
    PUSH [tag37]		addSafely
    JUMP	[in]		addSafely(totalSupply, _amount)
  tag73: 
    JUMPDEST		addSafely(totalSupply, _amount)
    PUSH 3		totalSupply
    PUSH 0		totalSupply
    POP			totalSupply = addSafely(totalSupply, _amount)
    DUP2			totalSupply = addSafely(totalSupply, _amount)
    SWAP1			totalSupply = addSafely(totalSupply, _amount)
    SSTORE			totalSupply = addSafely(totalSupply, _amount)
    POP			totalSupply = addSafely(totalSupply, _amount)
    PUSH [tag74]		addSafely(balances[_owner], _amount)
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_owner]
    DUP6			_owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_owner]
    AND			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    SWAP1			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    PUSH 0		balances[_owner]
    SHA3			balances[_owner]
    PUSH 0		balances[_owner]
    POP			balances[_owner]
    SLOAD			balances[_owner]
    DUP4			_amount
    PUSH [tag37]		addSafely
    JUMP	[in]		addSafely(balances[_owner], _amount)
  tag74: 
    JUMPDEST		addSafely(balances[_owner], _amount)
    PUSH 0		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_owner]
    DUP6			_owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_owner]
    AND			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    SWAP1			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    PUSH 0		balances[_owner]
    SHA3			balances[_owner]
    PUSH 0		balances[_owner]
    POP			balances[_owner] = addSafely(balances[_owner], _amount)
    DUP2			balances[_owner] = addSafely(balances[_owner], _amount)
    SWAP1			balances[_owner] = addSafely(balances[_owner], _amount)
    SSTORE			balances[_owner] = addSafely(balances[_owner], _amount)
    POP			balances[_owner] = addSafely(balances[_owner], _amount)
    DUP2			_amount
    DUP4			_owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Mint(_owner, _amount)
    AND			Mint(_owner, _amount)
    PUSH F6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885		Mint(_owner, _amount)
    PUSH 40		Mint(_owner, _amount)
    MLOAD			Mint(_owner, _amount)
    DUP1			Mint(_owner, _amount)
    SWAP1			Mint(_owner, _amount)
    POP			Mint(_owner, _amount)
    PUSH 40		Mint(_owner, _amount)
    MLOAD			Mint(_owner, _amount)
    DUP1			Mint(_owner, _amount)
    SWAP2			Mint(_owner, _amount)
    SUB			Mint(_owner, _amount)
    SWAP1			Mint(_owner, _amount)
    LOG3			Mint(_owner, _amount)
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag70]		return true
    JUMP			return true
  tag72: 
    JUMPDEST		if (msg.sender != owner) {...
  tag70: 
    JUMPDEST		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP3			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    SWAP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    JUMP	[out]		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
  tag19: 
    JUMPDEST		function setOwner(address _owner) ifOwner returns(bool success) {...
    PUSH 0		bool success
    PUSH 2		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
    AND			msg.sender != owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
    AND			msg.sender != owner
    EQ			msg.sender != owner
    ISZERO			msg.sender != owner
    ISZERO			if (msg.sender != owner) {...
    PUSH [tag76]		if (msg.sender != owner) {...
    JUMPI			if (msg.sender != owner) {...
    PUSH [ErrorTag]		throw
    JUMP			throw
    PUSH [tag77]		if (msg.sender != owner) {...
    JUMP			if (msg.sender != owner) {...
  tag76: 
    JUMPDEST		if (msg.sender != owner) {...
    DUP2			_owner
    PUSH 2		owner
    PUSH 0		owner
    PUSH 100		owner = _owner
    EXP			owner = _owner
    DUP2			owner = _owner
    SLOAD			owner = _owner
    DUP2			owner = _owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = _owner
    MUL			owner = _owner
    NOT			owner = _owner
    AND			owner = _owner
    SWAP1			owner = _owner
    DUP4			owner = _owner
    MUL			owner = _owner
    OR			owner = _owner
    SWAP1			owner = _owner
    SSTORE			owner = _owner
    POP			owner = _owner
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag75]		return true
    JUMP			return true
  tag77: 
    JUMPDEST		if (msg.sender != owner) {...
  tag75: 
    JUMPDEST		function setOwner(address _owner) ifOwner returns(bool success) {...
    SWAP2			function setOwner(address _owner) ifOwner returns(bool success) {...
    SWAP1			function setOwner(address _owner) ifOwner returns(bool success) {...
    POP			function setOwner(address _owner) ifOwner returns(bool success) {...
    JUMP	[out]		function setOwner(address _owner) ifOwner returns(bool success) {...

======= ConfigInterface =======
EVM assembly:
Contract not fully implemented

======= Token =======
EVM assembly:
.code:
  PUSH 60		contract Token {...
  PUSH 40		contract Token {...
  MSTORE			contract Token {...
  PUSH 40		function Token(address _config) {...
  MLOAD			function Token(address _config) {...
  PUSH 20		function Token(address _config) {...
  DUP1			function Token(address _config) {...
  PUSHSIZE		function Token(address _config) {...
  DUP4			function Token(address _config) {...
  CODECOPY			function Token(address _config) {...
  DUP2			function Token(address _config) {...
  ADD			function Token(address _config) {...
  PUSH 40		function Token(address _config) {...
  MSTORE			function Token(address _config) {...
  DUP1			function Token(address _config) {...
  DUP1			function Token(address _config) {...
  MLOAD			function Token(address _config) {...
  SWAP1			function Token(address _config) {...
  PUSH 20		function Token(address _config) {...
  ADD			function Token(address _config) {...
  SWAP1			function Token(address _config) {...
  SWAP2			function Token(address _config) {...
  SWAP1			function Token(address _config) {...
  POP			function Token(address _config) {...
  POP			function Token(address _config) {...
tag1: 
  JUMPDEST		function Token(address _config) {...
  PUSH 0		address _initseller
  DUP2			_config
  PUSH 1		config
  PUSH 0		config
  PUSH 100		config = _config
  EXP			config = _config
  DUP2			config = _config
  SLOAD			config = _config
  DUP2			config = _config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		config = _config
  MUL			config = _config
  NOT			config = _config
  AND			config = _config
  SWAP1			config = _config
  DUP4			config = _config
  MUL			config = _config
  OR			config = _config
  SWAP1			config = _config
  SSTORE			config = _config
  POP			config = _config
  CALLER			msg.sender
  PUSH 0		owner
  PUSH 0		owner
  PUSH 100		owner = msg.sender
  EXP			owner = msg.sender
  DUP2			owner = msg.sender
  SLOAD			owner = msg.sender
  DUP2			owner = msg.sender
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = msg.sender
  MUL			owner = msg.sender
  NOT			owner = msg.sender
  AND			owner = msg.sender
  SWAP1			owner = msg.sender
  DUP4			owner = msg.sender
  MUL			owner = msg.sender
  OR			owner = msg.sender
  SWAP1			owner = msg.sender
  SSTORE			owner = msg.sender
  POP			owner = msg.sender
  DUP2			_config
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		ConfigInterface(_config).getConfigAddress
  AND			ConfigInterface(_config).getConfigAddress
  PUSH F896503A		ConfigInterface(_config).getConfigAddress
  PUSH 40		ConfigInterface(_config).getConfigAddress("sale1:address")
  MLOAD			ConfigInterface(_config).getConfigAddress("sale1:address")
  DUP2			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 100000000000000000000000000000000000000000000000000000000		ConfigInterface(_config).getConfigAddress("sale1:address")
  MUL			ConfigInterface(_config).getConfigAddress("sale1:address")
  DUP2			ConfigInterface(_config).getConfigAddress("sale1:address")
  MSTORE			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 4		ConfigInterface(_config).getConfigAddress("sale1:address")
  ADD			ConfigInterface(_config).getConfigAddress("sale1:address")
  DUP1			ConfigInterface(_config).getConfigAddress("sale1:address")
  DUP1			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 73616C65313A6164647265737300000000000000000000000000000000000000		ConfigInterface(_config).getConfigAddress("sale1:address")
  DUP2			ConfigInterface(_config).getConfigAddress("sale1:address")
  MSTORE			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 20		ConfigInterface(_config).getConfigAddress("sale1:address")
  ADD			ConfigInterface(_config).getConfigAddress("sale1:address")
  POP			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 20		ConfigInterface(_config).getConfigAddress("sale1:address")
  ADD			ConfigInterface(_config).getConfigAddress("sale1:address")
  SWAP1			ConfigInterface(_config).getConfigAddress("sale1:address")
  POP			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 20		ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 40		ConfigInterface(_config).getConfigAddress("sale1:address")
  MLOAD			ConfigInterface(_config).getConfigAddress("sale1:address")
  DUP1			ConfigInterface(_config).getConfigAddress("sale1:address")
  DUP4			ConfigInterface(_config).getConfigAddress("sale1:address")
  SUB			ConfigInterface(_config).getConfigAddress("sale1:address")
  DUP2			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 0		ConfigInterface(_config).getConfigAddress("sale1:address")
  DUP8			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 61DA		ConfigInterface(_config).getConfigAddress("sale1:address")
  GAS			ConfigInterface(_config).getConfigAddress("sale1:address")
  SUB			ConfigInterface(_config).getConfigAddress("sale1:address")
  CALL			ConfigInterface(_config).getConfigAddress("sale1:address")
  ISZERO			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH [ErrorTag]		ConfigInterface(_config).getConfigAddress("sale1:address")
  JUMPI			ConfigInterface(_config).getConfigAddress("sale1:address")
  POP			ConfigInterface(_config).getConfigAddress("sale1:address")
  POP			ConfigInterface(_config).getConfigAddress("sale1:address")
  POP			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 40		ConfigInterface(_config).getConfigAddress("sale1:address")
  MLOAD			ConfigInterface(_config).getConfigAddress("sale1:address")
  DUP1			ConfigInterface(_config).getConfigAddress("sale1:address")
  MLOAD			ConfigInterface(_config).getConfigAddress("sale1:address")
  SWAP1			ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 20		ConfigInterface(_config).getConfigAddress("sale1:address")
  ADD			ConfigInterface(_config).getConfigAddress("sale1:address")
  POP			ConfigInterface(_config).getConfigAddress("sale1:address")
  SWAP1			address _initseller = ConfigInterface(_config).getConfigAddress("sale1:address")
  POP			address _initseller = ConfigInterface(_config).getConfigAddress("sale1:address")
  PUSH 1		true
  PUSH 7		seller
  PUSH 0		seller
  POP			seller
  PUSH 0		seller[_initseller]
  DUP4			_initseller
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		seller[_initseller]
  AND			seller[_initseller]
  DUP2			seller[_initseller]
  MSTORE			seller[_initseller]
  PUSH 20		seller[_initseller]
  ADD			seller[_initseller]
  SWAP1			seller[_initseller]
  DUP2			seller[_initseller]
  MSTORE			seller[_initseller]
  PUSH 20		seller[_initseller]
  ADD			seller[_initseller]
  PUSH 0		seller[_initseller]
  SHA3			seller[_initseller]
  PUSH 0		seller[_initseller]
  PUSH 100		seller[_initseller] = true
  EXP			seller[_initseller] = true
  DUP2			seller[_initseller] = true
  SLOAD			seller[_initseller] = true
  DUP2			seller[_initseller] = true
  PUSH FF		seller[_initseller] = true
  MUL			seller[_initseller] = true
  NOT			seller[_initseller] = true
  AND			seller[_initseller] = true
  SWAP1			seller[_initseller] = true
  DUP4			seller[_initseller] = true
  MUL			seller[_initseller] = true
  OR			seller[_initseller] = true
  SWAP1			seller[_initseller] = true
  SSTORE			seller[_initseller] = true
  POP			seller[_initseller] = true
  PUSH 40		new Badge()
  MLOAD			new Badge()
  PUSH #[$00000000…00000000]		new Badge()
  DUP1			new Badge()
  PUSH [$00000000…00000000]		new Badge()
  DUP4			new Badge()
  CODECOPY			new Badge()
  ADD			new Badge()
  DUP1			new Badge()
  SWAP1			new Badge()
  POP			new Badge()
  PUSH 40		new Badge()
  MLOAD			new Badge()
  DUP1			new Badge()
  SWAP2			new Badge()
  SUB			new Badge()
  SWAP1			new Badge()
  PUSH 0		new Badge()
  CREATE			new Badge()
  PUSH 3		badgeLedger
  PUSH 0		badgeLedger
  PUSH 100		badgeLedger = new Badge()
  EXP			badgeLedger = new Badge()
  DUP2			badgeLedger = new Badge()
  SLOAD			badgeLedger = new Badge()
  DUP2			badgeLedger = new Badge()
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		badgeLedger = new Badge()
  MUL			badgeLedger = new Badge()
  NOT			badgeLedger = new Badge()
  AND			badgeLedger = new Badge()
  SWAP1			badgeLedger = new Badge()
  DUP4			badgeLedger = new Badge()
  MUL			badgeLedger = new Badge()
  OR			badgeLedger = new Badge()
  SWAP1			badgeLedger = new Badge()
  SSTORE			badgeLedger = new Badge()
  POP			badgeLedger = new Badge()
  PUSH 0		false
  PUSH 1		locked
  PUSH 14		locked
  PUSH 100		locked = false
  EXP			locked = false
  DUP2			locked = false
  SLOAD			locked = false
  DUP2			locked = false
  PUSH FF		locked = false
  MUL			locked = false
  NOT			locked = false
  AND			locked = false
  SWAP1			locked = false
  DUP4			locked = false
  MUL			locked = false
  OR			locked = false
  SWAP1			locked = false
  SSTORE			locked = false
  POP			locked = false
tag2: 
  JUMPDEST		function Token(address _config) {...
  POP			function Token(address _config) {...
  POP			function Token(address _config) {...
  PUSH #[$00000000…00000001]		contract Token {...
  DUP1			contract Token {...
  PUSH [$00000000…00000001]		contract Token {...
  PUSH 0		contract Token {...
  CODECOPY			contract Token {...
  PUSH 0		contract Token {...
  RETURN			contract Token {...
.data:
  0: 
  .code:
    PUSH 60		contract Badge {...
    PUSH 40		contract Badge {...
    MSTORE			contract Badge {...
  tag1: 
    JUMPDEST		function Badge() {...
    CALLER			msg.sender
    PUSH 2		owner
    PUSH 0		owner
    PUSH 100		owner = msg.sender
    EXP			owner = msg.sender
    DUP2			owner = msg.sender
    SLOAD			owner = msg.sender
    DUP2			owner = msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = msg.sender
    MUL			owner = msg.sender
    NOT			owner = msg.sender
    AND			owner = msg.sender
    SWAP1			owner = msg.sender
    DUP4			owner = msg.sender
    MUL			owner = msg.sender
    OR			owner = msg.sender
    SWAP1			owner = msg.sender
    SSTORE			owner = msg.sender
    POP			owner = msg.sender
  tag2: 
    JUMPDEST		function Badge() {...
    PUSH #[$00000000…00000000]		contract Badge {...
    DUP1			contract Badge {...
    PUSH [$00000000…00000000]		contract Badge {...
    PUSH 0		contract Badge {...
    CODECOPY			contract Badge {...
    PUSH 0		contract Badge {...
    RETURN			contract Badge {...
  .data:
    0: 
    .code:
      PUSH 60		contract Badge {...
      PUSH 40		contract Badge {...
      MSTORE			contract Badge {...
      CALLDATASIZE			contract Badge {...
      ISZERO			contract Badge {...
      PUSH [tag1]		contract Badge {...
      JUMPI			contract Badge {...
      PUSH 0		contract Badge {...
      CALLDATALOAD			contract Badge {...
      PUSH 100000000000000000000000000000000000000000000000000000000		contract Badge {...
      SWAP1			contract Badge {...
      DIV			contract Badge {...
      DUP1			contract Badge {...
      PUSH 95EA7B3		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag2]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH 13AF4035		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag3]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH 18160DDD		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag4]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH 23B872DD		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag5]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH 3416F9D4		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag6]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH 40C10F19		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag7]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH 4E30A66C		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag8]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH 70A08231		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag9]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH 8DA5CB5B		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag10]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH A9059CBB		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag11]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH C74C251F		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag12]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH CF309012		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag13]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH DD62ED3E		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag14]		contract Badge {...
      JUMPI			contract Badge {...
      DUP1			contract Badge {...
      PUSH E74B9D11		contract Badge {...
      EQ			contract Badge {...
      PUSH [tag15]		contract Badge {...
      JUMPI			contract Badge {...
      PUSH [tag1]		contract Badge {...
      JUMP			contract Badge {...
    tag1: 
      JUMPDEST		contract Badge {...
      STOP			contract Badge {...
    tag2: 
      JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
      PUSH [tag16]		function approve(address _spender, uint256 _value) returns(bool success) {...
      PUSH 4		function approve(address _spender, uint256 _value) returns(bool success) {...
      DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      CALLDATALOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      PUSH 20		function approve(address _spender, uint256 _value) returns(bool success) {...
      ADD			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      CALLDATALOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      PUSH 20		function approve(address _spender, uint256 _value) returns(bool success) {...
      ADD			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      POP			function approve(address _spender, uint256 _value) returns(bool success) {...
      POP			function approve(address _spender, uint256 _value) returns(bool success) {...
      PUSH [tag17]		function approve(address _spender, uint256 _value) returns(bool success) {...
      JUMP			function approve(address _spender, uint256 _value) returns(bool success) {...
    tag16: 
      JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
      PUSH 40		function approve(address _spender, uint256 _value) returns(bool success) {...
      MLOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
      DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      DUP3			function approve(address _spender, uint256 _value) returns(bool success) {...
      DUP2			function approve(address _spender, uint256 _value) returns(bool success) {...
      MSTORE			function approve(address _spender, uint256 _value) returns(bool success) {...
      PUSH 20		function approve(address _spender, uint256 _value) returns(bool success) {...
      ADD			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
      POP			function approve(address _spender, uint256 _value) returns(bool success) {...
      POP			function approve(address _spender, uint256 _value) returns(bool success) {...
      PUSH 40		function approve(address _spender, uint256 _value) returns(bool success) {...
      MLOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
      DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
      SUB			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
      RETURN			function approve(address _spender, uint256 _value) returns(bool success) {...
    tag3: 
      JUMPDEST		function setOwner(address _owner) ifOwner returns(bool success) {...
      PUSH [tag18]		function setOwner(address _owner) ifOwner returns(bool success) {...
      PUSH 4		function setOwner(address _owner) ifOwner returns(bool success) {...
      DUP1			function setOwner(address _owner) ifOwner returns(bool success) {...
      DUP1			function setOwner(address _owner) ifOwner returns(bool success) {...
      CALLDATALOAD			function setOwner(address _owner) ifOwner returns(bool success) {...
      SWAP1			function setOwner(address _owner) ifOwner returns(bool success) {...
      PUSH 20		function setOwner(address _owner) ifOwner returns(bool success) {...
      ADD			function setOwner(address _owner) ifOwner returns(bool success) {...
      SWAP1			function setOwner(address _owner) ifOwner returns(bool success) {...
      SWAP2			function setOwner(address _owner) ifOwner returns(bool success) {...
      SWAP1			function setOwner(address _owner) ifOwner returns(bool success) {...
      POP			function setOwner(address _owner) ifOwner returns(bool success) {...
      POP			function setOwner(address _owner) ifOwner returns(bool success) {...
      PUSH [tag19]		function setOwner(address _owner) ifOwner returns(bool success) {...
      JUMP			function setOwner(address _owner) ifOwner returns(bool success) {...
    tag18: 
      JUMPDEST		function setOwner(address _owner) ifOwner returns(bool success) {...
      PUSH 40		function setOwner(address _owner) ifOwner returns(bool success) {...
      MLOAD			function setOwner(address _owner) ifOwner returns(bool success) {...
      DUP1			function setOwner(address _owner) ifOwner returns(bool success) {...
      DUP3			function setOwner(address _owner) ifOwner returns(bool success) {...
      DUP2			function setOwner(address _owner) ifOwner returns(bool success) {...
      MSTORE			function setOwner(address _owner) ifOwner returns(bool success) {...
      PUSH 20		function setOwner(address _owner) ifOwner returns(bool success) {...
      ADD			function setOwner(address _owner) ifOwner returns(bool success) {...
      SWAP2			function setOwner(address _owner) ifOwner returns(bool success) {...
      POP			function setOwner(address _owner) ifOwner returns(bool success) {...
      POP			function setOwner(address _owner) ifOwner returns(bool success) {...
      PUSH 40		function setOwner(address _owner) ifOwner returns(bool success) {...
      MLOAD			function setOwner(address _owner) ifOwner returns(bool success) {...
      DUP1			function setOwner(address _owner) ifOwner returns(bool success) {...
      SWAP2			function setOwner(address _owner) ifOwner returns(bool success) {...
      SUB			function setOwner(address _owner) ifOwner returns(bool success) {...
      SWAP1			function setOwner(address _owner) ifOwner returns(bool success) {...
      RETURN			function setOwner(address _owner) ifOwner returns(bool success) {...
    tag4: 
      JUMPDEST		uint256 public totalSupply
      PUSH [tag20]		uint256 public totalSupply
      PUSH 4		uint256 public totalSupply
      DUP1			uint256 public totalSupply
      POP			uint256 public totalSupply
      POP			uint256 public totalSupply
      PUSH [tag21]		uint256 public totalSupply
      JUMP			uint256 public totalSupply
    tag20: 
      JUMPDEST		uint256 public totalSupply
      PUSH 40		uint256 public totalSupply
      MLOAD			uint256 public totalSupply
      DUP1			uint256 public totalSupply
      DUP3			uint256 public totalSupply
      DUP2			uint256 public totalSupply
      MSTORE			uint256 public totalSupply
      PUSH 20		uint256 public totalSupply
      ADD			uint256 public totalSupply
      SWAP2			uint256 public totalSupply
      POP			uint256 public totalSupply
      POP			uint256 public totalSupply
      PUSH 40		uint256 public totalSupply
      MLOAD			uint256 public totalSupply
      DUP1			uint256 public totalSupply
      SWAP2			uint256 public totalSupply
      SUB			uint256 public totalSupply
      SWAP1			uint256 public totalSupply
      RETURN			uint256 public totalSupply
    tag5: 
      JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      PUSH [tag22]		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      PUSH 4		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      CALLDATALOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      CALLDATALOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      CALLDATALOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      PUSH [tag23]		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      JUMP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    tag22: 
      JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      PUSH 40		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      MLOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      DUP3			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      DUP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      MSTORE			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      PUSH 40		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      MLOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SUB			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      RETURN			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    tag6: 
      JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
      PUSH [tag24]		function subtractSafely(uint a, uint b) returns(uint) {...
      PUSH 4		function subtractSafely(uint a, uint b) returns(uint) {...
      DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
      DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
      CALLDATALOAD			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
      PUSH 20		function subtractSafely(uint a, uint b) returns(uint) {...
      ADD			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
      DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
      CALLDATALOAD			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
      PUSH 20		function subtractSafely(uint a, uint b) returns(uint) {...
      ADD			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
      POP			function subtractSafely(uint a, uint b) returns(uint) {...
      POP			function subtractSafely(uint a, uint b) returns(uint) {...
      PUSH [tag25]		function subtractSafely(uint a, uint b) returns(uint) {...
      JUMP			function subtractSafely(uint a, uint b) returns(uint) {...
    tag24: 
      JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
      PUSH 40		function subtractSafely(uint a, uint b) returns(uint) {...
      MLOAD			function subtractSafely(uint a, uint b) returns(uint) {...
      DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
      DUP3			function subtractSafely(uint a, uint b) returns(uint) {...
      DUP2			function subtractSafely(uint a, uint b) returns(uint) {...
      MSTORE			function subtractSafely(uint a, uint b) returns(uint) {...
      PUSH 20		function subtractSafely(uint a, uint b) returns(uint) {...
      ADD			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
      POP			function subtractSafely(uint a, uint b) returns(uint) {...
      POP			function subtractSafely(uint a, uint b) returns(uint) {...
      PUSH 40		function subtractSafely(uint a, uint b) returns(uint) {...
      MLOAD			function subtractSafely(uint a, uint b) returns(uint) {...
      DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
      SUB			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
      RETURN			function subtractSafely(uint a, uint b) returns(uint) {...
    tag7: 
      JUMPDEST		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      PUSH [tag26]		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      PUSH 4		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      DUP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      DUP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      CALLDATALOAD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      PUSH 20		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      ADD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      DUP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      CALLDATALOAD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      PUSH 20		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      ADD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      PUSH [tag27]		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      JUMP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    tag26: 
      JUMPDEST		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      PUSH 40		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      MLOAD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      DUP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      DUP3			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      DUP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      MSTORE			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      PUSH 20		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      ADD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      PUSH 40		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      MLOAD			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      DUP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SUB			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP1			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      RETURN			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    tag8: 
      JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
      PUSH [tag28]		function safeToAdd(uint a, uint b) returns(bool) {...
      PUSH 4		function safeToAdd(uint a, uint b) returns(bool) {...
      DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
      DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
      CALLDATALOAD			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
      PUSH 20		function safeToAdd(uint a, uint b) returns(bool) {...
      ADD			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
      DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
      CALLDATALOAD			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
      PUSH 20		function safeToAdd(uint a, uint b) returns(bool) {...
      ADD			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
      POP			function safeToAdd(uint a, uint b) returns(bool) {...
      POP			function safeToAdd(uint a, uint b) returns(bool) {...
      PUSH [tag29]		function safeToAdd(uint a, uint b) returns(bool) {...
      JUMP			function safeToAdd(uint a, uint b) returns(bool) {...
    tag28: 
      JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
      PUSH 40		function safeToAdd(uint a, uint b) returns(bool) {...
      MLOAD			function safeToAdd(uint a, uint b) returns(bool) {...
      DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
      DUP3			function safeToAdd(uint a, uint b) returns(bool) {...
      DUP2			function safeToAdd(uint a, uint b) returns(bool) {...
      MSTORE			function safeToAdd(uint a, uint b) returns(bool) {...
      PUSH 20		function safeToAdd(uint a, uint b) returns(bool) {...
      ADD			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
      POP			function safeToAdd(uint a, uint b) returns(bool) {...
      POP			function safeToAdd(uint a, uint b) returns(bool) {...
      PUSH 40		function safeToAdd(uint a, uint b) returns(bool) {...
      MLOAD			function safeToAdd(uint a, uint b) returns(bool) {...
      DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
      SUB			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
      RETURN			function safeToAdd(uint a, uint b) returns(bool) {...
    tag9: 
      JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
      PUSH [tag30]		function balanceOf(address _owner) constant returns(uint256 balance) {...
      PUSH 4		function balanceOf(address _owner) constant returns(uint256 balance) {...
      DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
      DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
      CALLDATALOAD			function balanceOf(address _owner) constant returns(uint256 balance) {...
      SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
      PUSH 20		function balanceOf(address _owner) constant returns(uint256 balance) {...
      ADD			function balanceOf(address _owner) constant returns(uint256 balance) {...
      SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
      SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
      SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
      POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
      POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
      PUSH [tag31]		function balanceOf(address _owner) constant returns(uint256 balance) {...
      JUMP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    tag30: 
      JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
      PUSH 40		function balanceOf(address _owner) constant returns(uint256 balance) {...
      MLOAD			function balanceOf(address _owner) constant returns(uint256 balance) {...
      DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
      DUP3			function balanceOf(address _owner) constant returns(uint256 balance) {...
      DUP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
      MSTORE			function balanceOf(address _owner) constant returns(uint256 balance) {...
      PUSH 20		function balanceOf(address _owner) constant returns(uint256 balance) {...
      ADD			function balanceOf(address _owner) constant returns(uint256 balance) {...
      SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
      POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
      POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
      PUSH 40		function balanceOf(address _owner) constant returns(uint256 balance) {...
      MLOAD			function balanceOf(address _owner) constant returns(uint256 balance) {...
      DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
      SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
      SUB			function balanceOf(address _owner) constant returns(uint256 balance) {...
      SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
      RETURN			function balanceOf(address _owner) constant returns(uint256 balance) {...
    tag10: 
      JUMPDEST		address public owner
      PUSH [tag32]		address public owner
      PUSH 4		address public owner
      DUP1			address public owner
      POP			address public owner
      POP			address public owner
      PUSH [tag33]		address public owner
      JUMP			address public owner
    tag32: 
      JUMPDEST		address public owner
      PUSH 40		address public owner
      MLOAD			address public owner
      DUP1			address public owner
      DUP3			address public owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
      AND			address public owner
      DUP2			address public owner
      MSTORE			address public owner
      PUSH 20		address public owner
      ADD			address public owner
      SWAP2			address public owner
      POP			address public owner
      POP			address public owner
      PUSH 40		address public owner
      MLOAD			address public owner
      DUP1			address public owner
      SWAP2			address public owner
      SUB			address public owner
      SWAP1			address public owner
      RETURN			address public owner
    tag11: 
      JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
      PUSH [tag34]		function transfer(address _to, uint256 _value) returns(bool success) {...
      PUSH 4		function transfer(address _to, uint256 _value) returns(bool success) {...
      DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      CALLDATALOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      PUSH 20		function transfer(address _to, uint256 _value) returns(bool success) {...
      ADD			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      CALLDATALOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      PUSH 20		function transfer(address _to, uint256 _value) returns(bool success) {...
      ADD			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      POP			function transfer(address _to, uint256 _value) returns(bool success) {...
      POP			function transfer(address _to, uint256 _value) returns(bool success) {...
      PUSH [tag35]		function transfer(address _to, uint256 _value) returns(bool success) {...
      JUMP			function transfer(address _to, uint256 _value) returns(bool success) {...
    tag34: 
      JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
      PUSH 40		function transfer(address _to, uint256 _value) returns(bool success) {...
      MLOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
      DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      DUP3			function transfer(address _to, uint256 _value) returns(bool success) {...
      DUP2			function transfer(address _to, uint256 _value) returns(bool success) {...
      MSTORE			function transfer(address _to, uint256 _value) returns(bool success) {...
      PUSH 20		function transfer(address _to, uint256 _value) returns(bool success) {...
      ADD			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
      POP			function transfer(address _to, uint256 _value) returns(bool success) {...
      POP			function transfer(address _to, uint256 _value) returns(bool success) {...
      PUSH 40		function transfer(address _to, uint256 _value) returns(bool success) {...
      MLOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
      DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
      SUB			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
      RETURN			function transfer(address _to, uint256 _value) returns(bool success) {...
    tag12: 
      JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
      PUSH [tag36]		function addSafely(uint a, uint b) returns(uint result) {...
      PUSH 4		function addSafely(uint a, uint b) returns(uint result) {...
      DUP1			function addSafely(uint a, uint b) returns(uint result) {...
      DUP1			function addSafely(uint a, uint b) returns(uint result) {...
      CALLDATALOAD			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
      PUSH 20		function addSafely(uint a, uint b) returns(uint result) {...
      ADD			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
      DUP1			function addSafely(uint a, uint b) returns(uint result) {...
      CALLDATALOAD			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
      PUSH 20		function addSafely(uint a, uint b) returns(uint result) {...
      ADD			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
      POP			function addSafely(uint a, uint b) returns(uint result) {...
      POP			function addSafely(uint a, uint b) returns(uint result) {...
      PUSH [tag37]		function addSafely(uint a, uint b) returns(uint result) {...
      JUMP			function addSafely(uint a, uint b) returns(uint result) {...
    tag36: 
      JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
      PUSH 40		function addSafely(uint a, uint b) returns(uint result) {...
      MLOAD			function addSafely(uint a, uint b) returns(uint result) {...
      DUP1			function addSafely(uint a, uint b) returns(uint result) {...
      DUP3			function addSafely(uint a, uint b) returns(uint result) {...
      DUP2			function addSafely(uint a, uint b) returns(uint result) {...
      MSTORE			function addSafely(uint a, uint b) returns(uint result) {...
      PUSH 20		function addSafely(uint a, uint b) returns(uint result) {...
      ADD			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
      POP			function addSafely(uint a, uint b) returns(uint result) {...
      POP			function addSafely(uint a, uint b) returns(uint result) {...
      PUSH 40		function addSafely(uint a, uint b) returns(uint result) {...
      MLOAD			function addSafely(uint a, uint b) returns(uint result) {...
      DUP1			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
      SUB			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
      RETURN			function addSafely(uint a, uint b) returns(uint result) {...
    tag13: 
      JUMPDEST		bool public locked
      PUSH [tag38]		bool public locked
      PUSH 4		bool public locked
      DUP1			bool public locked
      POP			bool public locked
      POP			bool public locked
      PUSH [tag39]		bool public locked
      JUMP			bool public locked
    tag38: 
      JUMPDEST		bool public locked
      PUSH 40		bool public locked
      MLOAD			bool public locked
      DUP1			bool public locked
      DUP3			bool public locked
      DUP2			bool public locked
      MSTORE			bool public locked
      PUSH 20		bool public locked
      ADD			bool public locked
      SWAP2			bool public locked
      POP			bool public locked
      POP			bool public locked
      PUSH 40		bool public locked
      MLOAD			bool public locked
      DUP1			bool public locked
      SWAP2			bool public locked
      SUB			bool public locked
      SWAP1			bool public locked
      RETURN			bool public locked
    tag14: 
      JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      PUSH [tag40]		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      PUSH 4		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      CALLDATALOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      PUSH 20		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      ADD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      CALLDATALOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      PUSH 20		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      ADD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      PUSH [tag41]		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      JUMP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    tag40: 
      JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      PUSH 40		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      MLOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      DUP3			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      DUP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      MSTORE			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      PUSH 20		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      ADD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      PUSH 40		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      MLOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SUB			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      RETURN			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    tag15: 
      JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
      PUSH [tag42]		function safeToSubtract(uint a, uint b) returns(bool) {...
      PUSH 4		function safeToSubtract(uint a, uint b) returns(bool) {...
      DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      CALLDATALOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      PUSH 20		function safeToSubtract(uint a, uint b) returns(bool) {...
      ADD			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      CALLDATALOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      PUSH 20		function safeToSubtract(uint a, uint b) returns(bool) {...
      ADD			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      POP			function safeToSubtract(uint a, uint b) returns(bool) {...
      POP			function safeToSubtract(uint a, uint b) returns(bool) {...
      PUSH [tag43]		function safeToSubtract(uint a, uint b) returns(bool) {...
      JUMP			function safeToSubtract(uint a, uint b) returns(bool) {...
    tag42: 
      JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
      PUSH 40		function safeToSubtract(uint a, uint b) returns(bool) {...
      MLOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
      DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      DUP3			function safeToSubtract(uint a, uint b) returns(bool) {...
      DUP2			function safeToSubtract(uint a, uint b) returns(bool) {...
      MSTORE			function safeToSubtract(uint a, uint b) returns(bool) {...
      PUSH 20		function safeToSubtract(uint a, uint b) returns(bool) {...
      ADD			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
      POP			function safeToSubtract(uint a, uint b) returns(bool) {...
      POP			function safeToSubtract(uint a, uint b) returns(bool) {...
      PUSH 40		function safeToSubtract(uint a, uint b) returns(bool) {...
      MLOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
      DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
      SUB			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
      RETURN			function safeToSubtract(uint a, uint b) returns(bool) {...
    tag33: 
      JUMPDEST		address public owner
      PUSH 2		address public owner
      PUSH 0		address public owner
      SWAP1			address public owner
      SLOAD			address public owner
      SWAP1			address public owner
      PUSH 100		address public owner
      EXP			address public owner
      SWAP1			address public owner
      DIV			address public owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
      AND			address public owner
      DUP2			address public owner
      JUMP	[out]		address public owner
    tag39: 
      JUMPDEST		bool public locked
      PUSH 2		bool public locked
      PUSH 14		bool public locked
      SWAP1			bool public locked
      SLOAD			bool public locked
      SWAP1			bool public locked
      PUSH 100		bool public locked
      EXP			bool public locked
      SWAP1			bool public locked
      DIV			bool public locked
      PUSH FF		bool public locked
      AND			bool public locked
      DUP2			bool public locked
      JUMP	[out]		bool public locked
    tag21: 
      JUMPDEST		uint256 public totalSupply
      PUSH 3		uint256 public totalSupply
      PUSH 0		uint256 public totalSupply
      POP			uint256 public totalSupply
      SLOAD			uint256 public totalSupply
      DUP2			uint256 public totalSupply
      JUMP	[out]		uint256 public totalSupply
    tag29: 
      JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
      PUSH 0		bool
      DUP3			a
      DUP3			b
      DUP5			a
      ADD			a + b
      LT			a + b >= a
      ISZERO			a + b >= a
      SWAP1			return (a + b >= a)
      POP			return (a + b >= a)
      PUSH [tag44]		return (a + b >= a)
      JUMP			return (a + b >= a)
    tag44: 
      JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP3			function safeToAdd(uint a, uint b) returns(bool) {...
      SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
      POP			function safeToAdd(uint a, uint b) returns(bool) {...
      POP			function safeToAdd(uint a, uint b) returns(bool) {...
      JUMP	[out]		function safeToAdd(uint a, uint b) returns(bool) {...
    tag37: 
      JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
      PUSH 0		uint result
      PUSH [tag46]		safeToAdd(a, b)
      DUP4			a
      DUP4			b
      PUSH [tag29]		safeToAdd
      JUMP	[in]		safeToAdd(a, b)
    tag46: 
      JUMPDEST		safeToAdd(a, b)
      ISZERO			!safeToAdd(a, b)
      ISZERO			if (!safeToAdd(a, b)) {...
      PUSH [tag47]		if (!safeToAdd(a, b)) {...
      JUMPI			if (!safeToAdd(a, b)) {...
      PUSH [ErrorTag]		throw
      JUMP			throw
      PUSH [tag48]		if (!safeToAdd(a, b)) {...
      JUMP			if (!safeToAdd(a, b)) {...
    tag47: 
      JUMPDEST		if (!safeToAdd(a, b)) {...
      DUP2			b
      DUP4			a
      ADD			a + b
      SWAP1			result = a + b
      POP			result = a + b
      DUP1			result = a + b
      POP			result = a + b
      DUP1			result
      SWAP1			return result
      POP			return result
      PUSH [tag45]		return result
      JUMP			return result
    tag48: 
      JUMPDEST		if (!safeToAdd(a, b)) {...
    tag45: 
      JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
      SWAP3			function addSafely(uint a, uint b) returns(uint result) {...
      SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
      POP			function addSafely(uint a, uint b) returns(uint result) {...
      POP			function addSafely(uint a, uint b) returns(uint result) {...
      JUMP	[out]		function addSafely(uint a, uint b) returns(uint result) {...
    tag43: 
      JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
      PUSH 0		bool
      DUP3			a
      DUP3			b
      GT			b <= a
      ISZERO			b <= a
      SWAP1			return (b <= a)
      POP			return (b <= a)
      PUSH [tag49]		return (b <= a)
      JUMP			return (b <= a)
    tag49: 
      JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP3			function safeToSubtract(uint a, uint b) returns(bool) {...
      SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
      POP			function safeToSubtract(uint a, uint b) returns(bool) {...
      POP			function safeToSubtract(uint a, uint b) returns(bool) {...
      JUMP	[out]		function safeToSubtract(uint a, uint b) returns(bool) {...
    tag25: 
      JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
      PUSH 0		uint
      PUSH [tag51]		safeToSubtract(a, b)
      DUP4			a
      DUP4			b
      PUSH [tag43]		safeToSubtract
      JUMP	[in]		safeToSubtract(a, b)
    tag51: 
      JUMPDEST		safeToSubtract(a, b)
      ISZERO			!safeToSubtract(a, b)
      ISZERO			if (!safeToSubtract(a, b)) throw
      PUSH [tag52]		if (!safeToSubtract(a, b)) throw
      JUMPI			if (!safeToSubtract(a, b)) throw
      PUSH [ErrorTag]		throw
      JUMP			throw
    tag52: 
      JUMPDEST		if (!safeToSubtract(a, b)) throw
      DUP2			b
      DUP4			a
      SUB			a - b
      SWAP1			return a - b
      POP			return a - b
      PUSH [tag50]		return a - b
      JUMP			return a - b
    tag50: 
      JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP3			function subtractSafely(uint a, uint b) returns(uint) {...
      SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
      POP			function subtractSafely(uint a, uint b) returns(uint) {...
      POP			function subtractSafely(uint a, uint b) returns(uint) {...
      JUMP	[out]		function subtractSafely(uint a, uint b) returns(uint) {...
    tag31: 
      JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
      PUSH 0		uint256 balance
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[_owner]
      DUP4			_owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_owner]
      AND			balances[_owner]
      DUP2			balances[_owner]
      MSTORE			balances[_owner]
      PUSH 20		balances[_owner]
      ADD			balances[_owner]
      SWAP1			balances[_owner]
      DUP2			balances[_owner]
      MSTORE			balances[_owner]
      PUSH 20		balances[_owner]
      ADD			balances[_owner]
      PUSH 0		balances[_owner]
      SHA3			balances[_owner]
      PUSH 0		balances[_owner]
      POP			balances[_owner]
      SLOAD			balances[_owner]
      SWAP1			return balances[_owner]
      POP			return balances[_owner]
      PUSH [tag53]		return balances[_owner]
      JUMP			return balances[_owner]
    tag53: 
      JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
      SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
      SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
      POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
      JUMP	[out]		function balanceOf(address _owner) constant returns(uint256 balance) {...
    tag35: 
      JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
      PUSH 0		bool success
      DUP2			_value
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[msg.sender]
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[msg.sender]
      AND			balances[msg.sender]
      DUP2			balances[msg.sender]
      MSTORE			balances[msg.sender]
      PUSH 20		balances[msg.sender]
      ADD			balances[msg.sender]
      SWAP1			balances[msg.sender]
      DUP2			balances[msg.sender]
      MSTORE			balances[msg.sender]
      PUSH 20		balances[msg.sender]
      ADD			balances[msg.sender]
      PUSH 0		balances[msg.sender]
      SHA3			balances[msg.sender]
      PUSH 0		balances[msg.sender]
      POP			balances[msg.sender]
      SLOAD			balances[msg.sender]
      LT			balances[msg.sender] >= _value
      ISZERO			balances[msg.sender] >= _value
      DUP1			balances[msg.sender] >= _value && _value > 0
      ISZERO			balances[msg.sender] >= _value && _value > 0
      PUSH [tag55]		balances[msg.sender] >= _value && _value > 0
      JUMPI			balances[msg.sender] >= _value && _value > 0
      POP			balances[msg.sender] >= _value && _value > 0
      PUSH 0		0
      DUP3			_value
      GT			_value > 0
    tag55: 
      JUMPDEST		balances[msg.sender] >= _value && _value > 0
      ISZERO			if (balances[msg.sender] >= _value && _value > 0) {...
      PUSH [tag56]		if (balances[msg.sender] >= _value && _value > 0) {...
      JUMPI			if (balances[msg.sender] >= _value && _value > 0) {...
      PUSH [tag57]		subtractSafely(balances[msg.sender], _value)
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[msg.sender]
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[msg.sender]
      AND			balances[msg.sender]
      DUP2			balances[msg.sender]
      MSTORE			balances[msg.sender]
      PUSH 20		balances[msg.sender]
      ADD			balances[msg.sender]
      SWAP1			balances[msg.sender]
      DUP2			balances[msg.sender]
      MSTORE			balances[msg.sender]
      PUSH 20		balances[msg.sender]
      ADD			balances[msg.sender]
      PUSH 0		balances[msg.sender]
      SHA3			balances[msg.sender]
      PUSH 0		balances[msg.sender]
      POP			balances[msg.sender]
      SLOAD			balances[msg.sender]
      DUP4			_value
      PUSH [tag25]		subtractSafely
      JUMP	[in]		subtractSafely(balances[msg.sender], _value)
    tag57: 
      JUMPDEST		subtractSafely(balances[msg.sender], _value)
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[msg.sender]
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[msg.sender]
      AND			balances[msg.sender]
      DUP2			balances[msg.sender]
      MSTORE			balances[msg.sender]
      PUSH 20		balances[msg.sender]
      ADD			balances[msg.sender]
      SWAP1			balances[msg.sender]
      DUP2			balances[msg.sender]
      MSTORE			balances[msg.sender]
      PUSH 20		balances[msg.sender]
      ADD			balances[msg.sender]
      PUSH 0		balances[msg.sender]
      SHA3			balances[msg.sender]
      PUSH 0		balances[msg.sender]
      POP			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
      DUP2			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
      SWAP1			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
      SSTORE			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
      POP			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
      PUSH [tag58]		addSafely(_value, balances[_to])
      DUP3			_value
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[_to]
      DUP7			_to
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
      AND			balances[_to]
      DUP2			balances[_to]
      MSTORE			balances[_to]
      PUSH 20		balances[_to]
      ADD			balances[_to]
      SWAP1			balances[_to]
      DUP2			balances[_to]
      MSTORE			balances[_to]
      PUSH 20		balances[_to]
      ADD			balances[_to]
      PUSH 0		balances[_to]
      SHA3			balances[_to]
      PUSH 0		balances[_to]
      POP			balances[_to]
      SLOAD			balances[_to]
      PUSH [tag37]		addSafely
      JUMP	[in]		addSafely(_value, balances[_to])
    tag58: 
      JUMPDEST		addSafely(_value, balances[_to])
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[_to]
      DUP6			_to
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
      AND			balances[_to]
      DUP2			balances[_to]
      MSTORE			balances[_to]
      PUSH 20		balances[_to]
      ADD			balances[_to]
      SWAP1			balances[_to]
      DUP2			balances[_to]
      MSTORE			balances[_to]
      PUSH 20		balances[_to]
      ADD			balances[_to]
      PUSH 0		balances[_to]
      SHA3			balances[_to]
      PUSH 0		balances[_to]
      POP			balances[_to] = addSafely(_value, balances[_to])
      DUP2			balances[_to] = addSafely(_value, balances[_to])
      SWAP1			balances[_to] = addSafely(_value, balances[_to])
      SSTORE			balances[_to] = addSafely(_value, balances[_to])
      POP			balances[_to] = addSafely(_value, balances[_to])
      DUP3			_to
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(msg.sender, _to, _value)
      AND			Transfer(msg.sender, _to, _value)
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(msg.sender, _to, _value)
      AND			Transfer(msg.sender, _to, _value)
      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF		Transfer(msg.sender, _to, _value)
      DUP5			_value
      PUSH 40		Transfer(msg.sender, _to, _value)
      MLOAD			Transfer(msg.sender, _to, _value)
      DUP1			Transfer(msg.sender, _to, _value)
      DUP3			Transfer(msg.sender, _to, _value)
      DUP2			Transfer(msg.sender, _to, _value)
      MSTORE			Transfer(msg.sender, _to, _value)
      PUSH 20		Transfer(msg.sender, _to, _value)
      ADD			Transfer(msg.sender, _to, _value)
      SWAP2			Transfer(msg.sender, _to, _value)
      POP			Transfer(msg.sender, _to, _value)
      POP			Transfer(msg.sender, _to, _value)
      PUSH 40		Transfer(msg.sender, _to, _value)
      MLOAD			Transfer(msg.sender, _to, _value)
      DUP1			Transfer(msg.sender, _to, _value)
      SWAP2			Transfer(msg.sender, _to, _value)
      SUB			Transfer(msg.sender, _to, _value)
      SWAP1			Transfer(msg.sender, _to, _value)
      LOG3			Transfer(msg.sender, _to, _value)
      PUSH 1		true
      SWAP1			success = true
      POP			success = true
      DUP1			success = true
      POP			success = true
      PUSH [tag59]		if (balances[msg.sender] >= _value && _value > 0) {...
      JUMP			if (balances[msg.sender] >= _value && _value > 0) {...
    tag56: 
      JUMPDEST		if (balances[msg.sender] >= _value && _value > 0) {...
      PUSH 0		false
      SWAP1			success = false
      POP			success = false
      DUP1			success = false
      POP			success = false
    tag59: 
      JUMPDEST		if (balances[msg.sender] >= _value && _value > 0) {...
      DUP1			success
      SWAP1			return success
      POP			return success
      PUSH [tag54]		return success
      JUMP			return success
    tag54: 
      JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP3			function transfer(address _to, uint256 _value) returns(bool success) {...
      SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
      POP			function transfer(address _to, uint256 _value) returns(bool success) {...
      POP			function transfer(address _to, uint256 _value) returns(bool success) {...
      JUMP	[out]		function transfer(address _to, uint256 _value) returns(bool success) {...
    tag23: 
      JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      PUSH 0		bool success
      DUP2			_value
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[_from]
      DUP7			_from
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_from]
      AND			balances[_from]
      DUP2			balances[_from]
      MSTORE			balances[_from]
      PUSH 20		balances[_from]
      ADD			balances[_from]
      SWAP1			balances[_from]
      DUP2			balances[_from]
      MSTORE			balances[_from]
      PUSH 20		balances[_from]
      ADD			balances[_from]
      PUSH 0		balances[_from]
      SHA3			balances[_from]
      PUSH 0		balances[_from]
      POP			balances[_from]
      SLOAD			balances[_from]
      LT			balances[_from] >= _value
      ISZERO			balances[_from] >= _value
      DUP1			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
      ISZERO			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
      PUSH [tag61]		balances[_from] >= _value && allowed[_from][msg.sender] >= _value
      JUMPI			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
      POP			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
      DUP2			_value
      PUSH 1		allowed
      PUSH 0		allowed
      POP			allowed
      PUSH 0		allowed[_from]
      DUP7			_from
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from]
      AND			allowed[_from]
      DUP2			allowed[_from]
      MSTORE			allowed[_from]
      PUSH 20		allowed[_from]
      ADD			allowed[_from]
      SWAP1			allowed[_from]
      DUP2			allowed[_from]
      MSTORE			allowed[_from]
      PUSH 20		allowed[_from]
      ADD			allowed[_from]
      PUSH 0		allowed[_from]
      SHA3			allowed[_from]
      PUSH 0		allowed[_from]
      POP			allowed[_from]
      PUSH 0		allowed[_from][msg.sender]
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from][msg.sender]
      AND			allowed[_from][msg.sender]
      DUP2			allowed[_from][msg.sender]
      MSTORE			allowed[_from][msg.sender]
      PUSH 20		allowed[_from][msg.sender]
      ADD			allowed[_from][msg.sender]
      SWAP1			allowed[_from][msg.sender]
      DUP2			allowed[_from][msg.sender]
      MSTORE			allowed[_from][msg.sender]
      PUSH 20		allowed[_from][msg.sender]
      ADD			allowed[_from][msg.sender]
      PUSH 0		allowed[_from][msg.sender]
      SHA3			allowed[_from][msg.sender]
      PUSH 0		allowed[_from][msg.sender]
      POP			allowed[_from][msg.sender]
      SLOAD			allowed[_from][msg.sender]
      LT			allowed[_from][msg.sender] >= _value
      ISZERO			allowed[_from][msg.sender] >= _value
    tag61: 
      JUMPDEST		balances[_from] >= _value && allowed[_from][msg.sender] >= _value
      DUP1			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
      ISZERO			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
      PUSH [tag62]		balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
      JUMPI			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
      POP			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
      PUSH 0		0
      DUP3			_value
      GT			_value > 0
    tag62: 
      JUMPDEST		balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
      ISZERO			if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
      PUSH [tag63]		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
      JUMPI			if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
      PUSH [tag64]		addSafely(balances[_to], _value)
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[_to]
      DUP6			_to
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
      AND			balances[_to]
      DUP2			balances[_to]
      MSTORE			balances[_to]
      PUSH 20		balances[_to]
      ADD			balances[_to]
      SWAP1			balances[_to]
      DUP2			balances[_to]
      MSTORE			balances[_to]
      PUSH 20		balances[_to]
      ADD			balances[_to]
      PUSH 0		balances[_to]
      SHA3			balances[_to]
      PUSH 0		balances[_to]
      POP			balances[_to]
      SLOAD			balances[_to]
      DUP4			_value
      PUSH [tag37]		addSafely
      JUMP	[in]		addSafely(balances[_to], _value)
    tag64: 
      JUMPDEST		addSafely(balances[_to], _value)
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[_to]
      DUP6			_to
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
      AND			balances[_to]
      DUP2			balances[_to]
      MSTORE			balances[_to]
      PUSH 20		balances[_to]
      ADD			balances[_to]
      SWAP1			balances[_to]
      DUP2			balances[_to]
      MSTORE			balances[_to]
      PUSH 20		balances[_to]
      ADD			balances[_to]
      PUSH 0		balances[_to]
      SHA3			balances[_to]
      PUSH 0		balances[_to]
      POP			balances[_to] = addSafely(balances[_to], _value)
      DUP2			balances[_to] = addSafely(balances[_to], _value)
      SWAP1			balances[_to] = addSafely(balances[_to], _value)
      SSTORE			balances[_to] = addSafely(balances[_to], _value)
      POP			balances[_to] = addSafely(balances[_to], _value)
      PUSH [tag65]		subtractSafely(balances[_from], _value)
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[_from]
      DUP7			_from
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_from]
      AND			balances[_from]
      DUP2			balances[_from]
      MSTORE			balances[_from]
      PUSH 20		balances[_from]
      ADD			balances[_from]
      SWAP1			balances[_from]
      DUP2			balances[_from]
      MSTORE			balances[_from]
      PUSH 20		balances[_from]
      ADD			balances[_from]
      PUSH 0		balances[_from]
      SHA3			balances[_from]
      PUSH 0		balances[_from]
      POP			balances[_from]
      SLOAD			balances[_from]
      DUP4			_value
      PUSH [tag25]		subtractSafely
      JUMP	[in]		subtractSafely(balances[_from], _value)
    tag65: 
      JUMPDEST		subtractSafely(balances[_from], _value)
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[_from]
      DUP7			_from
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_from]
      AND			balances[_from]
      DUP2			balances[_from]
      MSTORE			balances[_from]
      PUSH 20		balances[_from]
      ADD			balances[_from]
      SWAP1			balances[_from]
      DUP2			balances[_from]
      MSTORE			balances[_from]
      PUSH 20		balances[_from]
      ADD			balances[_from]
      PUSH 0		balances[_from]
      SHA3			balances[_from]
      PUSH 0		balances[_from]
      POP			balances[_from] = subtractSafely(balances[_from], _value)
      DUP2			balances[_from] = subtractSafely(balances[_from], _value)
      SWAP1			balances[_from] = subtractSafely(balances[_from], _value)
      SSTORE			balances[_from] = subtractSafely(balances[_from], _value)
      POP			balances[_from] = subtractSafely(balances[_from], _value)
      PUSH [tag66]		subtractSafely(allowed[_from][msg.sender], _value)
      PUSH 1		allowed
      PUSH 0		allowed
      POP			allowed
      PUSH 0		allowed[_from]
      DUP7			_from
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from]
      AND			allowed[_from]
      DUP2			allowed[_from]
      MSTORE			allowed[_from]
      PUSH 20		allowed[_from]
      ADD			allowed[_from]
      SWAP1			allowed[_from]
      DUP2			allowed[_from]
      MSTORE			allowed[_from]
      PUSH 20		allowed[_from]
      ADD			allowed[_from]
      PUSH 0		allowed[_from]
      SHA3			allowed[_from]
      PUSH 0		allowed[_from]
      POP			allowed[_from]
      PUSH 0		allowed[_from][msg.sender]
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from][msg.sender]
      AND			allowed[_from][msg.sender]
      DUP2			allowed[_from][msg.sender]
      MSTORE			allowed[_from][msg.sender]
      PUSH 20		allowed[_from][msg.sender]
      ADD			allowed[_from][msg.sender]
      SWAP1			allowed[_from][msg.sender]
      DUP2			allowed[_from][msg.sender]
      MSTORE			allowed[_from][msg.sender]
      PUSH 20		allowed[_from][msg.sender]
      ADD			allowed[_from][msg.sender]
      PUSH 0		allowed[_from][msg.sender]
      SHA3			allowed[_from][msg.sender]
      PUSH 0		allowed[_from][msg.sender]
      POP			allowed[_from][msg.sender]
      SLOAD			allowed[_from][msg.sender]
      DUP4			_value
      PUSH [tag25]		subtractSafely
      JUMP	[in]		subtractSafely(allowed[_from][msg.sender], _value)
    tag66: 
      JUMPDEST		subtractSafely(allowed[_from][msg.sender], _value)
      PUSH 1		allowed
      PUSH 0		allowed
      POP			allowed
      PUSH 0		allowed[_from]
      DUP7			_from
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from]
      AND			allowed[_from]
      DUP2			allowed[_from]
      MSTORE			allowed[_from]
      PUSH 20		allowed[_from]
      ADD			allowed[_from]
      SWAP1			allowed[_from]
      DUP2			allowed[_from]
      MSTORE			allowed[_from]
      PUSH 20		allowed[_from]
      ADD			allowed[_from]
      PUSH 0		allowed[_from]
      SHA3			allowed[_from]
      PUSH 0		allowed[_from]
      POP			allowed[_from]
      PUSH 0		allowed[_from][msg.sender]
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from][msg.sender]
      AND			allowed[_from][msg.sender]
      DUP2			allowed[_from][msg.sender]
      MSTORE			allowed[_from][msg.sender]
      PUSH 20		allowed[_from][msg.sender]
      ADD			allowed[_from][msg.sender]
      SWAP1			allowed[_from][msg.sender]
      DUP2			allowed[_from][msg.sender]
      MSTORE			allowed[_from][msg.sender]
      PUSH 20		allowed[_from][msg.sender]
      ADD			allowed[_from][msg.sender]
      PUSH 0		allowed[_from][msg.sender]
      SHA3			allowed[_from][msg.sender]
      PUSH 0		allowed[_from][msg.sender]
      POP			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
      DUP2			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
      SWAP1			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
      SSTORE			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
      POP			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
      DUP3			_to
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(_from, _to, _value)
      AND			Transfer(_from, _to, _value)
      DUP5			_from
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(_from, _to, _value)
      AND			Transfer(_from, _to, _value)
      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF		Transfer(_from, _to, _value)
      DUP5			_value
      PUSH 40		Transfer(_from, _to, _value)
      MLOAD			Transfer(_from, _to, _value)
      DUP1			Transfer(_from, _to, _value)
      DUP3			Transfer(_from, _to, _value)
      DUP2			Transfer(_from, _to, _value)
      MSTORE			Transfer(_from, _to, _value)
      PUSH 20		Transfer(_from, _to, _value)
      ADD			Transfer(_from, _to, _value)
      SWAP2			Transfer(_from, _to, _value)
      POP			Transfer(_from, _to, _value)
      POP			Transfer(_from, _to, _value)
      PUSH 40		Transfer(_from, _to, _value)
      MLOAD			Transfer(_from, _to, _value)
      DUP1			Transfer(_from, _to, _value)
      SWAP2			Transfer(_from, _to, _value)
      SUB			Transfer(_from, _to, _value)
      SWAP1			Transfer(_from, _to, _value)
      LOG3			Transfer(_from, _to, _value)
      PUSH 1		true
      SWAP1			return true
      POP			return true
      PUSH [tag60]		return true
      JUMP			return true
      PUSH [tag67]		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
      JUMP			if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    tag63: 
      JUMPDEST		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
      PUSH 0		false
      SWAP1			return false
      POP			return false
      PUSH [tag60]		return false
      JUMP			return false
    tag67: 
      JUMPDEST		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    tag60: 
      JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP4			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      SWAP3			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
      JUMP	[out]		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    tag17: 
      JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
      PUSH 0		bool success
      DUP2			_value
      PUSH 1		allowed
      PUSH 0		allowed
      POP			allowed
      PUSH 0		allowed[msg.sender]
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[msg.sender]
      AND			allowed[msg.sender]
      DUP2			allowed[msg.sender]
      MSTORE			allowed[msg.sender]
      PUSH 20		allowed[msg.sender]
      ADD			allowed[msg.sender]
      SWAP1			allowed[msg.sender]
      DUP2			allowed[msg.sender]
      MSTORE			allowed[msg.sender]
      PUSH 20		allowed[msg.sender]
      ADD			allowed[msg.sender]
      PUSH 0		allowed[msg.sender]
      SHA3			allowed[msg.sender]
      PUSH 0		allowed[msg.sender]
      POP			allowed[msg.sender]
      PUSH 0		allowed[msg.sender][_spender]
      DUP6			_spender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[msg.sender][_spender]
      AND			allowed[msg.sender][_spender]
      DUP2			allowed[msg.sender][_spender]
      MSTORE			allowed[msg.sender][_spender]
      PUSH 20		allowed[msg.sender][_spender]
      ADD			allowed[msg.sender][_spender]
      SWAP1			allowed[msg.sender][_spender]
      DUP2			allowed[msg.sender][_spender]
      MSTORE			allowed[msg.sender][_spender]
      PUSH 20		allowed[msg.sender][_spender]
      ADD			allowed[msg.sender][_spender]
      PUSH 0		allowed[msg.sender][_spender]
      SHA3			allowed[msg.sender][_spender]
      PUSH 0		allowed[msg.sender][_spender]
      POP			allowed[msg.sender][_spender] = _value
      DUP2			allowed[msg.sender][_spender] = _value
      SWAP1			allowed[msg.sender][_spender] = _value
      SSTORE			allowed[msg.sender][_spender] = _value
      POP			allowed[msg.sender][_spender] = _value
      DUP3			_spender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Approval(msg.sender, _spender, _value)
      AND			Approval(msg.sender, _spender, _value)
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Approval(msg.sender, _spender, _value)
      AND			Approval(msg.sender, _spender, _value)
      PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925		Approval(msg.sender, _spender, _value)
      DUP5			_value
      PUSH 40		Approval(msg.sender, _spender, _value)
      MLOAD			Approval(msg.sender, _spender, _value)
      DUP1			Approval(msg.sender, _spender, _value)
      DUP3			Approval(msg.sender, _spender, _value)
      DUP2			Approval(msg.sender, _spender, _value)
      MSTORE			Approval(msg.sender, _spender, _value)
      PUSH 20		Approval(msg.sender, _spender, _value)
      ADD			Approval(msg.sender, _spender, _value)
      SWAP2			Approval(msg.sender, _spender, _value)
      POP			Approval(msg.sender, _spender, _value)
      POP			Approval(msg.sender, _spender, _value)
      PUSH 40		Approval(msg.sender, _spender, _value)
      MLOAD			Approval(msg.sender, _spender, _value)
      DUP1			Approval(msg.sender, _spender, _value)
      SWAP2			Approval(msg.sender, _spender, _value)
      SUB			Approval(msg.sender, _spender, _value)
      SWAP1			Approval(msg.sender, _spender, _value)
      LOG3			Approval(msg.sender, _spender, _value)
      PUSH 1		true
      SWAP1			success = true
      POP			success = true
      DUP1			success = true
      POP			success = true
      DUP1			success
      SWAP1			return success
      POP			return success
      PUSH [tag68]		return success
      JUMP			return success
    tag68: 
      JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP3			function approve(address _spender, uint256 _value) returns(bool success) {...
      SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
      POP			function approve(address _spender, uint256 _value) returns(bool success) {...
      POP			function approve(address _spender, uint256 _value) returns(bool success) {...
      JUMP	[out]		function approve(address _spender, uint256 _value) returns(bool success) {...
    tag41: 
      JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      PUSH 0		uint256 remaining
      PUSH 1		allowed
      PUSH 0		allowed
      POP			allowed
      PUSH 0		allowed[_owner]
      DUP5			_owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_owner]
      AND			allowed[_owner]
      DUP2			allowed[_owner]
      MSTORE			allowed[_owner]
      PUSH 20		allowed[_owner]
      ADD			allowed[_owner]
      SWAP1			allowed[_owner]
      DUP2			allowed[_owner]
      MSTORE			allowed[_owner]
      PUSH 20		allowed[_owner]
      ADD			allowed[_owner]
      PUSH 0		allowed[_owner]
      SHA3			allowed[_owner]
      PUSH 0		allowed[_owner]
      POP			allowed[_owner]
      PUSH 0		allowed[_owner][_spender]
      DUP4			_spender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_owner][_spender]
      AND			allowed[_owner][_spender]
      DUP2			allowed[_owner][_spender]
      MSTORE			allowed[_owner][_spender]
      PUSH 20		allowed[_owner][_spender]
      ADD			allowed[_owner][_spender]
      SWAP1			allowed[_owner][_spender]
      DUP2			allowed[_owner][_spender]
      MSTORE			allowed[_owner][_spender]
      PUSH 20		allowed[_owner][_spender]
      ADD			allowed[_owner][_spender]
      PUSH 0		allowed[_owner][_spender]
      SHA3			allowed[_owner][_spender]
      PUSH 0		allowed[_owner][_spender]
      POP			allowed[_owner][_spender]
      SLOAD			allowed[_owner][_spender]
      SWAP1			remaining = allowed[_owner][_spender]
      POP			remaining = allowed[_owner][_spender]
      DUP1			remaining = allowed[_owner][_spender]
      POP			remaining = allowed[_owner][_spender]
      DUP1			remaining
      SWAP1			return remaining
      POP			return remaining
      PUSH [tag69]		return remaining
      JUMP			return remaining
    tag69: 
      JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP3			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
      JUMP	[out]		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    tag27: 
      JUMPDEST		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      PUSH 0		bool success
      PUSH 2		owner
      PUSH 0		owner
      SWAP1			owner
      SLOAD			owner
      SWAP1			owner
      PUSH 100		owner
      EXP			owner
      SWAP1			owner
      DIV			owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
      AND			owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
      AND			msg.sender != owner
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
      AND			msg.sender != owner
      EQ			msg.sender != owner
      ISZERO			msg.sender != owner
      ISZERO			if (msg.sender != owner) {...
      PUSH [tag71]		if (msg.sender != owner) {...
      JUMPI			if (msg.sender != owner) {...
      PUSH [ErrorTag]		throw
      JUMP			throw
      PUSH [tag72]		if (msg.sender != owner) {...
      JUMP			if (msg.sender != owner) {...
    tag71: 
      JUMPDEST		if (msg.sender != owner) {...
      PUSH [tag73]		addSafely(totalSupply, _amount)
      PUSH 3		totalSupply
      PUSH 0		totalSupply
      POP			totalSupply
      SLOAD			totalSupply
      DUP4			_amount
      PUSH [tag37]		addSafely
      JUMP	[in]		addSafely(totalSupply, _amount)
    tag73: 
      JUMPDEST		addSafely(totalSupply, _amount)
      PUSH 3		totalSupply
      PUSH 0		totalSupply
      POP			totalSupply = addSafely(totalSupply, _amount)
      DUP2			totalSupply = addSafely(totalSupply, _amount)
      SWAP1			totalSupply = addSafely(totalSupply, _amount)
      SSTORE			totalSupply = addSafely(totalSupply, _amount)
      POP			totalSupply = addSafely(totalSupply, _amount)
      PUSH [tag74]		addSafely(balances[_owner], _amount)
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[_owner]
      DUP6			_owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_owner]
      AND			balances[_owner]
      DUP2			balances[_owner]
      MSTORE			balances[_owner]
      PUSH 20		balances[_owner]
      ADD			balances[_owner]
      SWAP1			balances[_owner]
      DUP2			balances[_owner]
      MSTORE			balances[_owner]
      PUSH 20		balances[_owner]
      ADD			balances[_owner]
      PUSH 0		balances[_owner]
      SHA3			balances[_owner]
      PUSH 0		balances[_owner]
      POP			balances[_owner]
      SLOAD			balances[_owner]
      DUP4			_amount
      PUSH [tag37]		addSafely
      JUMP	[in]		addSafely(balances[_owner], _amount)
    tag74: 
      JUMPDEST		addSafely(balances[_owner], _amount)
      PUSH 0		balances
      PUSH 0		balances
      POP			balances
      PUSH 0		balances[_owner]
      DUP6			_owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_owner]
      AND			balances[_owner]
      DUP2			balances[_owner]
      MSTORE			balances[_owner]
      PUSH 20		balances[_owner]
      ADD			balances[_owner]
      SWAP1			balances[_owner]
      DUP2			balances[_owner]
      MSTORE			balances[_owner]
      PUSH 20		balances[_owner]
      ADD			balances[_owner]
      PUSH 0		balances[_owner]
      SHA3			balances[_owner]
      PUSH 0		balances[_owner]
      POP			balances[_owner] = addSafely(balances[_owner], _amount)
      DUP2			balances[_owner] = addSafely(balances[_owner], _amount)
      SWAP1			balances[_owner] = addSafely(balances[_owner], _amount)
      SSTORE			balances[_owner] = addSafely(balances[_owner], _amount)
      POP			balances[_owner] = addSafely(balances[_owner], _amount)
      DUP2			_amount
      DUP4			_owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Mint(_owner, _amount)
      AND			Mint(_owner, _amount)
      PUSH F6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885		Mint(_owner, _amount)
      PUSH 40		Mint(_owner, _amount)
      MLOAD			Mint(_owner, _amount)
      DUP1			Mint(_owner, _amount)
      SWAP1			Mint(_owner, _amount)
      POP			Mint(_owner, _amount)
      PUSH 40		Mint(_owner, _amount)
      MLOAD			Mint(_owner, _amount)
      DUP1			Mint(_owner, _amount)
      SWAP2			Mint(_owner, _amount)
      SUB			Mint(_owner, _amount)
      SWAP1			Mint(_owner, _amount)
      LOG3			Mint(_owner, _amount)
      PUSH 1		true
      SWAP1			return true
      POP			return true
      PUSH [tag70]		return true
      JUMP			return true
    tag72: 
      JUMPDEST		if (msg.sender != owner) {...
    tag70: 
      JUMPDEST		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP3			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      SWAP2			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      POP			function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
      JUMP	[out]		function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {...
    tag19: 
      JUMPDEST		function setOwner(address _owner) ifOwner returns(bool success) {...
      PUSH 0		bool success
      PUSH 2		owner
      PUSH 0		owner
      SWAP1			owner
      SLOAD			owner
      SWAP1			owner
      PUSH 100		owner
      EXP			owner
      SWAP1			owner
      DIV			owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
      AND			owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
      AND			msg.sender != owner
      CALLER			msg.sender
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
      AND			msg.sender != owner
      EQ			msg.sender != owner
      ISZERO			msg.sender != owner
      ISZERO			if (msg.sender != owner) {...
      PUSH [tag76]		if (msg.sender != owner) {...
      JUMPI			if (msg.sender != owner) {...
      PUSH [ErrorTag]		throw
      JUMP			throw
      PUSH [tag77]		if (msg.sender != owner) {...
      JUMP			if (msg.sender != owner) {...
    tag76: 
      JUMPDEST		if (msg.sender != owner) {...
      DUP2			_owner
      PUSH 2		owner
      PUSH 0		owner
      PUSH 100		owner = _owner
      EXP			owner = _owner
      DUP2			owner = _owner
      SLOAD			owner = _owner
      DUP2			owner = _owner
      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = _owner
      MUL			owner = _owner
      NOT			owner = _owner
      AND			owner = _owner
      SWAP1			owner = _owner
      DUP4			owner = _owner
      MUL			owner = _owner
      OR			owner = _owner
      SWAP1			owner = _owner
      SSTORE			owner = _owner
      POP			owner = _owner
      PUSH 1		true
      SWAP1			return true
      POP			return true
      PUSH [tag75]		return true
      JUMP			return true
    tag77: 
      JUMPDEST		if (msg.sender != owner) {...
    tag75: 
      JUMPDEST		function setOwner(address _owner) ifOwner returns(bool success) {...
      SWAP2			function setOwner(address _owner) ifOwner returns(bool success) {...
      SWAP1			function setOwner(address _owner) ifOwner returns(bool success) {...
      POP			function setOwner(address _owner) ifOwner returns(bool success) {...
      JUMP	[out]		function setOwner(address _owner) ifOwner returns(bool success) {...
  1: 
  .code:
    PUSH 60		contract Token {...
    PUSH 40		contract Token {...
    MSTORE			contract Token {...
    CALLDATASIZE			contract Token {...
    ISZERO			contract Token {...
    PUSH [tag1]		contract Token {...
    JUMPI			contract Token {...
    PUSH 0		contract Token {...
    CALLDATALOAD			contract Token {...
    PUSH 100000000000000000000000000000000000000000000000000000000		contract Token {...
    SWAP1			contract Token {...
    DIV			contract Token {...
    DUP1			contract Token {...
    PUSH 95EA7B3		contract Token {...
    EQ			contract Token {...
    PUSH [tag2]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 13AF4035		contract Token {...
    EQ			contract Token {...
    PUSH [tag3]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 18160DDD		contract Token {...
    EQ			contract Token {...
    PUSH [tag4]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 23B872DD		contract Token {...
    EQ			contract Token {...
    PUSH [tag5]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 2B297F9E		contract Token {...
    EQ			contract Token {...
    PUSH [tag6]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 3416F9D4		contract Token {...
    EQ			contract Token {...
    PUSH [tag7]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 3F2965F0		contract Token {...
    EQ			contract Token {...
    PUSH [tag8]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 40C10F19		contract Token {...
    EQ			contract Token {...
    PUSH [tag9]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 4162169F		contract Token {...
    EQ			contract Token {...
    PUSH [tag10]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 4230BB10		contract Token {...
    EQ			contract Token {...
    PUSH [tag11]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 4E30A66C		contract Token {...
    EQ			contract Token {...
    PUSH [tag12]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 6637B882		contract Token {...
    EQ			contract Token {...
    PUSH [tag13]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 70A08231		contract Token {...
    EQ			contract Token {...
    PUSH [tag14]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 79502C55		contract Token {...
    EQ			contract Token {...
    PUSH [tag15]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH 8DA5CB5B		contract Token {...
    EQ			contract Token {...
    PUSH [tag16]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH A9059CBB		contract Token {...
    EQ			contract Token {...
    PUSH [tag17]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH AC900C2D		contract Token {...
    EQ			contract Token {...
    PUSH [tag18]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH C74C251F		contract Token {...
    EQ			contract Token {...
    PUSH [tag19]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH CF309012		contract Token {...
    EQ			contract Token {...
    PUSH [tag20]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH DD62ED3E		contract Token {...
    EQ			contract Token {...
    PUSH [tag21]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH E42BFF66		contract Token {...
    EQ			contract Token {...
    PUSH [tag22]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH E74B9D11		contract Token {...
    EQ			contract Token {...
    PUSH [tag23]		contract Token {...
    JUMPI			contract Token {...
    DUP1			contract Token {...
    PUSH EE95FEAF		contract Token {...
    EQ			contract Token {...
    PUSH [tag24]		contract Token {...
    JUMPI			contract Token {...
    PUSH [tag1]		contract Token {...
    JUMP			contract Token {...
  tag1: 
    JUMPDEST		contract Token {...
    STOP			contract Token {...
  tag2: 
    JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH [tag25]		function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 4		function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 20		function approve(address _spender, uint256 _value) returns(bool success) {...
    ADD			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 20		function approve(address _spender, uint256 _value) returns(bool success) {...
    ADD			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH [tag26]		function approve(address _spender, uint256 _value) returns(bool success) {...
    JUMP			function approve(address _spender, uint256 _value) returns(bool success) {...
  tag25: 
    JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 40		function approve(address _spender, uint256 _value) returns(bool success) {...
    MLOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP3			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    MSTORE			function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 20		function approve(address _spender, uint256 _value) returns(bool success) {...
    ADD			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 40		function approve(address _spender, uint256 _value) returns(bool success) {...
    MLOAD			function approve(address _spender, uint256 _value) returns(bool success) {...
    DUP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    SUB			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP1			function approve(address _spender, uint256 _value) returns(bool success) {...
    RETURN			function approve(address _spender, uint256 _value) returns(bool success) {...
  tag3: 
    JUMPDEST		function setOwner(address _newowner) ifDao returns(bool success) {...
    PUSH [tag27]		function setOwner(address _newowner) ifDao returns(bool success) {...
    PUSH 4		function setOwner(address _newowner) ifDao returns(bool success) {...
    DUP1			function setOwner(address _newowner) ifDao returns(bool success) {...
    DUP1			function setOwner(address _newowner) ifDao returns(bool success) {...
    CALLDATALOAD			function setOwner(address _newowner) ifDao returns(bool success) {...
    SWAP1			function setOwner(address _newowner) ifDao returns(bool success) {...
    PUSH 20		function setOwner(address _newowner) ifDao returns(bool success) {...
    ADD			function setOwner(address _newowner) ifDao returns(bool success) {...
    SWAP1			function setOwner(address _newowner) ifDao returns(bool success) {...
    SWAP2			function setOwner(address _newowner) ifDao returns(bool success) {...
    SWAP1			function setOwner(address _newowner) ifDao returns(bool success) {...
    POP			function setOwner(address _newowner) ifDao returns(bool success) {...
    POP			function setOwner(address _newowner) ifDao returns(bool success) {...
    PUSH [tag28]		function setOwner(address _newowner) ifDao returns(bool success) {...
    JUMP			function setOwner(address _newowner) ifDao returns(bool success) {...
  tag27: 
    JUMPDEST		function setOwner(address _newowner) ifDao returns(bool success) {...
    PUSH 40		function setOwner(address _newowner) ifDao returns(bool success) {...
    MLOAD			function setOwner(address _newowner) ifDao returns(bool success) {...
    DUP1			function setOwner(address _newowner) ifDao returns(bool success) {...
    DUP3			function setOwner(address _newowner) ifDao returns(bool success) {...
    DUP2			function setOwner(address _newowner) ifDao returns(bool success) {...
    MSTORE			function setOwner(address _newowner) ifDao returns(bool success) {...
    PUSH 20		function setOwner(address _newowner) ifDao returns(bool success) {...
    ADD			function setOwner(address _newowner) ifDao returns(bool success) {...
    SWAP2			function setOwner(address _newowner) ifDao returns(bool success) {...
    POP			function setOwner(address _newowner) ifDao returns(bool success) {...
    POP			function setOwner(address _newowner) ifDao returns(bool success) {...
    PUSH 40		function setOwner(address _newowner) ifDao returns(bool success) {...
    MLOAD			function setOwner(address _newowner) ifDao returns(bool success) {...
    DUP1			function setOwner(address _newowner) ifDao returns(bool success) {...
    SWAP2			function setOwner(address _newowner) ifDao returns(bool success) {...
    SUB			function setOwner(address _newowner) ifDao returns(bool success) {...
    SWAP1			function setOwner(address _newowner) ifDao returns(bool success) {...
    RETURN			function setOwner(address _newowner) ifDao returns(bool success) {...
  tag4: 
    JUMPDEST		uint256 public totalSupply
    PUSH [tag29]		uint256 public totalSupply
    PUSH 4		uint256 public totalSupply
    DUP1			uint256 public totalSupply
    POP			uint256 public totalSupply
    POP			uint256 public totalSupply
    PUSH [tag30]		uint256 public totalSupply
    JUMP			uint256 public totalSupply
  tag29: 
    JUMPDEST		uint256 public totalSupply
    PUSH 40		uint256 public totalSupply
    MLOAD			uint256 public totalSupply
    DUP1			uint256 public totalSupply
    DUP3			uint256 public totalSupply
    DUP2			uint256 public totalSupply
    MSTORE			uint256 public totalSupply
    PUSH 20		uint256 public totalSupply
    ADD			uint256 public totalSupply
    SWAP2			uint256 public totalSupply
    POP			uint256 public totalSupply
    POP			uint256 public totalSupply
    PUSH 40		uint256 public totalSupply
    MLOAD			uint256 public totalSupply
    DUP1			uint256 public totalSupply
    SWAP2			uint256 public totalSupply
    SUB			uint256 public totalSupply
    SWAP1			uint256 public totalSupply
    RETURN			uint256 public totalSupply
  tag5: 
    JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH [tag31]		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 4		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH [tag32]		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    JUMP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
  tag31: 
    JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 40		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    MLOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP3			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    MSTORE			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    ADD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 40		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    MLOAD			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    DUP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SUB			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    RETURN			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
  tag6: 
    JUMPDEST		function registerDao(address _dao) ifOwner returns(bool success) {...
    PUSH [tag33]		function registerDao(address _dao) ifOwner returns(bool success) {...
    PUSH 4		function registerDao(address _dao) ifOwner returns(bool success) {...
    DUP1			function registerDao(address _dao) ifOwner returns(bool success) {...
    DUP1			function registerDao(address _dao) ifOwner returns(bool success) {...
    CALLDATALOAD			function registerDao(address _dao) ifOwner returns(bool success) {...
    SWAP1			function registerDao(address _dao) ifOwner returns(bool success) {...
    PUSH 20		function registerDao(address _dao) ifOwner returns(bool success) {...
    ADD			function registerDao(address _dao) ifOwner returns(bool success) {...
    SWAP1			function registerDao(address _dao) ifOwner returns(bool success) {...
    SWAP2			function registerDao(address _dao) ifOwner returns(bool success) {...
    SWAP1			function registerDao(address _dao) ifOwner returns(bool success) {...
    POP			function registerDao(address _dao) ifOwner returns(bool success) {...
    POP			function registerDao(address _dao) ifOwner returns(bool success) {...
    PUSH [tag34]		function registerDao(address _dao) ifOwner returns(bool success) {...
    JUMP			function registerDao(address _dao) ifOwner returns(bool success) {...
  tag33: 
    JUMPDEST		function registerDao(address _dao) ifOwner returns(bool success) {...
    PUSH 40		function registerDao(address _dao) ifOwner returns(bool success) {...
    MLOAD			function registerDao(address _dao) ifOwner returns(bool success) {...
    DUP1			function registerDao(address _dao) ifOwner returns(bool success) {...
    DUP3			function registerDao(address _dao) ifOwner returns(bool success) {...
    DUP2			function registerDao(address _dao) ifOwner returns(bool success) {...
    MSTORE			function registerDao(address _dao) ifOwner returns(bool success) {...
    PUSH 20		function registerDao(address _dao) ifOwner returns(bool success) {...
    ADD			function registerDao(address _dao) ifOwner returns(bool success) {...
    SWAP2			function registerDao(address _dao) ifOwner returns(bool success) {...
    POP			function registerDao(address _dao) ifOwner returns(bool success) {...
    POP			function registerDao(address _dao) ifOwner returns(bool success) {...
    PUSH 40		function registerDao(address _dao) ifOwner returns(bool success) {...
    MLOAD			function registerDao(address _dao) ifOwner returns(bool success) {...
    DUP1			function registerDao(address _dao) ifOwner returns(bool success) {...
    SWAP2			function registerDao(address _dao) ifOwner returns(bool success) {...
    SUB			function registerDao(address _dao) ifOwner returns(bool success) {...
    SWAP1			function registerDao(address _dao) ifOwner returns(bool success) {...
    RETURN			function registerDao(address _dao) ifOwner returns(bool success) {...
  tag7: 
    JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH [tag35]		function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 4		function subtractSafely(uint a, uint b) returns(uint) {...
    DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
    CALLDATALOAD			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 20		function subtractSafely(uint a, uint b) returns(uint) {...
    ADD			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
    CALLDATALOAD			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 20		function subtractSafely(uint a, uint b) returns(uint) {...
    ADD			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH [tag36]		function subtractSafely(uint a, uint b) returns(uint) {...
    JUMP			function subtractSafely(uint a, uint b) returns(uint) {...
  tag35: 
    JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 40		function subtractSafely(uint a, uint b) returns(uint) {...
    MLOAD			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP3			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP2			function subtractSafely(uint a, uint b) returns(uint) {...
    MSTORE			function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 20		function subtractSafely(uint a, uint b) returns(uint) {...
    ADD			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 40		function subtractSafely(uint a, uint b) returns(uint) {...
    MLOAD			function subtractSafely(uint a, uint b) returns(uint) {...
    DUP1			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
    SUB			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP1			function subtractSafely(uint a, uint b) returns(uint) {...
    RETURN			function subtractSafely(uint a, uint b) returns(uint) {...
  tag8: 
    JUMPDEST		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH [tag37]		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 4		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    DUP1			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    DUP1			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    CALLDATALOAD			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP1			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 20		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    ADD			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP1			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP2			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP1			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    POP			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    POP			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH [tag38]		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    JUMP			function registerSeller(address _tokensales) ifDao returns(bool success) {...
  tag37: 
    JUMPDEST		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 40		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    MLOAD			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    DUP1			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    DUP3			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    DUP2			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    MSTORE			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 20		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    ADD			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP2			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    POP			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    POP			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 40		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    MLOAD			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    DUP1			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP2			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    SUB			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP1			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    RETURN			function registerSeller(address _tokensales) ifDao returns(bool success) {...
  tag9: 
    JUMPDEST		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH [tag39]		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 4		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    CALLDATALOAD			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 20		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    ADD			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP2			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    CALLDATALOAD			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 20		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    ADD			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP2			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH [tag40]		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    JUMP			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
  tag39: 
    JUMPDEST		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 40		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    MLOAD			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP3			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP2			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    MSTORE			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 20		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    ADD			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP2			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 40		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    MLOAD			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP2			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SUB			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    RETURN			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
  tag10: 
    JUMPDEST		address public dao
    PUSH [tag41]		address public dao
    PUSH 4		address public dao
    DUP1			address public dao
    POP			address public dao
    POP			address public dao
    PUSH [tag42]		address public dao
    JUMP			address public dao
  tag41: 
    JUMPDEST		address public dao
    PUSH 40		address public dao
    MLOAD			address public dao
    DUP1			address public dao
    DUP3			address public dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public dao
    AND			address public dao
    DUP2			address public dao
    MSTORE			address public dao
    PUSH 20		address public dao
    ADD			address public dao
    SWAP2			address public dao
    POP			address public dao
    POP			address public dao
    PUSH 40		address public dao
    MLOAD			address public dao
    DUP1			address public dao
    SWAP2			address public dao
    SUB			address public dao
    SWAP1			address public dao
    RETURN			address public dao
  tag11: 
    JUMPDEST		address public badgeLedger
    PUSH [tag43]		address public badgeLedger
    PUSH 4		address public badgeLedger
    DUP1			address public badgeLedger
    POP			address public badgeLedger
    POP			address public badgeLedger
    PUSH [tag44]		address public badgeLedger
    JUMP			address public badgeLedger
  tag43: 
    JUMPDEST		address public badgeLedger
    PUSH 40		address public badgeLedger
    MLOAD			address public badgeLedger
    DUP1			address public badgeLedger
    DUP3			address public badgeLedger
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public badgeLedger
    AND			address public badgeLedger
    DUP2			address public badgeLedger
    MSTORE			address public badgeLedger
    PUSH 20		address public badgeLedger
    ADD			address public badgeLedger
    SWAP2			address public badgeLedger
    POP			address public badgeLedger
    POP			address public badgeLedger
    PUSH 40		address public badgeLedger
    MLOAD			address public badgeLedger
    DUP1			address public badgeLedger
    SWAP2			address public badgeLedger
    SUB			address public badgeLedger
    SWAP1			address public badgeLedger
    RETURN			address public badgeLedger
  tag12: 
    JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH [tag45]		function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 4		function safeToAdd(uint a, uint b) returns(bool) {...
    DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
    CALLDATALOAD			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToAdd(uint a, uint b) returns(bool) {...
    ADD			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
    CALLDATALOAD			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToAdd(uint a, uint b) returns(bool) {...
    ADD			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH [tag46]		function safeToAdd(uint a, uint b) returns(bool) {...
    JUMP			function safeToAdd(uint a, uint b) returns(bool) {...
  tag45: 
    JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 40		function safeToAdd(uint a, uint b) returns(bool) {...
    MLOAD			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP3			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP2			function safeToAdd(uint a, uint b) returns(bool) {...
    MSTORE			function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToAdd(uint a, uint b) returns(bool) {...
    ADD			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 40		function safeToAdd(uint a, uint b) returns(bool) {...
    MLOAD			function safeToAdd(uint a, uint b) returns(bool) {...
    DUP1			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
    SUB			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP1			function safeToAdd(uint a, uint b) returns(bool) {...
    RETURN			function safeToAdd(uint a, uint b) returns(bool) {...
  tag13: 
    JUMPDEST		function setDao(address _newdao) ifDao returns(bool success) {...
    PUSH [tag47]		function setDao(address _newdao) ifDao returns(bool success) {...
    PUSH 4		function setDao(address _newdao) ifDao returns(bool success) {...
    DUP1			function setDao(address _newdao) ifDao returns(bool success) {...
    DUP1			function setDao(address _newdao) ifDao returns(bool success) {...
    CALLDATALOAD			function setDao(address _newdao) ifDao returns(bool success) {...
    SWAP1			function setDao(address _newdao) ifDao returns(bool success) {...
    PUSH 20		function setDao(address _newdao) ifDao returns(bool success) {...
    ADD			function setDao(address _newdao) ifDao returns(bool success) {...
    SWAP1			function setDao(address _newdao) ifDao returns(bool success) {...
    SWAP2			function setDao(address _newdao) ifDao returns(bool success) {...
    SWAP1			function setDao(address _newdao) ifDao returns(bool success) {...
    POP			function setDao(address _newdao) ifDao returns(bool success) {...
    POP			function setDao(address _newdao) ifDao returns(bool success) {...
    PUSH [tag48]		function setDao(address _newdao) ifDao returns(bool success) {...
    JUMP			function setDao(address _newdao) ifDao returns(bool success) {...
  tag47: 
    JUMPDEST		function setDao(address _newdao) ifDao returns(bool success) {...
    PUSH 40		function setDao(address _newdao) ifDao returns(bool success) {...
    MLOAD			function setDao(address _newdao) ifDao returns(bool success) {...
    DUP1			function setDao(address _newdao) ifDao returns(bool success) {...
    DUP3			function setDao(address _newdao) ifDao returns(bool success) {...
    DUP2			function setDao(address _newdao) ifDao returns(bool success) {...
    MSTORE			function setDao(address _newdao) ifDao returns(bool success) {...
    PUSH 20		function setDao(address _newdao) ifDao returns(bool success) {...
    ADD			function setDao(address _newdao) ifDao returns(bool success) {...
    SWAP2			function setDao(address _newdao) ifDao returns(bool success) {...
    POP			function setDao(address _newdao) ifDao returns(bool success) {...
    POP			function setDao(address _newdao) ifDao returns(bool success) {...
    PUSH 40		function setDao(address _newdao) ifDao returns(bool success) {...
    MLOAD			function setDao(address _newdao) ifDao returns(bool success) {...
    DUP1			function setDao(address _newdao) ifDao returns(bool success) {...
    SWAP2			function setDao(address _newdao) ifDao returns(bool success) {...
    SUB			function setDao(address _newdao) ifDao returns(bool success) {...
    SWAP1			function setDao(address _newdao) ifDao returns(bool success) {...
    RETURN			function setDao(address _newdao) ifDao returns(bool success) {...
  tag14: 
    JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH [tag49]		function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 4		function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    CALLDATALOAD			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 20		function balanceOf(address _owner) constant returns(uint256 balance) {...
    ADD			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH [tag50]		function balanceOf(address _owner) constant returns(uint256 balance) {...
    JUMP			function balanceOf(address _owner) constant returns(uint256 balance) {...
  tag49: 
    JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 40		function balanceOf(address _owner) constant returns(uint256 balance) {...
    MLOAD			function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP3			function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
    MSTORE			function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 20		function balanceOf(address _owner) constant returns(uint256 balance) {...
    ADD			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
    POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 40		function balanceOf(address _owner) constant returns(uint256 balance) {...
    MLOAD			function balanceOf(address _owner) constant returns(uint256 balance) {...
    DUP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SUB			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    RETURN			function balanceOf(address _owner) constant returns(uint256 balance) {...
  tag15: 
    JUMPDEST		address public config
    PUSH [tag51]		address public config
    PUSH 4		address public config
    DUP1			address public config
    POP			address public config
    POP			address public config
    PUSH [tag52]		address public config
    JUMP			address public config
  tag51: 
    JUMPDEST		address public config
    PUSH 40		address public config
    MLOAD			address public config
    DUP1			address public config
    DUP3			address public config
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public config
    AND			address public config
    DUP2			address public config
    MSTORE			address public config
    PUSH 20		address public config
    ADD			address public config
    SWAP2			address public config
    POP			address public config
    POP			address public config
    PUSH 40		address public config
    MLOAD			address public config
    DUP1			address public config
    SWAP2			address public config
    SUB			address public config
    SWAP1			address public config
    RETURN			address public config
  tag16: 
    JUMPDEST		address public owner
    PUSH [tag53]		address public owner
    PUSH 4		address public owner
    DUP1			address public owner
    POP			address public owner
    POP			address public owner
    PUSH [tag54]		address public owner
    JUMP			address public owner
  tag53: 
    JUMPDEST		address public owner
    PUSH 40		address public owner
    MLOAD			address public owner
    DUP1			address public owner
    DUP3			address public owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
    AND			address public owner
    DUP2			address public owner
    MSTORE			address public owner
    PUSH 20		address public owner
    ADD			address public owner
    SWAP2			address public owner
    POP			address public owner
    POP			address public owner
    PUSH 40		address public owner
    MLOAD			address public owner
    DUP1			address public owner
    SWAP2			address public owner
    SUB			address public owner
    SWAP1			address public owner
    RETURN			address public owner
  tag17: 
    JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH [tag55]		function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 4		function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transfer(address _to, uint256 _value) returns(bool success) {...
    ADD			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    CALLDATALOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transfer(address _to, uint256 _value) returns(bool success) {...
    ADD			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH [tag56]		function transfer(address _to, uint256 _value) returns(bool success) {...
    JUMP			function transfer(address _to, uint256 _value) returns(bool success) {...
  tag55: 
    JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 40		function transfer(address _to, uint256 _value) returns(bool success) {...
    MLOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP3			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    MSTORE			function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 20		function transfer(address _to, uint256 _value) returns(bool success) {...
    ADD			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 40		function transfer(address _to, uint256 _value) returns(bool success) {...
    MLOAD			function transfer(address _to, uint256 _value) returns(bool success) {...
    DUP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    SUB			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP1			function transfer(address _to, uint256 _value) returns(bool success) {...
    RETURN			function transfer(address _to, uint256 _value) returns(bool success) {...
  tag18: 
    JUMPDEST		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH [tag57]		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 4		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    DUP1			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    DUP1			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    CALLDATALOAD			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP1			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 20		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    ADD			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP1			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP2			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP1			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    POP			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    POP			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH [tag58]		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    JUMP			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
  tag57: 
    JUMPDEST		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 40		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    MLOAD			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    DUP1			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    DUP3			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    DUP2			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    MSTORE			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 20		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    ADD			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP2			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    POP			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    POP			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 40		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    MLOAD			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    DUP1			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP2			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    SUB			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP1			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    RETURN			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
  tag19: 
    JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
    PUSH [tag59]		function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 4		function addSafely(uint a, uint b) returns(uint result) {...
    DUP1			function addSafely(uint a, uint b) returns(uint result) {...
    DUP1			function addSafely(uint a, uint b) returns(uint result) {...
    CALLDATALOAD			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 20		function addSafely(uint a, uint b) returns(uint result) {...
    ADD			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    DUP1			function addSafely(uint a, uint b) returns(uint result) {...
    CALLDATALOAD			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 20		function addSafely(uint a, uint b) returns(uint result) {...
    ADD			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    PUSH [tag60]		function addSafely(uint a, uint b) returns(uint result) {...
    JUMP			function addSafely(uint a, uint b) returns(uint result) {...
  tag59: 
    JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 40		function addSafely(uint a, uint b) returns(uint result) {...
    MLOAD			function addSafely(uint a, uint b) returns(uint result) {...
    DUP1			function addSafely(uint a, uint b) returns(uint result) {...
    DUP3			function addSafely(uint a, uint b) returns(uint result) {...
    DUP2			function addSafely(uint a, uint b) returns(uint result) {...
    MSTORE			function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 20		function addSafely(uint a, uint b) returns(uint result) {...
    ADD			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 40		function addSafely(uint a, uint b) returns(uint result) {...
    MLOAD			function addSafely(uint a, uint b) returns(uint result) {...
    DUP1			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
    SUB			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP1			function addSafely(uint a, uint b) returns(uint result) {...
    RETURN			function addSafely(uint a, uint b) returns(uint result) {...
  tag20: 
    JUMPDEST		bool public locked
    PUSH [tag61]		bool public locked
    PUSH 4		bool public locked
    DUP1			bool public locked
    POP			bool public locked
    POP			bool public locked
    PUSH [tag62]		bool public locked
    JUMP			bool public locked
  tag61: 
    JUMPDEST		bool public locked
    PUSH 40		bool public locked
    MLOAD			bool public locked
    DUP1			bool public locked
    DUP3			bool public locked
    DUP2			bool public locked
    MSTORE			bool public locked
    PUSH 20		bool public locked
    ADD			bool public locked
    SWAP2			bool public locked
    POP			bool public locked
    POP			bool public locked
    PUSH 40		bool public locked
    MLOAD			bool public locked
    DUP1			bool public locked
    SWAP2			bool public locked
    SUB			bool public locked
    SWAP1			bool public locked
    RETURN			bool public locked
  tag21: 
    JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH [tag63]		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 4		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    CALLDATALOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 20		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    ADD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    CALLDATALOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 20		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    ADD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH [tag64]		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    JUMP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
  tag63: 
    JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 40		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    MLOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP3			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    MSTORE			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 20		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    ADD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 40		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    MLOAD			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    DUP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SUB			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP1			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    RETURN			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
  tag22: 
    JUMPDEST		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH [tag65]		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 4		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    CALLDATALOAD			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 20		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    ADD			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP2			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    CALLDATALOAD			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 20		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    ADD			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP2			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH [tag66]		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    JUMP			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
  tag65: 
    JUMPDEST		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 40		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    MLOAD			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP3			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP2			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    MSTORE			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 20		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    ADD			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP2			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 40		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    MLOAD			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    DUP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP2			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SUB			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP1			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    RETURN			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
  tag23: 
    JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH [tag67]		function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 4		function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    CALLDATALOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToSubtract(uint a, uint b) returns(bool) {...
    ADD			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    CALLDATALOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToSubtract(uint a, uint b) returns(bool) {...
    ADD			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH [tag68]		function safeToSubtract(uint a, uint b) returns(bool) {...
    JUMP			function safeToSubtract(uint a, uint b) returns(bool) {...
  tag67: 
    JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 40		function safeToSubtract(uint a, uint b) returns(bool) {...
    MLOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP3			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    MSTORE			function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 20		function safeToSubtract(uint a, uint b) returns(bool) {...
    ADD			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 40		function safeToSubtract(uint a, uint b) returns(bool) {...
    MLOAD			function safeToSubtract(uint a, uint b) returns(bool) {...
    DUP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    SUB			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP1			function safeToSubtract(uint a, uint b) returns(bool) {...
    RETURN			function safeToSubtract(uint a, uint b) returns(bool) {...
  tag24: 
    JUMPDEST		function isSeller(address _query) returns(bool isseller) {...
    PUSH [tag69]		function isSeller(address _query) returns(bool isseller) {...
    PUSH 4		function isSeller(address _query) returns(bool isseller) {...
    DUP1			function isSeller(address _query) returns(bool isseller) {...
    DUP1			function isSeller(address _query) returns(bool isseller) {...
    CALLDATALOAD			function isSeller(address _query) returns(bool isseller) {...
    SWAP1			function isSeller(address _query) returns(bool isseller) {...
    PUSH 20		function isSeller(address _query) returns(bool isseller) {...
    ADD			function isSeller(address _query) returns(bool isseller) {...
    SWAP1			function isSeller(address _query) returns(bool isseller) {...
    SWAP2			function isSeller(address _query) returns(bool isseller) {...
    SWAP1			function isSeller(address _query) returns(bool isseller) {...
    POP			function isSeller(address _query) returns(bool isseller) {...
    POP			function isSeller(address _query) returns(bool isseller) {...
    PUSH [tag70]		function isSeller(address _query) returns(bool isseller) {...
    JUMP			function isSeller(address _query) returns(bool isseller) {...
  tag69: 
    JUMPDEST		function isSeller(address _query) returns(bool isseller) {...
    PUSH 40		function isSeller(address _query) returns(bool isseller) {...
    MLOAD			function isSeller(address _query) returns(bool isseller) {...
    DUP1			function isSeller(address _query) returns(bool isseller) {...
    DUP3			function isSeller(address _query) returns(bool isseller) {...
    DUP2			function isSeller(address _query) returns(bool isseller) {...
    MSTORE			function isSeller(address _query) returns(bool isseller) {...
    PUSH 20		function isSeller(address _query) returns(bool isseller) {...
    ADD			function isSeller(address _query) returns(bool isseller) {...
    SWAP2			function isSeller(address _query) returns(bool isseller) {...
    POP			function isSeller(address _query) returns(bool isseller) {...
    POP			function isSeller(address _query) returns(bool isseller) {...
    PUSH 40		function isSeller(address _query) returns(bool isseller) {...
    MLOAD			function isSeller(address _query) returns(bool isseller) {...
    DUP1			function isSeller(address _query) returns(bool isseller) {...
    SWAP2			function isSeller(address _query) returns(bool isseller) {...
    SUB			function isSeller(address _query) returns(bool isseller) {...
    SWAP1			function isSeller(address _query) returns(bool isseller) {...
    RETURN			function isSeller(address _query) returns(bool isseller) {...
  tag54: 
    JUMPDEST		address public owner
    PUSH 0		address public owner
    PUSH 0		address public owner
    SWAP1			address public owner
    SLOAD			address public owner
    SWAP1			address public owner
    PUSH 100		address public owner
    EXP			address public owner
    SWAP1			address public owner
    DIV			address public owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public owner
    AND			address public owner
    DUP2			address public owner
    JUMP	[out]		address public owner
  tag52: 
    JUMPDEST		address public config
    PUSH 1		address public config
    PUSH 0		address public config
    SWAP1			address public config
    SLOAD			address public config
    SWAP1			address public config
    PUSH 100		address public config
    EXP			address public config
    SWAP1			address public config
    DIV			address public config
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public config
    AND			address public config
    DUP2			address public config
    JUMP	[out]		address public config
  tag62: 
    JUMPDEST		bool public locked
    PUSH 1		bool public locked
    PUSH 14		bool public locked
    SWAP1			bool public locked
    SLOAD			bool public locked
    SWAP1			bool public locked
    PUSH 100		bool public locked
    EXP			bool public locked
    SWAP1			bool public locked
    DIV			bool public locked
    PUSH FF		bool public locked
    AND			bool public locked
    DUP2			bool public locked
    JUMP	[out]		bool public locked
  tag42: 
    JUMPDEST		address public dao
    PUSH 2		address public dao
    PUSH 0		address public dao
    SWAP1			address public dao
    SLOAD			address public dao
    SWAP1			address public dao
    PUSH 100		address public dao
    EXP			address public dao
    SWAP1			address public dao
    DIV			address public dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public dao
    AND			address public dao
    DUP2			address public dao
    JUMP	[out]		address public dao
  tag44: 
    JUMPDEST		address public badgeLedger
    PUSH 3		address public badgeLedger
    PUSH 0		address public badgeLedger
    SWAP1			address public badgeLedger
    SLOAD			address public badgeLedger
    SWAP1			address public badgeLedger
    PUSH 100		address public badgeLedger
    EXP			address public badgeLedger
    SWAP1			address public badgeLedger
    DIV			address public badgeLedger
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address public badgeLedger
    AND			address public badgeLedger
    DUP2			address public badgeLedger
    JUMP	[out]		address public badgeLedger
  tag30: 
    JUMPDEST		uint256 public totalSupply
    PUSH 4		uint256 public totalSupply
    PUSH 0		uint256 public totalSupply
    POP			uint256 public totalSupply
    SLOAD			uint256 public totalSupply
    DUP2			uint256 public totalSupply
    JUMP	[out]		uint256 public totalSupply
  tag46: 
    JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
    PUSH 0		bool
    DUP3			a
    DUP3			b
    DUP5			a
    ADD			a + b
    LT			a + b >= a
    ISZERO			a + b >= a
    SWAP1			return (a + b >= a)
    POP			return (a + b >= a)
    PUSH [tag71]		return (a + b >= a)
    JUMP			return (a + b >= a)
  tag71: 
    JUMPDEST		function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP3			function safeToAdd(uint a, uint b) returns(bool) {...
    SWAP2			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    POP			function safeToAdd(uint a, uint b) returns(bool) {...
    JUMP	[out]		function safeToAdd(uint a, uint b) returns(bool) {...
  tag60: 
    JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
    PUSH 0		uint result
    PUSH [tag73]		safeToAdd(a, b)
    DUP4			a
    DUP4			b
    PUSH [tag46]		safeToAdd
    JUMP	[in]		safeToAdd(a, b)
  tag73: 
    JUMPDEST		safeToAdd(a, b)
    ISZERO			!safeToAdd(a, b)
    ISZERO			if (!safeToAdd(a, b)) {...
    PUSH [tag74]		if (!safeToAdd(a, b)) {...
    JUMPI			if (!safeToAdd(a, b)) {...
    PUSH [ErrorTag]		throw
    JUMP			throw
    PUSH [tag75]		if (!safeToAdd(a, b)) {...
    JUMP			if (!safeToAdd(a, b)) {...
  tag74: 
    JUMPDEST		if (!safeToAdd(a, b)) {...
    DUP2			b
    DUP4			a
    ADD			a + b
    SWAP1			result = a + b
    POP			result = a + b
    DUP1			result = a + b
    POP			result = a + b
    DUP1			result
    SWAP1			return result
    POP			return result
    PUSH [tag72]		return result
    JUMP			return result
  tag75: 
    JUMPDEST		if (!safeToAdd(a, b)) {...
  tag72: 
    JUMPDEST		function addSafely(uint a, uint b) returns(uint result) {...
    SWAP3			function addSafely(uint a, uint b) returns(uint result) {...
    SWAP2			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    POP			function addSafely(uint a, uint b) returns(uint result) {...
    JUMP	[out]		function addSafely(uint a, uint b) returns(uint result) {...
  tag68: 
    JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
    PUSH 0		bool
    DUP3			a
    DUP3			b
    GT			b <= a
    ISZERO			b <= a
    SWAP1			return (b <= a)
    POP			return (b <= a)
    PUSH [tag76]		return (b <= a)
    JUMP			return (b <= a)
  tag76: 
    JUMPDEST		function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP3			function safeToSubtract(uint a, uint b) returns(bool) {...
    SWAP2			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    POP			function safeToSubtract(uint a, uint b) returns(bool) {...
    JUMP	[out]		function safeToSubtract(uint a, uint b) returns(bool) {...
  tag36: 
    JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
    PUSH 0		uint
    PUSH [tag78]		safeToSubtract(a, b)
    DUP4			a
    DUP4			b
    PUSH [tag68]		safeToSubtract
    JUMP	[in]		safeToSubtract(a, b)
  tag78: 
    JUMPDEST		safeToSubtract(a, b)
    ISZERO			!safeToSubtract(a, b)
    ISZERO			if (!safeToSubtract(a, b)) throw
    PUSH [tag79]		if (!safeToSubtract(a, b)) throw
    JUMPI			if (!safeToSubtract(a, b)) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag79: 
    JUMPDEST		if (!safeToSubtract(a, b)) throw
    DUP2			b
    DUP4			a
    SUB			a - b
    SWAP1			return a - b
    POP			return a - b
    PUSH [tag77]		return a - b
    JUMP			return a - b
  tag77: 
    JUMPDEST		function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP3			function subtractSafely(uint a, uint b) returns(uint) {...
    SWAP2			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    POP			function subtractSafely(uint a, uint b) returns(uint) {...
    JUMP	[out]		function subtractSafely(uint a, uint b) returns(uint) {...
  tag50: 
    JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
    PUSH 0		uint256 balance
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_owner]
    DUP4			_owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_owner]
    AND			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    SWAP1			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    PUSH 0		balances[_owner]
    SHA3			balances[_owner]
    PUSH 0		balances[_owner]
    POP			balances[_owner]
    SLOAD			balances[_owner]
    SWAP1			return balances[_owner]
    POP			return balances[_owner]
    PUSH [tag80]		return balances[_owner]
    JUMP			return balances[_owner]
  tag80: 
    JUMPDEST		function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP2			function balanceOf(address _owner) constant returns(uint256 balance) {...
    SWAP1			function balanceOf(address _owner) constant returns(uint256 balance) {...
    POP			function balanceOf(address _owner) constant returns(uint256 balance) {...
    JUMP	[out]		function balanceOf(address _owner) constant returns(uint256 balance) {...
  tag56: 
    JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
    PUSH 0		bool success
    DUP2			_value
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[msg.sender]
    AND			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    SWAP1			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    SHA3			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    POP			balances[msg.sender]
    SLOAD			balances[msg.sender]
    LT			balances[msg.sender] >= _value
    ISZERO			balances[msg.sender] >= _value
    DUP1			balances[msg.sender] >= _value && _value > 0
    ISZERO			balances[msg.sender] >= _value && _value > 0
    PUSH [tag82]		balances[msg.sender] >= _value && _value > 0
    JUMPI			balances[msg.sender] >= _value && _value > 0
    POP			balances[msg.sender] >= _value && _value > 0
    PUSH 0		0
    DUP3			_value
    GT			_value > 0
  tag82: 
    JUMPDEST		balances[msg.sender] >= _value && _value > 0
    ISZERO			if (balances[msg.sender] >= _value && _value > 0) {...
    PUSH [tag83]		if (balances[msg.sender] >= _value && _value > 0) {...
    JUMPI			if (balances[msg.sender] >= _value && _value > 0) {...
    PUSH [tag84]		subtractSafely(balances[msg.sender], _value)
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[msg.sender]
    AND			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    SWAP1			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    SHA3			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    POP			balances[msg.sender]
    SLOAD			balances[msg.sender]
    DUP4			_value
    PUSH [tag36]		subtractSafely
    JUMP	[in]		subtractSafely(balances[msg.sender], _value)
  tag84: 
    JUMPDEST		subtractSafely(balances[msg.sender], _value)
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[msg.sender]
    AND			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    SWAP1			balances[msg.sender]
    DUP2			balances[msg.sender]
    MSTORE			balances[msg.sender]
    PUSH 20		balances[msg.sender]
    ADD			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    SHA3			balances[msg.sender]
    PUSH 0		balances[msg.sender]
    POP			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
    DUP2			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
    SWAP1			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
    SSTORE			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
    POP			balances[msg.sender] = subtractSafely(balances[msg.sender], _value)
    PUSH [tag85]		addSafely(balances[_to], _value)
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_to]
    DUP6			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
    AND			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    SWAP1			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    PUSH 0		balances[_to]
    SHA3			balances[_to]
    PUSH 0		balances[_to]
    POP			balances[_to]
    SLOAD			balances[_to]
    DUP4			_value
    PUSH [tag60]		addSafely
    JUMP	[in]		addSafely(balances[_to], _value)
  tag85: 
    JUMPDEST		addSafely(balances[_to], _value)
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_to]
    DUP6			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
    AND			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    SWAP1			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    PUSH 0		balances[_to]
    SHA3			balances[_to]
    PUSH 0		balances[_to]
    POP			balances[_to] = addSafely(balances[_to], _value)
    DUP2			balances[_to] = addSafely(balances[_to], _value)
    SWAP1			balances[_to] = addSafely(balances[_to], _value)
    SSTORE			balances[_to] = addSafely(balances[_to], _value)
    POP			balances[_to] = addSafely(balances[_to], _value)
    DUP3			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(msg.sender, _to, _value)
    AND			Transfer(msg.sender, _to, _value)
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(msg.sender, _to, _value)
    AND			Transfer(msg.sender, _to, _value)
    PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF		Transfer(msg.sender, _to, _value)
    DUP5			_value
    PUSH 40		Transfer(msg.sender, _to, _value)
    MLOAD			Transfer(msg.sender, _to, _value)
    DUP1			Transfer(msg.sender, _to, _value)
    DUP3			Transfer(msg.sender, _to, _value)
    DUP2			Transfer(msg.sender, _to, _value)
    MSTORE			Transfer(msg.sender, _to, _value)
    PUSH 20		Transfer(msg.sender, _to, _value)
    ADD			Transfer(msg.sender, _to, _value)
    SWAP2			Transfer(msg.sender, _to, _value)
    POP			Transfer(msg.sender, _to, _value)
    POP			Transfer(msg.sender, _to, _value)
    PUSH 40		Transfer(msg.sender, _to, _value)
    MLOAD			Transfer(msg.sender, _to, _value)
    DUP1			Transfer(msg.sender, _to, _value)
    SWAP2			Transfer(msg.sender, _to, _value)
    SUB			Transfer(msg.sender, _to, _value)
    SWAP1			Transfer(msg.sender, _to, _value)
    LOG3			Transfer(msg.sender, _to, _value)
    PUSH 1		true
    SWAP1			success = true
    POP			success = true
    DUP1			success = true
    POP			success = true
    PUSH [tag86]		if (balances[msg.sender] >= _value && _value > 0) {...
    JUMP			if (balances[msg.sender] >= _value && _value > 0) {...
  tag83: 
    JUMPDEST		if (balances[msg.sender] >= _value && _value > 0) {...
    PUSH 0		false
    SWAP1			success = false
    POP			success = false
    DUP1			success = false
    POP			success = false
  tag86: 
    JUMPDEST		if (balances[msg.sender] >= _value && _value > 0) {...
    DUP1			success
    SWAP1			return success
    POP			return success
    PUSH [tag81]		return success
    JUMP			return success
  tag81: 
    JUMPDEST		function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP3			function transfer(address _to, uint256 _value) returns(bool success) {...
    SWAP2			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    POP			function transfer(address _to, uint256 _value) returns(bool success) {...
    JUMP	[out]		function transfer(address _to, uint256 _value) returns(bool success) {...
  tag32: 
    JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    PUSH 0		bool success
    DUP2			_value
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_from]
    AND			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    SWAP1			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    PUSH 0		balances[_from]
    SHA3			balances[_from]
    PUSH 0		balances[_from]
    POP			balances[_from]
    SLOAD			balances[_from]
    LT			balances[_from] >= _value
    ISZERO			balances[_from] >= _value
    DUP1			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    ISZERO			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    PUSH [tag88]		balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    JUMPI			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    POP			balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    DUP2			_value
    PUSH 6		allowed
    PUSH 0		allowed
    POP			allowed
    PUSH 0		allowed[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from]
    AND			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    SWAP1			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    PUSH 0		allowed[_from]
    SHA3			allowed[_from]
    PUSH 0		allowed[_from]
    POP			allowed[_from]
    PUSH 0		allowed[_from][msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from][msg.sender]
    AND			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    SWAP1			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    SHA3			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    POP			allowed[_from][msg.sender]
    SLOAD			allowed[_from][msg.sender]
    LT			allowed[_from][msg.sender] >= _value
    ISZERO			allowed[_from][msg.sender] >= _value
  tag88: 
    JUMPDEST		balances[_from] >= _value && allowed[_from][msg.sender] >= _value
    DUP1			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    ISZERO			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    PUSH [tag89]		balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    JUMPI			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    POP			balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    PUSH 0		0
    DUP3			_value
    GT			_value > 0
  tag89: 
    JUMPDEST		balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0
    ISZERO			if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    PUSH [tag90]		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    JUMPI			if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    PUSH [tag91]		addSafely(balances[_to], _value)
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_to]
    DUP6			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
    AND			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    SWAP1			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    PUSH 0		balances[_to]
    SHA3			balances[_to]
    PUSH 0		balances[_to]
    POP			balances[_to]
    SLOAD			balances[_to]
    DUP4			_value
    PUSH [tag60]		addSafely
    JUMP	[in]		addSafely(balances[_to], _value)
  tag91: 
    JUMPDEST		addSafely(balances[_to], _value)
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_to]
    DUP6			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_to]
    AND			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    SWAP1			balances[_to]
    DUP2			balances[_to]
    MSTORE			balances[_to]
    PUSH 20		balances[_to]
    ADD			balances[_to]
    PUSH 0		balances[_to]
    SHA3			balances[_to]
    PUSH 0		balances[_to]
    POP			balances[_to] = addSafely(balances[_to], _value)
    DUP2			balances[_to] = addSafely(balances[_to], _value)
    SWAP1			balances[_to] = addSafely(balances[_to], _value)
    SSTORE			balances[_to] = addSafely(balances[_to], _value)
    POP			balances[_to] = addSafely(balances[_to], _value)
    PUSH [tag92]		subtractSafely(balances[_from], _value)
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_from]
    AND			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    SWAP1			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    PUSH 0		balances[_from]
    SHA3			balances[_from]
    PUSH 0		balances[_from]
    POP			balances[_from]
    SLOAD			balances[_from]
    DUP4			_value
    PUSH [tag36]		subtractSafely
    JUMP	[in]		subtractSafely(balances[_from], _value)
  tag92: 
    JUMPDEST		subtractSafely(balances[_from], _value)
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_from]
    AND			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    SWAP1			balances[_from]
    DUP2			balances[_from]
    MSTORE			balances[_from]
    PUSH 20		balances[_from]
    ADD			balances[_from]
    PUSH 0		balances[_from]
    SHA3			balances[_from]
    PUSH 0		balances[_from]
    POP			balances[_from] = subtractSafely(balances[_from], _value)
    DUP2			balances[_from] = subtractSafely(balances[_from], _value)
    SWAP1			balances[_from] = subtractSafely(balances[_from], _value)
    SSTORE			balances[_from] = subtractSafely(balances[_from], _value)
    POP			balances[_from] = subtractSafely(balances[_from], _value)
    PUSH [tag93]		subtractSafely(allowed[_from][msg.sender], _value)
    PUSH 6		allowed
    PUSH 0		allowed
    POP			allowed
    PUSH 0		allowed[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from]
    AND			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    SWAP1			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    PUSH 0		allowed[_from]
    SHA3			allowed[_from]
    PUSH 0		allowed[_from]
    POP			allowed[_from]
    PUSH 0		allowed[_from][msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from][msg.sender]
    AND			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    SWAP1			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    SHA3			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    POP			allowed[_from][msg.sender]
    SLOAD			allowed[_from][msg.sender]
    DUP4			_value
    PUSH [tag36]		subtractSafely
    JUMP	[in]		subtractSafely(allowed[_from][msg.sender], _value)
  tag93: 
    JUMPDEST		subtractSafely(allowed[_from][msg.sender], _value)
    PUSH 6		allowed
    PUSH 0		allowed
    POP			allowed
    PUSH 0		allowed[_from]
    DUP7			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from]
    AND			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    SWAP1			allowed[_from]
    DUP2			allowed[_from]
    MSTORE			allowed[_from]
    PUSH 20		allowed[_from]
    ADD			allowed[_from]
    PUSH 0		allowed[_from]
    SHA3			allowed[_from]
    PUSH 0		allowed[_from]
    POP			allowed[_from]
    PUSH 0		allowed[_from][msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_from][msg.sender]
    AND			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    SWAP1			allowed[_from][msg.sender]
    DUP2			allowed[_from][msg.sender]
    MSTORE			allowed[_from][msg.sender]
    PUSH 20		allowed[_from][msg.sender]
    ADD			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    SHA3			allowed[_from][msg.sender]
    PUSH 0		allowed[_from][msg.sender]
    POP			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
    DUP2			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
    SWAP1			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
    SSTORE			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
    POP			allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value)
    DUP3			_to
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(_from, _to, _value)
    AND			Transfer(_from, _to, _value)
    DUP5			_from
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Transfer(_from, _to, _value)
    AND			Transfer(_from, _to, _value)
    PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF		Transfer(_from, _to, _value)
    DUP5			_value
    PUSH 40		Transfer(_from, _to, _value)
    MLOAD			Transfer(_from, _to, _value)
    DUP1			Transfer(_from, _to, _value)
    DUP3			Transfer(_from, _to, _value)
    DUP2			Transfer(_from, _to, _value)
    MSTORE			Transfer(_from, _to, _value)
    PUSH 20		Transfer(_from, _to, _value)
    ADD			Transfer(_from, _to, _value)
    SWAP2			Transfer(_from, _to, _value)
    POP			Transfer(_from, _to, _value)
    POP			Transfer(_from, _to, _value)
    PUSH 40		Transfer(_from, _to, _value)
    MLOAD			Transfer(_from, _to, _value)
    DUP1			Transfer(_from, _to, _value)
    SWAP2			Transfer(_from, _to, _value)
    SUB			Transfer(_from, _to, _value)
    SWAP1			Transfer(_from, _to, _value)
    LOG3			Transfer(_from, _to, _value)
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag87]		return true
    JUMP			return true
    PUSH [tag94]		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    JUMP			if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
  tag90: 
    JUMPDEST		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
    PUSH 0		false
    SWAP1			return false
    POP			return false
    PUSH [tag87]		return false
    JUMP			return false
  tag94: 
    JUMPDEST		if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {...
  tag87: 
    JUMPDEST		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP4			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    SWAP3			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    POP			function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
    JUMP	[out]		function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {...
  tag26: 
    JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
    PUSH 0		bool success
    DUP2			_value
    PUSH 6		allowed
    PUSH 0		allowed
    POP			allowed
    PUSH 0		allowed[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[msg.sender]
    AND			allowed[msg.sender]
    DUP2			allowed[msg.sender]
    MSTORE			allowed[msg.sender]
    PUSH 20		allowed[msg.sender]
    ADD			allowed[msg.sender]
    SWAP1			allowed[msg.sender]
    DUP2			allowed[msg.sender]
    MSTORE			allowed[msg.sender]
    PUSH 20		allowed[msg.sender]
    ADD			allowed[msg.sender]
    PUSH 0		allowed[msg.sender]
    SHA3			allowed[msg.sender]
    PUSH 0		allowed[msg.sender]
    POP			allowed[msg.sender]
    PUSH 0		allowed[msg.sender][_spender]
    DUP6			_spender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[msg.sender][_spender]
    AND			allowed[msg.sender][_spender]
    DUP2			allowed[msg.sender][_spender]
    MSTORE			allowed[msg.sender][_spender]
    PUSH 20		allowed[msg.sender][_spender]
    ADD			allowed[msg.sender][_spender]
    SWAP1			allowed[msg.sender][_spender]
    DUP2			allowed[msg.sender][_spender]
    MSTORE			allowed[msg.sender][_spender]
    PUSH 20		allowed[msg.sender][_spender]
    ADD			allowed[msg.sender][_spender]
    PUSH 0		allowed[msg.sender][_spender]
    SHA3			allowed[msg.sender][_spender]
    PUSH 0		allowed[msg.sender][_spender]
    POP			allowed[msg.sender][_spender] = _value
    DUP2			allowed[msg.sender][_spender] = _value
    SWAP1			allowed[msg.sender][_spender] = _value
    SSTORE			allowed[msg.sender][_spender] = _value
    POP			allowed[msg.sender][_spender] = _value
    DUP3			_spender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Approval(msg.sender, _spender, _value)
    AND			Approval(msg.sender, _spender, _value)
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Approval(msg.sender, _spender, _value)
    AND			Approval(msg.sender, _spender, _value)
    PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925		Approval(msg.sender, _spender, _value)
    DUP5			_value
    PUSH 40		Approval(msg.sender, _spender, _value)
    MLOAD			Approval(msg.sender, _spender, _value)
    DUP1			Approval(msg.sender, _spender, _value)
    DUP3			Approval(msg.sender, _spender, _value)
    DUP2			Approval(msg.sender, _spender, _value)
    MSTORE			Approval(msg.sender, _spender, _value)
    PUSH 20		Approval(msg.sender, _spender, _value)
    ADD			Approval(msg.sender, _spender, _value)
    SWAP2			Approval(msg.sender, _spender, _value)
    POP			Approval(msg.sender, _spender, _value)
    POP			Approval(msg.sender, _spender, _value)
    PUSH 40		Approval(msg.sender, _spender, _value)
    MLOAD			Approval(msg.sender, _spender, _value)
    DUP1			Approval(msg.sender, _spender, _value)
    SWAP2			Approval(msg.sender, _spender, _value)
    SUB			Approval(msg.sender, _spender, _value)
    SWAP1			Approval(msg.sender, _spender, _value)
    LOG3			Approval(msg.sender, _spender, _value)
    PUSH 1		true
    SWAP1			success = true
    POP			success = true
    DUP1			success = true
    POP			success = true
    DUP1			success
    SWAP1			return success
    POP			return success
    PUSH [tag95]		return success
    JUMP			return success
  tag95: 
    JUMPDEST		function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP3			function approve(address _spender, uint256 _value) returns(bool success) {...
    SWAP2			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    POP			function approve(address _spender, uint256 _value) returns(bool success) {...
    JUMP	[out]		function approve(address _spender, uint256 _value) returns(bool success) {...
  tag64: 
    JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    PUSH 0		uint256 remaining
    PUSH 6		allowed
    PUSH 0		allowed
    POP			allowed
    PUSH 0		allowed[_owner]
    DUP5			_owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_owner]
    AND			allowed[_owner]
    DUP2			allowed[_owner]
    MSTORE			allowed[_owner]
    PUSH 20		allowed[_owner]
    ADD			allowed[_owner]
    SWAP1			allowed[_owner]
    DUP2			allowed[_owner]
    MSTORE			allowed[_owner]
    PUSH 20		allowed[_owner]
    ADD			allowed[_owner]
    PUSH 0		allowed[_owner]
    SHA3			allowed[_owner]
    PUSH 0		allowed[_owner]
    POP			allowed[_owner]
    PUSH 0		allowed[_owner][_spender]
    DUP4			_spender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		allowed[_owner][_spender]
    AND			allowed[_owner][_spender]
    DUP2			allowed[_owner][_spender]
    MSTORE			allowed[_owner][_spender]
    PUSH 20		allowed[_owner][_spender]
    ADD			allowed[_owner][_spender]
    SWAP1			allowed[_owner][_spender]
    DUP2			allowed[_owner][_spender]
    MSTORE			allowed[_owner][_spender]
    PUSH 20		allowed[_owner][_spender]
    ADD			allowed[_owner][_spender]
    PUSH 0		allowed[_owner][_spender]
    SHA3			allowed[_owner][_spender]
    PUSH 0		allowed[_owner][_spender]
    POP			allowed[_owner][_spender]
    SLOAD			allowed[_owner][_spender]
    SWAP1			remaining = allowed[_owner][_spender]
    POP			remaining = allowed[_owner][_spender]
    DUP1			remaining = allowed[_owner][_spender]
    POP			remaining = allowed[_owner][_spender]
    DUP1			remaining
    SWAP1			return remaining
    POP			return remaining
    PUSH [tag96]		return remaining
    JUMP			return remaining
  tag96: 
    JUMPDEST		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP3			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    SWAP2			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    POP			function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
    JUMP	[out]		function allowance(address _owner, address _spender) constant returns(uint256 remaining) {...
  tag40: 
    JUMPDEST		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 0		bool success
    PUSH 7		seller
    PUSH 0		seller
    POP			seller
    PUSH 0		seller[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		seller[msg.sender]
    AND			seller[msg.sender]
    DUP2			seller[msg.sender]
    MSTORE			seller[msg.sender]
    PUSH 20		seller[msg.sender]
    ADD			seller[msg.sender]
    SWAP1			seller[msg.sender]
    DUP2			seller[msg.sender]
    MSTORE			seller[msg.sender]
    PUSH 20		seller[msg.sender]
    ADD			seller[msg.sender]
    PUSH 0		seller[msg.sender]
    SHA3			seller[msg.sender]
    PUSH 0		seller[msg.sender]
    SWAP1			seller[msg.sender]
    SLOAD			seller[msg.sender]
    SWAP1			seller[msg.sender]
    PUSH 100		seller[msg.sender]
    EXP			seller[msg.sender]
    SWAP1			seller[msg.sender]
    DIV			seller[msg.sender]
    PUSH FF		seller[msg.sender]
    AND			seller[msg.sender]
    ISZERO			!seller[msg.sender]
    ISZERO			if (!seller[msg.sender]) throw
    PUSH [tag98]		if (!seller[msg.sender]) throw
    JUMPI			if (!seller[msg.sender]) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag98: 
    JUMPDEST		if (!seller[msg.sender]) throw
    PUSH [tag99]		addSafely(_amount, totalSupply)
    DUP3			_amount
    PUSH 4		totalSupply
    PUSH 0		totalSupply
    POP			totalSupply
    SLOAD			totalSupply
    PUSH [tag60]		addSafely
    JUMP	[in]		addSafely(_amount, totalSupply)
  tag99: 
    JUMPDEST		addSafely(_amount, totalSupply)
    PUSH 4		totalSupply
    PUSH 0		totalSupply
    POP			totalSupply = addSafely(_amount, totalSupply)
    DUP2			totalSupply = addSafely(_amount, totalSupply)
    SWAP1			totalSupply = addSafely(_amount, totalSupply)
    SSTORE			totalSupply = addSafely(_amount, totalSupply)
    POP			totalSupply = addSafely(_amount, totalSupply)
    PUSH [tag100]		addSafely(balances[_owner], _amount)
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_owner]
    DUP6			_owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_owner]
    AND			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    SWAP1			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    PUSH 0		balances[_owner]
    SHA3			balances[_owner]
    PUSH 0		balances[_owner]
    POP			balances[_owner]
    SLOAD			balances[_owner]
    DUP4			_amount
    PUSH [tag60]		addSafely
    JUMP	[in]		addSafely(balances[_owner], _amount)
  tag100: 
    JUMPDEST		addSafely(balances[_owner], _amount)
    PUSH 5		balances
    PUSH 0		balances
    POP			balances
    PUSH 0		balances[_owner]
    DUP6			_owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		balances[_owner]
    AND			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    SWAP1			balances[_owner]
    DUP2			balances[_owner]
    MSTORE			balances[_owner]
    PUSH 20		balances[_owner]
    ADD			balances[_owner]
    PUSH 0		balances[_owner]
    SHA3			balances[_owner]
    PUSH 0		balances[_owner]
    POP			balances[_owner] = addSafely(balances[_owner], _amount)
    DUP2			balances[_owner] = addSafely(balances[_owner], _amount)
    SWAP1			balances[_owner] = addSafely(balances[_owner], _amount)
    SSTORE			balances[_owner] = addSafely(balances[_owner], _amount)
    POP			balances[_owner] = addSafely(balances[_owner], _amount)
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag97]		return true
    JUMP			return true
  tag97: 
    JUMPDEST		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP3			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP2			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
    JUMP	[out]		function mint(address _owner, uint256 _amount) ifSales returns(bool success) {...
  tag66: 
    JUMPDEST		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    PUSH 0		bool success
    PUSH 7		seller
    PUSH 0		seller
    POP			seller
    PUSH 0		seller[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		seller[msg.sender]
    AND			seller[msg.sender]
    DUP2			seller[msg.sender]
    MSTORE			seller[msg.sender]
    PUSH 20		seller[msg.sender]
    ADD			seller[msg.sender]
    SWAP1			seller[msg.sender]
    DUP2			seller[msg.sender]
    MSTORE			seller[msg.sender]
    PUSH 20		seller[msg.sender]
    ADD			seller[msg.sender]
    PUSH 0		seller[msg.sender]
    SHA3			seller[msg.sender]
    PUSH 0		seller[msg.sender]
    SWAP1			seller[msg.sender]
    SLOAD			seller[msg.sender]
    SWAP1			seller[msg.sender]
    PUSH 100		seller[msg.sender]
    EXP			seller[msg.sender]
    SWAP1			seller[msg.sender]
    DIV			seller[msg.sender]
    PUSH FF		seller[msg.sender]
    AND			seller[msg.sender]
    ISZERO			!seller[msg.sender]
    ISZERO			if (!seller[msg.sender]) throw
    PUSH [tag102]		if (!seller[msg.sender]) throw
    JUMPI			if (!seller[msg.sender]) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag102: 
    JUMPDEST		if (!seller[msg.sender]) throw
    PUSH 3		badgeLedger
    PUSH 0		badgeLedger
    SWAP1			badgeLedger
    SLOAD			badgeLedger
    SWAP1			badgeLedger
    PUSH 100		badgeLedger
    EXP			badgeLedger
    SWAP1			badgeLedger
    DIV			badgeLedger
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		badgeLedger
    AND			badgeLedger
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Badge(badgeLedger).mint
    AND			Badge(badgeLedger).mint
    PUSH 40C10F19		Badge(badgeLedger).mint
    DUP5			_owner
    DUP5			_amount
    PUSH 40		Badge(badgeLedger).mint(_owner, _amount)
    MLOAD			Badge(badgeLedger).mint(_owner, _amount)
    DUP4			Badge(badgeLedger).mint(_owner, _amount)
    PUSH 100000000000000000000000000000000000000000000000000000000		Badge(badgeLedger).mint(_owner, _amount)
    MUL			Badge(badgeLedger).mint(_owner, _amount)
    DUP2			Badge(badgeLedger).mint(_owner, _amount)
    MSTORE			Badge(badgeLedger).mint(_owner, _amount)
    PUSH 4		Badge(badgeLedger).mint(_owner, _amount)
    ADD			Badge(badgeLedger).mint(_owner, _amount)
    DUP1			Badge(badgeLedger).mint(_owner, _amount)
    DUP4			Badge(badgeLedger).mint(_owner, _amount)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Badge(badgeLedger).mint(_owner, _amount)
    AND			Badge(badgeLedger).mint(_owner, _amount)
    DUP2			Badge(badgeLedger).mint(_owner, _amount)
    MSTORE			Badge(badgeLedger).mint(_owner, _amount)
    PUSH 20		Badge(badgeLedger).mint(_owner, _amount)
    ADD			Badge(badgeLedger).mint(_owner, _amount)
    DUP3			Badge(badgeLedger).mint(_owner, _amount)
    DUP2			Badge(badgeLedger).mint(_owner, _amount)
    MSTORE			Badge(badgeLedger).mint(_owner, _amount)
    PUSH 20		Badge(badgeLedger).mint(_owner, _amount)
    ADD			Badge(badgeLedger).mint(_owner, _amount)
    SWAP3			Badge(badgeLedger).mint(_owner, _amount)
    POP			Badge(badgeLedger).mint(_owner, _amount)
    POP			Badge(badgeLedger).mint(_owner, _amount)
    POP			Badge(badgeLedger).mint(_owner, _amount)
    PUSH 20		Badge(badgeLedger).mint(_owner, _amount)
    PUSH 40		Badge(badgeLedger).mint(_owner, _amount)
    MLOAD			Badge(badgeLedger).mint(_owner, _amount)
    DUP1			Badge(badgeLedger).mint(_owner, _amount)
    DUP4			Badge(badgeLedger).mint(_owner, _amount)
    SUB			Badge(badgeLedger).mint(_owner, _amount)
    DUP2			Badge(badgeLedger).mint(_owner, _amount)
    PUSH 0		Badge(badgeLedger).mint(_owner, _amount)
    DUP8			Badge(badgeLedger).mint(_owner, _amount)
    PUSH 61DA		Badge(badgeLedger).mint(_owner, _amount)
    GAS			Badge(badgeLedger).mint(_owner, _amount)
    SUB			Badge(badgeLedger).mint(_owner, _amount)
    CALL			Badge(badgeLedger).mint(_owner, _amount)
    ISZERO			Badge(badgeLedger).mint(_owner, _amount)
    PUSH [ErrorTag]		Badge(badgeLedger).mint(_owner, _amount)
    JUMPI			Badge(badgeLedger).mint(_owner, _amount)
    POP			Badge(badgeLedger).mint(_owner, _amount)
    POP			Badge(badgeLedger).mint(_owner, _amount)
    POP			Badge(badgeLedger).mint(_owner, _amount)
    PUSH 40		Badge(badgeLedger).mint(_owner, _amount)
    MLOAD			Badge(badgeLedger).mint(_owner, _amount)
    DUP1			Badge(badgeLedger).mint(_owner, _amount)
    MLOAD			Badge(badgeLedger).mint(_owner, _amount)
    SWAP1			Badge(badgeLedger).mint(_owner, _amount)
    PUSH 20		Badge(badgeLedger).mint(_owner, _amount)
    ADD			Badge(badgeLedger).mint(_owner, _amount)
    POP			Badge(badgeLedger).mint(_owner, _amount)
    ISZERO			!Badge(badgeLedger).mint(_owner, _amount)
    ISZERO			if (!Badge(badgeLedger).mint(_owner, _amount)) return false
    PUSH [tag103]		if (!Badge(badgeLedger).mint(_owner, _amount)) return false
    JUMPI			if (!Badge(badgeLedger).mint(_owner, _amount)) return false
    PUSH 0		false
    SWAP1			return false
    POP			return false
    PUSH [tag101]		return false
    JUMP			return false
  tag103: 
    JUMPDEST		if (!Badge(badgeLedger).mint(_owner, _amount)) return false
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag101]		return true
    JUMP			return true
  tag101: 
    JUMPDEST		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP3			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    SWAP2			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    POP			function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
    JUMP	[out]		function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {...
  tag34: 
    JUMPDEST		function registerDao(address _dao) ifOwner returns(bool success) {...
    PUSH 0		bool success
    PUSH 0		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
    AND			msg.sender != owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != owner
    AND			msg.sender != owner
    EQ			msg.sender != owner
    ISZERO			msg.sender != owner
    ISZERO			if (msg.sender != owner) throw
    PUSH [tag105]		if (msg.sender != owner) throw
    JUMPI			if (msg.sender != owner) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag105: 
    JUMPDEST		if (msg.sender != owner) throw
    PUSH 1		true
    PUSH 1		locked
    PUSH 14		locked
    SWAP1			locked
    SLOAD			locked
    SWAP1			locked
    PUSH 100		locked
    EXP			locked
    SWAP1			locked
    DIV			locked
    PUSH FF		locked
    AND			locked
    EQ			locked == true
    ISZERO			if (locked == true) return false
    PUSH [tag106]		if (locked == true) return false
    JUMPI			if (locked == true) return false
    PUSH 0		false
    SWAP1			return false
    POP			return false
    PUSH [tag104]		return false
    JUMP			return false
  tag106: 
    JUMPDEST		if (locked == true) return false
    DUP2			_dao
    PUSH 2		dao
    PUSH 0		dao
    PUSH 100		dao = _dao
    EXP			dao = _dao
    DUP2			dao = _dao
    SLOAD			dao = _dao
    DUP2			dao = _dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		dao = _dao
    MUL			dao = _dao
    NOT			dao = _dao
    AND			dao = _dao
    SWAP1			dao = _dao
    DUP4			dao = _dao
    MUL			dao = _dao
    OR			dao = _dao
    SWAP1			dao = _dao
    SSTORE			dao = _dao
    POP			dao = _dao
    PUSH 1		true
    PUSH 1		locked
    PUSH 14		locked
    PUSH 100		locked = true
    EXP			locked = true
    DUP2			locked = true
    SLOAD			locked = true
    DUP2			locked = true
    PUSH FF		locked = true
    MUL			locked = true
    NOT			locked = true
    AND			locked = true
    SWAP1			locked = true
    DUP4			locked = true
    MUL			locked = true
    OR			locked = true
    SWAP1			locked = true
    SSTORE			locked = true
    POP			locked = true
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag104]		return true
    JUMP			return true
  tag104: 
    JUMPDEST		function registerDao(address _dao) ifOwner returns(bool success) {...
    SWAP2			function registerDao(address _dao) ifOwner returns(bool success) {...
    SWAP1			function registerDao(address _dao) ifOwner returns(bool success) {...
    POP			function registerDao(address _dao) ifOwner returns(bool success) {...
    JUMP	[out]		function registerDao(address _dao) ifOwner returns(bool success) {...
  tag48: 
    JUMPDEST		function setDao(address _newdao) ifDao returns(bool success) {...
    PUSH 0		bool success
    PUSH 2		dao
    PUSH 0		dao
    SWAP1			dao
    SLOAD			dao
    SWAP1			dao
    PUSH 100		dao
    EXP			dao
    SWAP1			dao
    DIV			dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		dao
    AND			dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != dao
    AND			msg.sender != dao
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != dao
    AND			msg.sender != dao
    EQ			msg.sender != dao
    ISZERO			msg.sender != dao
    ISZERO			if (msg.sender != dao) throw
    PUSH [tag108]		if (msg.sender != dao) throw
    JUMPI			if (msg.sender != dao) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag108: 
    JUMPDEST		if (msg.sender != dao) throw
    DUP2			_newdao
    PUSH 2		dao
    PUSH 0		dao
    PUSH 100		dao = _newdao
    EXP			dao = _newdao
    DUP2			dao = _newdao
    SLOAD			dao = _newdao
    DUP2			dao = _newdao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		dao = _newdao
    MUL			dao = _newdao
    NOT			dao = _newdao
    AND			dao = _newdao
    SWAP1			dao = _newdao
    DUP4			dao = _newdao
    MUL			dao = _newdao
    OR			dao = _newdao
    SWAP1			dao = _newdao
    SSTORE			dao = _newdao
    POP			dao = _newdao
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag107]		return true
    JUMP			return true
  tag107: 
    JUMPDEST		function setDao(address _newdao) ifDao returns(bool success) {...
    SWAP2			function setDao(address _newdao) ifDao returns(bool success) {...
    SWAP1			function setDao(address _newdao) ifDao returns(bool success) {...
    POP			function setDao(address _newdao) ifDao returns(bool success) {...
    JUMP	[out]		function setDao(address _newdao) ifDao returns(bool success) {...
  tag70: 
    JUMPDEST		function isSeller(address _query) returns(bool isseller) {...
    PUSH 0		bool isseller
    PUSH 7		seller
    PUSH 0		seller
    POP			seller
    PUSH 0		seller[_query]
    DUP4			_query
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		seller[_query]
    AND			seller[_query]
    DUP2			seller[_query]
    MSTORE			seller[_query]
    PUSH 20		seller[_query]
    ADD			seller[_query]
    SWAP1			seller[_query]
    DUP2			seller[_query]
    MSTORE			seller[_query]
    PUSH 20		seller[_query]
    ADD			seller[_query]
    PUSH 0		seller[_query]
    SHA3			seller[_query]
    PUSH 0		seller[_query]
    SWAP1			seller[_query]
    SLOAD			seller[_query]
    SWAP1			seller[_query]
    PUSH 100		seller[_query]
    EXP			seller[_query]
    SWAP1			seller[_query]
    DIV			seller[_query]
    PUSH FF		seller[_query]
    AND			seller[_query]
    SWAP1			return seller[_query]
    POP			return seller[_query]
    PUSH [tag109]		return seller[_query]
    JUMP			return seller[_query]
  tag109: 
    JUMPDEST		function isSeller(address _query) returns(bool isseller) {...
    SWAP2			function isSeller(address _query) returns(bool isseller) {...
    SWAP1			function isSeller(address _query) returns(bool isseller) {...
    POP			function isSeller(address _query) returns(bool isseller) {...
    JUMP	[out]		function isSeller(address _query) returns(bool isseller) {...
  tag38: 
    JUMPDEST		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 0		bool success
    PUSH 2		dao
    PUSH 0		dao
    SWAP1			dao
    SLOAD			dao
    SWAP1			dao
    PUSH 100		dao
    EXP			dao
    SWAP1			dao
    DIV			dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		dao
    AND			dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != dao
    AND			msg.sender != dao
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != dao
    AND			msg.sender != dao
    EQ			msg.sender != dao
    ISZERO			msg.sender != dao
    ISZERO			if (msg.sender != dao) throw
    PUSH [tag111]		if (msg.sender != dao) throw
    JUMPI			if (msg.sender != dao) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag111: 
    JUMPDEST		if (msg.sender != dao) throw
    PUSH 1		true
    PUSH 7		seller
    PUSH 0		seller
    POP			seller
    PUSH 0		seller[_tokensales]
    DUP5			_tokensales
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		seller[_tokensales]
    AND			seller[_tokensales]
    DUP2			seller[_tokensales]
    MSTORE			seller[_tokensales]
    PUSH 20		seller[_tokensales]
    ADD			seller[_tokensales]
    SWAP1			seller[_tokensales]
    DUP2			seller[_tokensales]
    MSTORE			seller[_tokensales]
    PUSH 20		seller[_tokensales]
    ADD			seller[_tokensales]
    PUSH 0		seller[_tokensales]
    SHA3			seller[_tokensales]
    PUSH 0		seller[_tokensales]
    PUSH 100		seller[_tokensales] = true
    EXP			seller[_tokensales] = true
    DUP2			seller[_tokensales] = true
    SLOAD			seller[_tokensales] = true
    DUP2			seller[_tokensales] = true
    PUSH FF		seller[_tokensales] = true
    MUL			seller[_tokensales] = true
    NOT			seller[_tokensales] = true
    AND			seller[_tokensales] = true
    SWAP1			seller[_tokensales] = true
    DUP4			seller[_tokensales] = true
    MUL			seller[_tokensales] = true
    OR			seller[_tokensales] = true
    SWAP1			seller[_tokensales] = true
    SSTORE			seller[_tokensales] = true
    POP			seller[_tokensales] = true
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag110]		return true
    JUMP			return true
  tag110: 
    JUMPDEST		function registerSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP2			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP1			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    POP			function registerSeller(address _tokensales) ifDao returns(bool success) {...
    JUMP	[out]		function registerSeller(address _tokensales) ifDao returns(bool success) {...
  tag58: 
    JUMPDEST		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    PUSH 0		bool success
    PUSH 2		dao
    PUSH 0		dao
    SWAP1			dao
    SLOAD			dao
    SWAP1			dao
    PUSH 100		dao
    EXP			dao
    SWAP1			dao
    DIV			dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		dao
    AND			dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != dao
    AND			msg.sender != dao
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != dao
    AND			msg.sender != dao
    EQ			msg.sender != dao
    ISZERO			msg.sender != dao
    ISZERO			if (msg.sender != dao) throw
    PUSH [tag113]		if (msg.sender != dao) throw
    JUMPI			if (msg.sender != dao) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag113: 
    JUMPDEST		if (msg.sender != dao) throw
    PUSH 0		false
    PUSH 7		seller
    PUSH 0		seller
    POP			seller
    PUSH 0		seller[_tokensales]
    DUP5			_tokensales
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		seller[_tokensales]
    AND			seller[_tokensales]
    DUP2			seller[_tokensales]
    MSTORE			seller[_tokensales]
    PUSH 20		seller[_tokensales]
    ADD			seller[_tokensales]
    SWAP1			seller[_tokensales]
    DUP2			seller[_tokensales]
    MSTORE			seller[_tokensales]
    PUSH 20		seller[_tokensales]
    ADD			seller[_tokensales]
    PUSH 0		seller[_tokensales]
    SHA3			seller[_tokensales]
    PUSH 0		seller[_tokensales]
    PUSH 100		seller[_tokensales] = false
    EXP			seller[_tokensales] = false
    DUP2			seller[_tokensales] = false
    SLOAD			seller[_tokensales] = false
    DUP2			seller[_tokensales] = false
    PUSH FF		seller[_tokensales] = false
    MUL			seller[_tokensales] = false
    NOT			seller[_tokensales] = false
    AND			seller[_tokensales] = false
    SWAP1			seller[_tokensales] = false
    DUP4			seller[_tokensales] = false
    MUL			seller[_tokensales] = false
    OR			seller[_tokensales] = false
    SWAP1			seller[_tokensales] = false
    SSTORE			seller[_tokensales] = false
    POP			seller[_tokensales] = false
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag112]		return true
    JUMP			return true
  tag112: 
    JUMPDEST		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP2			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    SWAP1			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    POP			function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
    JUMP	[out]		function unregisterSeller(address _tokensales) ifDao returns(bool success) {...
  tag28: 
    JUMPDEST		function setOwner(address _newowner) ifDao returns(bool success) {...
    PUSH 0		bool success
    PUSH 2		dao
    PUSH 0		dao
    SWAP1			dao
    SLOAD			dao
    SWAP1			dao
    PUSH 100		dao
    EXP			dao
    SWAP1			dao
    DIV			dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		dao
    AND			dao
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != dao
    AND			msg.sender != dao
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender != dao
    AND			msg.sender != dao
    EQ			msg.sender != dao
    ISZERO			msg.sender != dao
    ISZERO			if (msg.sender != dao) throw
    PUSH [tag115]		if (msg.sender != dao) throw
    JUMPI			if (msg.sender != dao) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag115: 
    JUMPDEST		if (msg.sender != dao) throw
    PUSH 3		badgeLedger
    PUSH 0		badgeLedger
    SWAP1			badgeLedger
    SLOAD			badgeLedger
    SWAP1			badgeLedger
    PUSH 100		badgeLedger
    EXP			badgeLedger
    SWAP1			badgeLedger
    DIV			badgeLedger
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		badgeLedger
    AND			badgeLedger
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Badge(badgeLedger).setOwner
    AND			Badge(badgeLedger).setOwner
    PUSH 13AF4035		Badge(badgeLedger).setOwner
    DUP4			_newowner
    PUSH 40		Badge(badgeLedger).setOwner(_newowner)
    MLOAD			Badge(badgeLedger).setOwner(_newowner)
    DUP3			Badge(badgeLedger).setOwner(_newowner)
    PUSH 100000000000000000000000000000000000000000000000000000000		Badge(badgeLedger).setOwner(_newowner)
    MUL			Badge(badgeLedger).setOwner(_newowner)
    DUP2			Badge(badgeLedger).setOwner(_newowner)
    MSTORE			Badge(badgeLedger).setOwner(_newowner)
    PUSH 4		Badge(badgeLedger).setOwner(_newowner)
    ADD			Badge(badgeLedger).setOwner(_newowner)
    DUP1			Badge(badgeLedger).setOwner(_newowner)
    DUP3			Badge(badgeLedger).setOwner(_newowner)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Badge(badgeLedger).setOwner(_newowner)
    AND			Badge(badgeLedger).setOwner(_newowner)
    DUP2			Badge(badgeLedger).setOwner(_newowner)
    MSTORE			Badge(badgeLedger).setOwner(_newowner)
    PUSH 20		Badge(badgeLedger).setOwner(_newowner)
    ADD			Badge(badgeLedger).setOwner(_newowner)
    SWAP2			Badge(badgeLedger).setOwner(_newowner)
    POP			Badge(badgeLedger).setOwner(_newowner)
    POP			Badge(badgeLedger).setOwner(_newowner)
    PUSH 20		Badge(badgeLedger).setOwner(_newowner)
    PUSH 40		Badge(badgeLedger).setOwner(_newowner)
    MLOAD			Badge(badgeLedger).setOwner(_newowner)
    DUP1			Badge(badgeLedger).setOwner(_newowner)
    DUP4			Badge(badgeLedger).setOwner(_newowner)
    SUB			Badge(badgeLedger).setOwner(_newowner)
    DUP2			Badge(badgeLedger).setOwner(_newowner)
    PUSH 0		Badge(badgeLedger).setOwner(_newowner)
    DUP8			Badge(badgeLedger).setOwner(_newowner)
    PUSH 61DA		Badge(badgeLedger).setOwner(_newowner)
    GAS			Badge(badgeLedger).setOwner(_newowner)
    SUB			Badge(badgeLedger).setOwner(_newowner)
    CALL			Badge(badgeLedger).setOwner(_newowner)
    ISZERO			Badge(badgeLedger).setOwner(_newowner)
    PUSH [ErrorTag]		Badge(badgeLedger).setOwner(_newowner)
    JUMPI			Badge(badgeLedger).setOwner(_newowner)
    POP			Badge(badgeLedger).setOwner(_newowner)
    POP			Badge(badgeLedger).setOwner(_newowner)
    POP			Badge(badgeLedger).setOwner(_newowner)
    PUSH 40		Badge(badgeLedger).setOwner(_newowner)
    MLOAD			Badge(badgeLedger).setOwner(_newowner)
    DUP1			Badge(badgeLedger).setOwner(_newowner)
    MLOAD			Badge(badgeLedger).setOwner(_newowner)
    SWAP1			Badge(badgeLedger).setOwner(_newowner)
    PUSH 20		Badge(badgeLedger).setOwner(_newowner)
    ADD			Badge(badgeLedger).setOwner(_newowner)
    POP			Badge(badgeLedger).setOwner(_newowner)
    ISZERO			if (Badge(badgeLedger).setOwner(_newowner)) {...
    PUSH [tag116]		if (Badge(badgeLedger).setOwner(_newowner)) {...
    JUMPI			if (Badge(badgeLedger).setOwner(_newowner)) {...
    DUP2			_newowner
    PUSH 0		owner
    PUSH 0		owner
    PUSH 100		owner = _newowner
    EXP			owner = _newowner
    DUP2			owner = _newowner
    SLOAD			owner = _newowner
    DUP2			owner = _newowner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = _newowner
    MUL			owner = _newowner
    NOT			owner = _newowner
    AND			owner = _newowner
    SWAP1			owner = _newowner
    DUP4			owner = _newowner
    MUL			owner = _newowner
    OR			owner = _newowner
    SWAP1			owner = _newowner
    SSTORE			owner = _newowner
    POP			owner = _newowner
    PUSH 1		true
    SWAP1			success = true
    POP			success = true
    DUP1			success = true
    POP			success = true
    PUSH [tag117]		if (Badge(badgeLedger).setOwner(_newowner)) {...
    JUMP			if (Badge(badgeLedger).setOwner(_newowner)) {...
  tag116: 
    JUMPDEST		if (Badge(badgeLedger).setOwner(_newowner)) {...
    PUSH 0		false
    SWAP1			success = false
    POP			success = false
    DUP1			success = false
    POP			success = false
  tag117: 
    JUMPDEST		if (Badge(badgeLedger).setOwner(_newowner)) {...
    DUP1			success
    SWAP1			return success
    POP			return success
    PUSH [tag114]		return success
    JUMP			return success
  tag114: 
    JUMPDEST		function setOwner(address _newowner) ifDao returns(bool success) {...
    SWAP2			function setOwner(address _newowner) ifDao returns(bool success) {...
    SWAP1			function setOwner(address _newowner) ifDao returns(bool success) {...
    POP			function setOwner(address _newowner) ifDao returns(bool success) {...
    JUMP	[out]		function setOwner(address _newowner) ifDao returns(bool success) {...

======= TokenInterface =======
EVM assembly:
Contract not fully implemented

======= TokenSalesInterface =======
EVM assembly:
Contract not fully implemented
