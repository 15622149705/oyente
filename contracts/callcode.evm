
======= C =======
EVM assembly:
.code:
  PUSH 60		contract C {...
  PUSH 40		contract C {...
  MSTORE			contract C {...
  PUSH #[$00000000…00000000]		contract C {...
  DUP1			contract C {...
  PUSH [$00000000…00000000]		contract C {...
  PUSH 0		contract C {...
  CODECOPY			contract C {...
  PUSH 0		contract C {...
  RETURN			contract C {...
.data:
  0: 
  .code:
    PUSH 60		contract C {...
    PUSH 40		contract C {...
    MSTORE			contract C {...
    PUSH 0		contract C {...
    CALLDATALOAD			contract C {...
    PUSH 100000000000000000000000000000000000000000000000000000000		contract C {...
    SWAP1			contract C {...
    DIV			contract C {...
    DUP1			contract C {...
    PUSH F207564E		contract C {...
    EQ			contract C {...
    PUSH [tag2]		contract C {...
    JUMPI			contract C {...
    PUSH [tag1]		contract C {...
    JUMP			contract C {...
  tag1: 
    JUMPDEST		contract C {...
    STOP			contract C {...
  tag2: 
    JUMPDEST		function register(uint value) {...
    PUSH [tag3]		function register(uint value) {...
    PUSH 4		function register(uint value) {...
    DUP1			function register(uint value) {...
    DUP1			function register(uint value) {...
    CALLDATALOAD			function register(uint value) {...
    SWAP1			function register(uint value) {...
    PUSH 20		function register(uint value) {...
    ADD			function register(uint value) {...
    SWAP1			function register(uint value) {...
    SWAP2			function register(uint value) {...
    SWAP1			function register(uint value) {...
    POP			function register(uint value) {...
    POP			function register(uint value) {...
    PUSH [tag4]		function register(uint value) {...
    JUMP			function register(uint value) {...
  tag3: 
    JUMPDEST		function register(uint value) {...
    STOP			function register(uint value) {...
  tag4: 
    JUMPDEST		function register(uint value) {...
    PUSHLIB "Set"		Set
    PUSH 831CB739		Set.insert
    PUSH 0		knownValues
    PUSH 0		knownValues
    POP			knownValues
    DUP4			value
    PUSH 40		Set.insert(knownValues, value)
    MLOAD			Set.insert(knownValues, value)
    DUP4			Set.insert(knownValues, value)
    PUSH 100000000000000000000000000000000000000000000000000000000		Set.insert(knownValues, value)
    MUL			Set.insert(knownValues, value)
    DUP2			Set.insert(knownValues, value)
    MSTORE			Set.insert(knownValues, value)
    PUSH 4		Set.insert(knownValues, value)
    ADD			Set.insert(knownValues, value)
    DUP1			Set.insert(knownValues, value)
    DUP4			Set.insert(knownValues, value)
    DUP2			Set.insert(knownValues, value)
    MSTORE			Set.insert(knownValues, value)
    PUSH 20		Set.insert(knownValues, value)
    ADD			Set.insert(knownValues, value)
    DUP3			Set.insert(knownValues, value)
    DUP2			Set.insert(knownValues, value)
    MSTORE			Set.insert(knownValues, value)
    PUSH 20		Set.insert(knownValues, value)
    ADD			Set.insert(knownValues, value)
    SWAP3			Set.insert(knownValues, value)
    POP			Set.insert(knownValues, value)
    POP			Set.insert(knownValues, value)
    POP			Set.insert(knownValues, value)
    PUSH 20		Set.insert(knownValues, value)
    PUSH 40		Set.insert(knownValues, value)
    MLOAD			Set.insert(knownValues, value)
    DUP1			Set.insert(knownValues, value)
    DUP4			Set.insert(knownValues, value)
    SUB			Set.insert(knownValues, value)
    DUP2			Set.insert(knownValues, value)
    DUP7			Set.insert(knownValues, value)
    PUSH 32		Set.insert(knownValues, value)
    GAS			Set.insert(knownValues, value)
    SUB			Set.insert(knownValues, value)
    DELEGATECALL			Set.insert(knownValues, value)
    ISZERO			Set.insert(knownValues, value)
    PUSH [ErrorTag]		Set.insert(knownValues, value)
    JUMPI			Set.insert(knownValues, value)
    POP			Set.insert(knownValues, value)
    POP			Set.insert(knownValues, value)
    POP			Set.insert(knownValues, value)
    PUSH 40		Set.insert(knownValues, value)
    MLOAD			Set.insert(knownValues, value)
    DUP1			Set.insert(knownValues, value)
    MLOAD			Set.insert(knownValues, value)
    SWAP1			Set.insert(knownValues, value)
    PUSH 20		Set.insert(knownValues, value)
    ADD			Set.insert(knownValues, value)
    POP			Set.insert(knownValues, value)
    ISZERO			!Set.insert(knownValues, value)
    ISZERO			if (!Set.insert(knownValues, value))...
    PUSH [tag6]		if (!Set.insert(knownValues, value))...
    JUMPI			if (!Set.insert(knownValues, value))...
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag6: 
    JUMPDEST		if (!Set.insert(knownValues, value))...
  tag5: 
    JUMPDEST		function register(uint value) {...
    POP			function register(uint value) {...
    JUMP	[out]		function register(uint value) {...

======= Set =======
EVM assembly:
.code:
  PUSH 60		library Set {...
  PUSH 40		library Set {...
  MSTORE			library Set {...
  PUSH #[$00000000…00000000]		library Set {...
  DUP1			library Set {...
  PUSH [$00000000…00000000]		library Set {...
  PUSH 0		library Set {...
  CODECOPY			library Set {...
  PUSH 0		library Set {...
  RETURN			library Set {...
.data:
  0: 
  .code:
    PUSH 301C492D9BE		
    POP			
    PUSH 60		library Set {...
    PUSH 40		library Set {...
    MSTORE			library Set {...
    PUSH 0		library Set {...
    CALLDATALOAD			library Set {...
    PUSH 100000000000000000000000000000000000000000000000000000000		library Set {...
    SWAP1			library Set {...
    DIV			library Set {...
    DUP1			library Set {...
    PUSH 483B8A14		library Set {...
    EQ			library Set {...
    PUSH [tag2]		library Set {...
    JUMPI			library Set {...
    DUP1			library Set {...
    PUSH 6CE8E081		library Set {...
    EQ			library Set {...
    PUSH [tag3]		library Set {...
    JUMPI			library Set {...
    DUP1			library Set {...
    PUSH 831CB739		library Set {...
    EQ			library Set {...
    PUSH [tag4]		library Set {...
    JUMPI			library Set {...
    PUSH [tag1]		library Set {...
    JUMP			library Set {...
  tag1: 
    JUMPDEST		library Set {...
    PUSH [ErrorTag]		library Set {...
    JUMP			library Set {...
  tag2: 
    JUMPDEST		function remove(Data storage self, uint value)...
    PUSH [tag5]		function remove(Data storage self, uint value)...
    PUSH 4		function remove(Data storage self, uint value)...
    DUP1			function remove(Data storage self, uint value)...
    DUP1			function remove(Data storage self, uint value)...
    CALLDATALOAD			function remove(Data storage self, uint value)...
    SWAP1			function remove(Data storage self, uint value)...
    PUSH 20		function remove(Data storage self, uint value)...
    ADD			function remove(Data storage self, uint value)...
    SWAP1			function remove(Data storage self, uint value)...
    SWAP2			function remove(Data storage self, uint value)...
    SWAP1			function remove(Data storage self, uint value)...
    DUP1			function remove(Data storage self, uint value)...
    CALLDATALOAD			function remove(Data storage self, uint value)...
    SWAP1			function remove(Data storage self, uint value)...
    PUSH 20		function remove(Data storage self, uint value)...
    ADD			function remove(Data storage self, uint value)...
    SWAP1			function remove(Data storage self, uint value)...
    SWAP2			function remove(Data storage self, uint value)...
    SWAP1			function remove(Data storage self, uint value)...
    POP			function remove(Data storage self, uint value)...
    POP			function remove(Data storage self, uint value)...
    PUSH [tag6]		function remove(Data storage self, uint value)...
    JUMP			function remove(Data storage self, uint value)...
  tag5: 
    JUMPDEST		function remove(Data storage self, uint value)...
    PUSH 40		function remove(Data storage self, uint value)...
    MLOAD			function remove(Data storage self, uint value)...
    DUP1			function remove(Data storage self, uint value)...
    DUP3			function remove(Data storage self, uint value)...
    DUP2			function remove(Data storage self, uint value)...
    MSTORE			function remove(Data storage self, uint value)...
    PUSH 20		function remove(Data storage self, uint value)...
    ADD			function remove(Data storage self, uint value)...
    SWAP2			function remove(Data storage self, uint value)...
    POP			function remove(Data storage self, uint value)...
    POP			function remove(Data storage self, uint value)...
    PUSH 40		function remove(Data storage self, uint value)...
    MLOAD			function remove(Data storage self, uint value)...
    DUP1			function remove(Data storage self, uint value)...
    SWAP2			function remove(Data storage self, uint value)...
    SUB			function remove(Data storage self, uint value)...
    SWAP1			function remove(Data storage self, uint value)...
    RETURN			function remove(Data storage self, uint value)...
  tag3: 
    JUMPDEST		function contains(Data storage self, uint value)...
    PUSH [tag7]		function contains(Data storage self, uint value)...
    PUSH 4		function contains(Data storage self, uint value)...
    DUP1			function contains(Data storage self, uint value)...
    DUP1			function contains(Data storage self, uint value)...
    CALLDATALOAD			function contains(Data storage self, uint value)...
    SWAP1			function contains(Data storage self, uint value)...
    PUSH 20		function contains(Data storage self, uint value)...
    ADD			function contains(Data storage self, uint value)...
    SWAP1			function contains(Data storage self, uint value)...
    SWAP2			function contains(Data storage self, uint value)...
    SWAP1			function contains(Data storage self, uint value)...
    DUP1			function contains(Data storage self, uint value)...
    CALLDATALOAD			function contains(Data storage self, uint value)...
    SWAP1			function contains(Data storage self, uint value)...
    PUSH 20		function contains(Data storage self, uint value)...
    ADD			function contains(Data storage self, uint value)...
    SWAP1			function contains(Data storage self, uint value)...
    SWAP2			function contains(Data storage self, uint value)...
    SWAP1			function contains(Data storage self, uint value)...
    POP			function contains(Data storage self, uint value)...
    POP			function contains(Data storage self, uint value)...
    PUSH [tag8]		function contains(Data storage self, uint value)...
    JUMP			function contains(Data storage self, uint value)...
  tag7: 
    JUMPDEST		function contains(Data storage self, uint value)...
    PUSH 40		function contains(Data storage self, uint value)...
    MLOAD			function contains(Data storage self, uint value)...
    DUP1			function contains(Data storage self, uint value)...
    DUP3			function contains(Data storage self, uint value)...
    DUP2			function contains(Data storage self, uint value)...
    MSTORE			function contains(Data storage self, uint value)...
    PUSH 20		function contains(Data storage self, uint value)...
    ADD			function contains(Data storage self, uint value)...
    SWAP2			function contains(Data storage self, uint value)...
    POP			function contains(Data storage self, uint value)...
    POP			function contains(Data storage self, uint value)...
    PUSH 40		function contains(Data storage self, uint value)...
    MLOAD			function contains(Data storage self, uint value)...
    DUP1			function contains(Data storage self, uint value)...
    SWAP2			function contains(Data storage self, uint value)...
    SUB			function contains(Data storage self, uint value)...
    SWAP1			function contains(Data storage self, uint value)...
    RETURN			function contains(Data storage self, uint value)...
  tag4: 
    JUMPDEST		function insert(Data storage self, uint value)...
    PUSH [tag9]		function insert(Data storage self, uint value)...
    PUSH 4		function insert(Data storage self, uint value)...
    DUP1			function insert(Data storage self, uint value)...
    DUP1			function insert(Data storage self, uint value)...
    CALLDATALOAD			function insert(Data storage self, uint value)...
    SWAP1			function insert(Data storage self, uint value)...
    PUSH 20		function insert(Data storage self, uint value)...
    ADD			function insert(Data storage self, uint value)...
    SWAP1			function insert(Data storage self, uint value)...
    SWAP2			function insert(Data storage self, uint value)...
    SWAP1			function insert(Data storage self, uint value)...
    DUP1			function insert(Data storage self, uint value)...
    CALLDATALOAD			function insert(Data storage self, uint value)...
    SWAP1			function insert(Data storage self, uint value)...
    PUSH 20		function insert(Data storage self, uint value)...
    ADD			function insert(Data storage self, uint value)...
    SWAP1			function insert(Data storage self, uint value)...
    SWAP2			function insert(Data storage self, uint value)...
    SWAP1			function insert(Data storage self, uint value)...
    POP			function insert(Data storage self, uint value)...
    POP			function insert(Data storage self, uint value)...
    PUSH [tag10]		function insert(Data storage self, uint value)...
    JUMP			function insert(Data storage self, uint value)...
  tag9: 
    JUMPDEST		function insert(Data storage self, uint value)...
    PUSH 40		function insert(Data storage self, uint value)...
    MLOAD			function insert(Data storage self, uint value)...
    DUP1			function insert(Data storage self, uint value)...
    DUP3			function insert(Data storage self, uint value)...
    DUP2			function insert(Data storage self, uint value)...
    MSTORE			function insert(Data storage self, uint value)...
    PUSH 20		function insert(Data storage self, uint value)...
    ADD			function insert(Data storage self, uint value)...
    SWAP2			function insert(Data storage self, uint value)...
    POP			function insert(Data storage self, uint value)...
    POP			function insert(Data storage self, uint value)...
    PUSH 40		function insert(Data storage self, uint value)...
    MLOAD			function insert(Data storage self, uint value)...
    DUP1			function insert(Data storage self, uint value)...
    SWAP2			function insert(Data storage self, uint value)...
    SUB			function insert(Data storage self, uint value)...
    SWAP1			function insert(Data storage self, uint value)...
    RETURN			function insert(Data storage self, uint value)...
  tag10: 
    JUMPDEST		function insert(Data storage self, uint value)...
    PUSH 0		bool
    DUP3			self
    PUSH 0		self.flags
    ADD			self.flags
    PUSH 0		self.flags
    POP			self.flags
    PUSH 0		self.flags[value]
    DUP4			value
    DUP2			self.flags[value]
    MSTORE			self.flags[value]
    PUSH 20		self.flags[value]
    ADD			self.flags[value]
    SWAP1			self.flags[value]
    DUP2			self.flags[value]
    MSTORE			self.flags[value]
    PUSH 20		self.flags[value]
    ADD			self.flags[value]
    PUSH 0		self.flags[value]
    SHA3			self.flags[value]
    PUSH 0		self.flags[value]
    SWAP1			self.flags[value]
    SLOAD			self.flags[value]
    SWAP1			self.flags[value]
    PUSH 100		self.flags[value]
    EXP			self.flags[value]
    SWAP1			self.flags[value]
    DIV			self.flags[value]
    PUSH FF		self.flags[value]
    AND			self.flags[value]
    ISZERO			if (self.flags[value])...
    PUSH [tag12]		if (self.flags[value])...
    JUMPI			if (self.flags[value])...
    PUSH 0		false
    SWAP1			return false
    POP			return false
    PUSH [tag11]		return false
    JUMP			return false
  tag12: 
    JUMPDEST		if (self.flags[value])...
    PUSH 1		true
    DUP4			self
    PUSH 0		self.flags
    ADD			self.flags
    PUSH 0		self.flags
    POP			self.flags
    PUSH 0		self.flags[value]
    DUP5			value
    DUP2			self.flags[value]
    MSTORE			self.flags[value]
    PUSH 20		self.flags[value]
    ADD			self.flags[value]
    SWAP1			self.flags[value]
    DUP2			self.flags[value]
    MSTORE			self.flags[value]
    PUSH 20		self.flags[value]
    ADD			self.flags[value]
    PUSH 0		self.flags[value]
    SHA3			self.flags[value]
    PUSH 0		self.flags[value]
    PUSH 100		self.flags[value] = true
    EXP			self.flags[value] = true
    DUP2			self.flags[value] = true
    SLOAD			self.flags[value] = true
    DUP2			self.flags[value] = true
    PUSH FF		self.flags[value] = true
    MUL			self.flags[value] = true
    NOT			self.flags[value] = true
    AND			self.flags[value] = true
    SWAP1			self.flags[value] = true
    DUP4			self.flags[value] = true
    MUL			self.flags[value] = true
    OR			self.flags[value] = true
    SWAP1			self.flags[value] = true
    SSTORE			self.flags[value] = true
    POP			self.flags[value] = true
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag11]		return true
    JUMP			return true
  tag11: 
    JUMPDEST		function insert(Data storage self, uint value)...
    SWAP3			function insert(Data storage self, uint value)...
    SWAP2			function insert(Data storage self, uint value)...
    POP			function insert(Data storage self, uint value)...
    POP			function insert(Data storage self, uint value)...
    JUMP	[out]		function insert(Data storage self, uint value)...
  tag6: 
    JUMPDEST		function remove(Data storage self, uint value)...
    PUSH 0		bool
    DUP3			self
    PUSH 0		self.flags
    ADD			self.flags
    PUSH 0		self.flags
    POP			self.flags
    PUSH 0		self.flags[value]
    DUP4			value
    DUP2			self.flags[value]
    MSTORE			self.flags[value]
    PUSH 20		self.flags[value]
    ADD			self.flags[value]
    SWAP1			self.flags[value]
    DUP2			self.flags[value]
    MSTORE			self.flags[value]
    PUSH 20		self.flags[value]
    ADD			self.flags[value]
    PUSH 0		self.flags[value]
    SHA3			self.flags[value]
    PUSH 0		self.flags[value]
    SWAP1			self.flags[value]
    SLOAD			self.flags[value]
    SWAP1			self.flags[value]
    PUSH 100		self.flags[value]
    EXP			self.flags[value]
    SWAP1			self.flags[value]
    DIV			self.flags[value]
    PUSH FF		self.flags[value]
    AND			self.flags[value]
    ISZERO			!self.flags[value]
    ISZERO			if (!self.flags[value])...
    PUSH [tag14]		if (!self.flags[value])...
    JUMPI			if (!self.flags[value])...
    PUSH 0		false
    SWAP1			return false
    POP			return false
    PUSH [tag13]		return false
    JUMP			return false
  tag14: 
    JUMPDEST		if (!self.flags[value])...
    PUSH 0		false
    DUP4			self
    PUSH 0		self.flags
    ADD			self.flags
    PUSH 0		self.flags
    POP			self.flags
    PUSH 0		self.flags[value]
    DUP5			value
    DUP2			self.flags[value]
    MSTORE			self.flags[value]
    PUSH 20		self.flags[value]
    ADD			self.flags[value]
    SWAP1			self.flags[value]
    DUP2			self.flags[value]
    MSTORE			self.flags[value]
    PUSH 20		self.flags[value]
    ADD			self.flags[value]
    PUSH 0		self.flags[value]
    SHA3			self.flags[value]
    PUSH 0		self.flags[value]
    PUSH 100		self.flags[value] = false
    EXP			self.flags[value] = false
    DUP2			self.flags[value] = false
    SLOAD			self.flags[value] = false
    DUP2			self.flags[value] = false
    PUSH FF		self.flags[value] = false
    MUL			self.flags[value] = false
    NOT			self.flags[value] = false
    AND			self.flags[value] = false
    SWAP1			self.flags[value] = false
    DUP4			self.flags[value] = false
    MUL			self.flags[value] = false
    OR			self.flags[value] = false
    SWAP1			self.flags[value] = false
    SSTORE			self.flags[value] = false
    POP			self.flags[value] = false
    PUSH 1		true
    SWAP1			return true
    POP			return true
    PUSH [tag13]		return true
    JUMP			return true
  tag13: 
    JUMPDEST		function remove(Data storage self, uint value)...
    SWAP3			function remove(Data storage self, uint value)...
    SWAP2			function remove(Data storage self, uint value)...
    POP			function remove(Data storage self, uint value)...
    POP			function remove(Data storage self, uint value)...
    JUMP	[out]		function remove(Data storage self, uint value)...
  tag8: 
    JUMPDEST		function contains(Data storage self, uint value)...
    PUSH 0		bool
    DUP3			self
    PUSH 0		self.flags
    ADD			self.flags
    PUSH 0		self.flags
    POP			self.flags
    PUSH 0		self.flags[value]
    DUP4			value
    DUP2			self.flags[value]
    MSTORE			self.flags[value]
    PUSH 20		self.flags[value]
    ADD			self.flags[value]
    SWAP1			self.flags[value]
    DUP2			self.flags[value]
    MSTORE			self.flags[value]
    PUSH 20		self.flags[value]
    ADD			self.flags[value]
    PUSH 0		self.flags[value]
    SHA3			self.flags[value]
    PUSH 0		self.flags[value]
    SWAP1			self.flags[value]
    SLOAD			self.flags[value]
    SWAP1			self.flags[value]
    PUSH 100		self.flags[value]
    EXP			self.flags[value]
    SWAP1			self.flags[value]
    DIV			self.flags[value]
    PUSH FF		self.flags[value]
    AND			self.flags[value]
    SWAP1			return self.flags[value]
    POP			return self.flags[value]
    PUSH [tag15]		return self.flags[value]
    JUMP			return self.flags[value]
  tag15: 
    JUMPDEST		function contains(Data storage self, uint value)...
    SWAP3			function contains(Data storage self, uint value)...
    SWAP2			function contains(Data storage self, uint value)...
    POP			function contains(Data storage self, uint value)...
    POP			function contains(Data storage self, uint value)...
    JUMP	[out]		function contains(Data storage self, uint value)...
