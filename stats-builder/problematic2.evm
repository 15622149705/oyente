
======= ReleaseOracle =======
EVM assembly:
.code:
  PUSH 60		contract ReleaseOracle {...
  PUSH 40		contract ReleaseOracle {...
  MSTORE			contract ReleaseOracle {...
  PUSH 40		function ReleaseOracle(address[] signers) {...
  MLOAD			function ReleaseOracle(address[] signers) {...
  PUSHSIZE		function ReleaseOracle(address[] signers) {...
  CODESIZE			function ReleaseOracle(address[] signers) {...
  SUB			function ReleaseOracle(address[] signers) {...
  DUP1			function ReleaseOracle(address[] signers) {...
  PUSHSIZE		function ReleaseOracle(address[] signers) {...
  DUP4			function ReleaseOracle(address[] signers) {...
  CODECOPY			function ReleaseOracle(address[] signers) {...
  DUP2			function ReleaseOracle(address[] signers) {...
  ADD			function ReleaseOracle(address[] signers) {...
  PUSH 40		function ReleaseOracle(address[] signers) {...
  MSTORE			function ReleaseOracle(address[] signers) {...
  DUP1			function ReleaseOracle(address[] signers) {...
  DUP1			function ReleaseOracle(address[] signers) {...
  MLOAD			function ReleaseOracle(address[] signers) {...
  DUP3			function ReleaseOracle(address[] signers) {...
  ADD			function ReleaseOracle(address[] signers) {...
  SWAP2			function ReleaseOracle(address[] signers) {...
  SWAP1			function ReleaseOracle(address[] signers) {...
  PUSH 20		function ReleaseOracle(address[] signers) {...
  ADD			function ReleaseOracle(address[] signers) {...
  POP			function ReleaseOracle(address[] signers) {...
  POP			function ReleaseOracle(address[] signers) {...
tag1: 
  JUMPDEST		function ReleaseOracle(address[] signers) {...
  PUSH 0		uint i
  PUSH 0		0
  DUP3			signers
  MLOAD			signers.length
  EQ			signers.length == 0
  ISZERO			if (signers.length == 0) {...
  PUSH [tag3]		if (signers.length == 0) {...
  JUMPI			if (signers.length == 0) {...
  PUSH 1		true
  PUSH 0		authorised
  PUSH 0		authorised
  POP			authorised
  PUSH 0		authorised[msg.sender]
  CALLER			msg.sender
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authorised[msg.sender]
  AND			authorised[msg.sender]
  DUP2			authorised[msg.sender]
  MSTORE			authorised[msg.sender]
  PUSH 20		authorised[msg.sender]
  ADD			authorised[msg.sender]
  SWAP1			authorised[msg.sender]
  DUP2			authorised[msg.sender]
  MSTORE			authorised[msg.sender]
  PUSH 20		authorised[msg.sender]
  ADD			authorised[msg.sender]
  PUSH 0		authorised[msg.sender]
  SHA3			authorised[msg.sender]
  PUSH 0		authorised[msg.sender]
  PUSH 100		authorised[msg.sender] = true
  EXP			authorised[msg.sender] = true
  DUP2			authorised[msg.sender] = true
  SLOAD			authorised[msg.sender] = true
  DUP2			authorised[msg.sender] = true
  PUSH FF		authorised[msg.sender] = true
  MUL			authorised[msg.sender] = true
  NOT			authorised[msg.sender] = true
  AND			authorised[msg.sender] = true
  SWAP1			authorised[msg.sender] = true
  DUP4			authorised[msg.sender] = true
  MUL			authorised[msg.sender] = true
  OR			authorised[msg.sender] = true
  SWAP1			authorised[msg.sender] = true
  SSTORE			authorised[msg.sender] = true
  POP			authorised[msg.sender] = true
  PUSH 1		voters
  PUSH 0		voters
  POP			voters
  DUP1			voters.push(msg.sender)
  SLOAD			voters.push(msg.sender)
  DUP1			voters.push(msg.sender)
  PUSH 1		voters.push(msg.sender)
  ADD			voters.push(msg.sender)
  DUP3			voters.push(msg.sender)
  DUP2			voters.push(msg.sender)
  DUP2			voters.push(msg.sender)
  SLOAD			voters.push(msg.sender)
  DUP2			voters.push(msg.sender)
  DUP4			voters.push(msg.sender)
  SSTORE			voters.push(msg.sender)
  DUP2			voters.push(msg.sender)
  DUP2			voters.push(msg.sender)
  ISZERO			voters.push(msg.sender)
  GT			voters.push(msg.sender)
  PUSH [tag4]		voters.push(msg.sender)
  JUMPI			voters.push(msg.sender)
  DUP2			voters.push(msg.sender)
  DUP4			voters.push(msg.sender)
  PUSH 0		voters.push(msg.sender)
  MSTORE			voters.push(msg.sender)
  PUSH 20		voters.push(msg.sender)
  PUSH 0		voters.push(msg.sender)
  SHA3			voters.push(msg.sender)
  SWAP2			voters.push(msg.sender)
  DUP3			voters.push(msg.sender)
  ADD			voters.push(msg.sender)
  SWAP2			voters.push(msg.sender)
  ADD			voters.push(msg.sender)
  PUSH [tag5]		voters.push(msg.sender)
  SWAP2			voters.push(msg.sender)
  SWAP1			voters.push(msg.sender)
  PUSH [tag6]		voters.push(msg.sender)
  JUMP			voters.push(msg.sender)
tag6: 
  JUMPDEST		voters.push(msg.sender)
  DUP1			voters.push(msg.sender)
  DUP3			voters.push(msg.sender)
  GT			voters.push(msg.sender)
  ISZERO			voters.push(msg.sender)
  PUSH [tag7]		voters.push(msg.sender)
  JUMPI			voters.push(msg.sender)
  PUSH 0		voters.push(msg.sender)
  DUP2			voters.push(msg.sender)
  DUP2			voters.push(msg.sender)
  POP			voters.push(msg.sender)
  PUSH 0		voters.push(msg.sender)
  SWAP1			voters.push(msg.sender)
  SSTORE			voters.push(msg.sender)
  POP			voters.push(msg.sender)
  PUSH 1		voters.push(msg.sender)
  ADD			voters.push(msg.sender)
  PUSH [tag6]		voters.push(msg.sender)
  JUMP			voters.push(msg.sender)
tag7: 
  JUMPDEST		voters.push(msg.sender)
  POP			voters.push(msg.sender)
  SWAP1			voters.push(msg.sender)
  JUMP			voters.push(msg.sender)
tag5: 
  JUMPDEST		voters.push(msg.sender)
tag4: 
  JUMPDEST		voters.push(msg.sender)
  POP			voters.push(msg.sender)
  POP			voters.push(msg.sender)
  POP			voters.push(msg.sender)
  SWAP2			voters.push(msg.sender)
  SWAP1			voters.push(msg.sender)
  SWAP1			voters.push(msg.sender)
  PUSH 0		voters.push(msg.sender)
  MSTORE			voters.push(msg.sender)
  PUSH 20		voters.push(msg.sender)
  PUSH 0		voters.push(msg.sender)
  SHA3			voters.push(msg.sender)
  SWAP1			voters.push(msg.sender)
  ADD			voters.push(msg.sender)
  PUSH 0		voters.push(msg.sender)
tag8: 
  JUMPDEST		voters.push(msg.sender)
  CALLER			msg.sender
  SWAP1			voters.push(msg.sender)
  SWAP2			voters.push(msg.sender)
  SWAP1			voters.push(msg.sender)
  SWAP2			voters.push(msg.sender)
  PUSH 100		voters.push(msg.sender)
  EXP			voters.push(msg.sender)
  DUP2			voters.push(msg.sender)
  SLOAD			voters.push(msg.sender)
  DUP2			voters.push(msg.sender)
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		voters.push(msg.sender)
  MUL			voters.push(msg.sender)
  NOT			voters.push(msg.sender)
  AND			voters.push(msg.sender)
  SWAP1			voters.push(msg.sender)
  DUP4			voters.push(msg.sender)
  MUL			voters.push(msg.sender)
  OR			voters.push(msg.sender)
  SWAP1			voters.push(msg.sender)
  SSTORE			voters.push(msg.sender)
  POP			voters.push(msg.sender)
  POP			voters.push(msg.sender)
  PUSH [tag2]		return;
  JUMP			return;
tag3: 
  JUMPDEST		if (signers.length == 0) {...
  PUSH 0		0
  SWAP1			uint i = 0
  POP			uint i = 0
tag9: 
  JUMPDEST		for (uint i = 0; i < signers.length; i++) {...
  DUP2			signers
  MLOAD			signers.length
  DUP2			i
  LT			i < signers.length
  ISZERO			for (uint i = 0; i < signers.length; i++) {...
  PUSH [tag10]		for (uint i = 0; i < signers.length; i++) {...
  JUMPI			for (uint i = 0; i < signers.length; i++) {...
  PUSH 1		true
  PUSH 0		authorised
  PUSH 0		authorised
  POP			authorised
  PUSH 0		authorised[signers[i]]
  DUP5			signers
  DUP5			i
  DUP2			signers[i]
  MLOAD			signers[i]
  DUP2			signers[i]
  LT			signers[i]
  ISZERO			signers[i]
  PUSH [ErrorTag]		signers[i]
  JUMPI			signers[i]
  SWAP1			signers[i]
  PUSH 20		signers[i]
  ADD			signers[i]
  SWAP1			signers[i]
  PUSH 20		signers[i]
  MUL			signers[i]
  ADD			signers[i]
  MLOAD			signers[i]
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authorised[signers[i]]
  AND			authorised[signers[i]]
  DUP2			authorised[signers[i]]
  MSTORE			authorised[signers[i]]
  PUSH 20		authorised[signers[i]]
  ADD			authorised[signers[i]]
  SWAP1			authorised[signers[i]]
  DUP2			authorised[signers[i]]
  MSTORE			authorised[signers[i]]
  PUSH 20		authorised[signers[i]]
  ADD			authorised[signers[i]]
  PUSH 0		authorised[signers[i]]
  SHA3			authorised[signers[i]]
  PUSH 0		authorised[signers[i]]
  PUSH 100		authorised[signers[i]] = true
  EXP			authorised[signers[i]] = true
  DUP2			authorised[signers[i]] = true
  SLOAD			authorised[signers[i]] = true
  DUP2			authorised[signers[i]] = true
  PUSH FF		authorised[signers[i]] = true
  MUL			authorised[signers[i]] = true
  NOT			authorised[signers[i]] = true
  AND			authorised[signers[i]] = true
  SWAP1			authorised[signers[i]] = true
  DUP4			authorised[signers[i]] = true
  MUL			authorised[signers[i]] = true
  OR			authorised[signers[i]] = true
  SWAP1			authorised[signers[i]] = true
  SSTORE			authorised[signers[i]] = true
  POP			authorised[signers[i]] = true
  PUSH 1		voters
  PUSH 0		voters
  POP			voters
  DUP1			voters.push(signers[i])
  SLOAD			voters.push(signers[i])
  DUP1			voters.push(signers[i])
  PUSH 1		voters.push(signers[i])
  ADD			voters.push(signers[i])
  DUP3			voters.push(signers[i])
  DUP2			voters.push(signers[i])
  DUP2			voters.push(signers[i])
  SLOAD			voters.push(signers[i])
  DUP2			voters.push(signers[i])
  DUP4			voters.push(signers[i])
  SSTORE			voters.push(signers[i])
  DUP2			voters.push(signers[i])
  DUP2			voters.push(signers[i])
  ISZERO			voters.push(signers[i])
  GT			voters.push(signers[i])
  PUSH [tag12]		voters.push(signers[i])
  JUMPI			voters.push(signers[i])
  DUP2			voters.push(signers[i])
  DUP4			voters.push(signers[i])
  PUSH 0		voters.push(signers[i])
  MSTORE			voters.push(signers[i])
  PUSH 20		voters.push(signers[i])
  PUSH 0		voters.push(signers[i])
  SHA3			voters.push(signers[i])
  SWAP2			voters.push(signers[i])
  DUP3			voters.push(signers[i])
  ADD			voters.push(signers[i])
  SWAP2			voters.push(signers[i])
  ADD			voters.push(signers[i])
  PUSH [tag13]		voters.push(signers[i])
  SWAP2			voters.push(signers[i])
  SWAP1			voters.push(signers[i])
  PUSH [tag14]		voters.push(signers[i])
  JUMP			voters.push(signers[i])
tag14: 
  JUMPDEST		voters.push(signers[i])
  DUP1			voters.push(signers[i])
  DUP3			voters.push(signers[i])
  GT			voters.push(signers[i])
  ISZERO			voters.push(signers[i])
  PUSH [tag15]		voters.push(signers[i])
  JUMPI			voters.push(signers[i])
  PUSH 0		voters.push(signers[i])
  DUP2			voters.push(signers[i])
  DUP2			voters.push(signers[i])
  POP			voters.push(signers[i])
  PUSH 0		voters.push(signers[i])
  SWAP1			voters.push(signers[i])
  SSTORE			voters.push(signers[i])
  POP			voters.push(signers[i])
  PUSH 1		voters.push(signers[i])
  ADD			voters.push(signers[i])
  PUSH [tag14]		voters.push(signers[i])
  JUMP			voters.push(signers[i])
tag15: 
  JUMPDEST		voters.push(signers[i])
  POP			voters.push(signers[i])
  SWAP1			voters.push(signers[i])
  JUMP			voters.push(signers[i])
tag13: 
  JUMPDEST		voters.push(signers[i])
tag12: 
  JUMPDEST		voters.push(signers[i])
  POP			voters.push(signers[i])
  POP			voters.push(signers[i])
  POP			voters.push(signers[i])
  SWAP2			voters.push(signers[i])
  SWAP1			voters.push(signers[i])
  SWAP1			voters.push(signers[i])
  PUSH 0		voters.push(signers[i])
  MSTORE			voters.push(signers[i])
  PUSH 20		voters.push(signers[i])
  PUSH 0		voters.push(signers[i])
  SHA3			voters.push(signers[i])
  SWAP1			voters.push(signers[i])
  ADD			voters.push(signers[i])
  PUSH 0		voters.push(signers[i])
tag16: 
  JUMPDEST		voters.push(signers[i])
  DUP5			signers
  DUP5			i
  DUP2			signers[i]
  MLOAD			signers[i]
  DUP2			signers[i]
  LT			signers[i]
  ISZERO			signers[i]
  PUSH [ErrorTag]		signers[i]
  JUMPI			signers[i]
  SWAP1			signers[i]
  PUSH 20		signers[i]
  ADD			signers[i]
  SWAP1			signers[i]
  PUSH 20		signers[i]
  MUL			signers[i]
  ADD			signers[i]
  MLOAD			signers[i]
  SWAP1			voters.push(signers[i])
  SWAP2			voters.push(signers[i])
  SWAP1			voters.push(signers[i])
  SWAP2			voters.push(signers[i])
  PUSH 100		voters.push(signers[i])
  EXP			voters.push(signers[i])
  DUP2			voters.push(signers[i])
  SLOAD			voters.push(signers[i])
  DUP2			voters.push(signers[i])
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		voters.push(signers[i])
  MUL			voters.push(signers[i])
  NOT			voters.push(signers[i])
  AND			voters.push(signers[i])
  SWAP1			voters.push(signers[i])
  DUP4			voters.push(signers[i])
  MUL			voters.push(signers[i])
  OR			voters.push(signers[i])
  SWAP1			voters.push(signers[i])
  SSTORE			voters.push(signers[i])
  POP			voters.push(signers[i])
  POP			voters.push(signers[i])
tag11: 
  JUMPDEST		for (uint i = 0; i < signers.length; i++) {...
  DUP1			i++
  DUP1			i++
  PUSH 1		i++
  ADD			i++
  SWAP2			i++
  POP			i++
  POP			i++
  PUSH [tag9]		for (uint i = 0; i < signers.length; i++) {...
  JUMP			for (uint i = 0; i < signers.length; i++) {...
tag10: 
  JUMPDEST		for (uint i = 0; i < signers.length; i++) {...
tag2: 
  JUMPDEST		function ReleaseOracle(address[] signers) {...
  POP			function ReleaseOracle(address[] signers) {...
  POP			function ReleaseOracle(address[] signers) {...
  PUSH #[$00000000…00000000]		contract ReleaseOracle {...
  DUP1			contract ReleaseOracle {...
  PUSH [$00000000…00000000]		contract ReleaseOracle {...
  PUSH 0		contract ReleaseOracle {...
  CODECOPY			contract ReleaseOracle {...
  PUSH 0		contract ReleaseOracle {...
  RETURN			contract ReleaseOracle {...
.data:
  0: 
  .code:
    PUSH 60		contract ReleaseOracle {...
    PUSH 40		contract ReleaseOracle {...
    MSTORE			contract ReleaseOracle {...
    CALLDATASIZE			contract ReleaseOracle {...
    ISZERO			contract ReleaseOracle {...
    PUSH [tag1]		contract ReleaseOracle {...
    JUMPI			contract ReleaseOracle {...
    PUSH 0		contract ReleaseOracle {...
    CALLDATALOAD			contract ReleaseOracle {...
    PUSH 100000000000000000000000000000000000000000000000000000000		contract ReleaseOracle {...
    SWAP1			contract ReleaseOracle {...
    DIV			contract ReleaseOracle {...
    DUP1			contract ReleaseOracle {...
    PUSH 26DB7648		contract ReleaseOracle {...
    EQ			contract ReleaseOracle {...
    PUSH [tag2]		contract ReleaseOracle {...
    JUMPI			contract ReleaseOracle {...
    DUP1			contract ReleaseOracle {...
    PUSH 46F0975A		contract ReleaseOracle {...
    EQ			contract ReleaseOracle {...
    PUSH [tag3]		contract ReleaseOracle {...
    JUMPI			contract ReleaseOracle {...
    DUP1			contract ReleaseOracle {...
    PUSH 5C3D005D		contract ReleaseOracle {...
    EQ			contract ReleaseOracle {...
    PUSH [tag4]		contract ReleaseOracle {...
    JUMPI			contract ReleaseOracle {...
    DUP1			contract ReleaseOracle {...
    PUSH 64ED31FE		contract ReleaseOracle {...
    EQ			contract ReleaseOracle {...
    PUSH [tag5]		contract ReleaseOracle {...
    JUMPI			contract ReleaseOracle {...
    DUP1			contract ReleaseOracle {...
    PUSH 9D888E86		contract ReleaseOracle {...
    EQ			contract ReleaseOracle {...
    PUSH [tag6]		contract ReleaseOracle {...
    JUMPI			contract ReleaseOracle {...
    DUP1			contract ReleaseOracle {...
    PUSH BC8FBBF8		contract ReleaseOracle {...
    EQ			contract ReleaseOracle {...
    PUSH [tag7]		contract ReleaseOracle {...
    JUMPI			contract ReleaseOracle {...
    DUP1			contract ReleaseOracle {...
    PUSH BF8ECF9C		contract ReleaseOracle {...
    EQ			contract ReleaseOracle {...
    PUSH [tag8]		contract ReleaseOracle {...
    JUMPI			contract ReleaseOracle {...
    DUP1			contract ReleaseOracle {...
    PUSH D0E0813A		contract ReleaseOracle {...
    EQ			contract ReleaseOracle {...
    PUSH [tag9]		contract ReleaseOracle {...
    JUMPI			contract ReleaseOracle {...
    DUP1			contract ReleaseOracle {...
    PUSH D67CBEC9		contract ReleaseOracle {...
    EQ			contract ReleaseOracle {...
    PUSH [tag10]		contract ReleaseOracle {...
    JUMPI			contract ReleaseOracle {...
    PUSH [tag1]		contract ReleaseOracle {...
    JUMP			contract ReleaseOracle {...
  tag1: 
    JUMPDEST		contract ReleaseOracle {...
    STOP			contract ReleaseOracle {...
  tag2: 
    JUMPDEST		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH [tag11]		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 4		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH [tag12]		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    JUMP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
  tag11: 
    JUMPDEST		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 40		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MLOAD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP8			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH FFFFFFFF		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    AND			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MSTORE			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP7			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH FFFFFFFF		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    AND			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MSTORE			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP6			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH FFFFFFFF		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    AND			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MSTORE			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP5			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MSTORE			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP4			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SUB			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP4			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MSTORE			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP6			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MLOAD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MSTORE			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MLOAD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MUL			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP4			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP4			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP3			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 0		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 4		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP5			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 1F		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DIV			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH F		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MUL			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 3		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    CALL			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP4			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SUB			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP3			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MSTORE			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP5			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MLOAD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MSTORE			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MLOAD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MUL			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP4			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP4			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP3			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 0		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 4		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 20		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP5			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 1F		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DIV			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH F		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MUL			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 3		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    CALL			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    ADD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP9			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    POP			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 40		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    MLOAD			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    DUP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SUB			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    RETURN			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
  tag3: 
    JUMPDEST		function signers() constant returns(address[]) {...
    PUSH [tag13]		function signers() constant returns(address[]) {...
    PUSH 4		function signers() constant returns(address[]) {...
    DUP1			function signers() constant returns(address[]) {...
    POP			function signers() constant returns(address[]) {...
    POP			function signers() constant returns(address[]) {...
    PUSH [tag14]		function signers() constant returns(address[]) {...
    JUMP			function signers() constant returns(address[]) {...
  tag13: 
    JUMPDEST		function signers() constant returns(address[]) {...
    PUSH 40		function signers() constant returns(address[]) {...
    MLOAD			function signers() constant returns(address[]) {...
    DUP1			function signers() constant returns(address[]) {...
    DUP1			function signers() constant returns(address[]) {...
    PUSH 20		function signers() constant returns(address[]) {...
    ADD			function signers() constant returns(address[]) {...
    DUP3			function signers() constant returns(address[]) {...
    DUP2			function signers() constant returns(address[]) {...
    SUB			function signers() constant returns(address[]) {...
    DUP3			function signers() constant returns(address[]) {...
    MSTORE			function signers() constant returns(address[]) {...
    DUP4			function signers() constant returns(address[]) {...
    DUP2			function signers() constant returns(address[]) {...
    DUP2			function signers() constant returns(address[]) {...
    MLOAD			function signers() constant returns(address[]) {...
    DUP2			function signers() constant returns(address[]) {...
    MSTORE			function signers() constant returns(address[]) {...
    PUSH 20		function signers() constant returns(address[]) {...
    ADD			function signers() constant returns(address[]) {...
    SWAP2			function signers() constant returns(address[]) {...
    POP			function signers() constant returns(address[]) {...
    DUP1			function signers() constant returns(address[]) {...
    MLOAD			function signers() constant returns(address[]) {...
    SWAP1			function signers() constant returns(address[]) {...
    PUSH 20		function signers() constant returns(address[]) {...
    ADD			function signers() constant returns(address[]) {...
    SWAP1			function signers() constant returns(address[]) {...
    PUSH 20		function signers() constant returns(address[]) {...
    MUL			function signers() constant returns(address[]) {...
    DUP1			function signers() constant returns(address[]) {...
    DUP4			function signers() constant returns(address[]) {...
    DUP4			function signers() constant returns(address[]) {...
    DUP3			function signers() constant returns(address[]) {...
    SWAP1			function signers() constant returns(address[]) {...
    PUSH 0		function signers() constant returns(address[]) {...
    PUSH 4		function signers() constant returns(address[]) {...
    PUSH 20		function signers() constant returns(address[]) {...
    DUP5			function signers() constant returns(address[]) {...
    PUSH 1F		function signers() constant returns(address[]) {...
    ADD			function signers() constant returns(address[]) {...
    DIV			function signers() constant returns(address[]) {...
    PUSH F		function signers() constant returns(address[]) {...
    MUL			function signers() constant returns(address[]) {...
    PUSH 3		function signers() constant returns(address[]) {...
    ADD			function signers() constant returns(address[]) {...
    CALL			function signers() constant returns(address[]) {...
    POP			function signers() constant returns(address[]) {...
    SWAP1			function signers() constant returns(address[]) {...
    POP			function signers() constant returns(address[]) {...
    ADD			function signers() constant returns(address[]) {...
    SWAP3			function signers() constant returns(address[]) {...
    POP			function signers() constant returns(address[]) {...
    POP			function signers() constant returns(address[]) {...
    POP			function signers() constant returns(address[]) {...
    PUSH 40		function signers() constant returns(address[]) {...
    MLOAD			function signers() constant returns(address[]) {...
    DUP1			function signers() constant returns(address[]) {...
    SWAP2			function signers() constant returns(address[]) {...
    SUB			function signers() constant returns(address[]) {...
    SWAP1			function signers() constant returns(address[]) {...
    RETURN			function signers() constant returns(address[]) {...
  tag4: 
    JUMPDEST		function demote(address user) {...
    PUSH [tag15]		function demote(address user) {...
    PUSH 4		function demote(address user) {...
    DUP1			function demote(address user) {...
    DUP1			function demote(address user) {...
    CALLDATALOAD			function demote(address user) {...
    SWAP1			function demote(address user) {...
    PUSH 20		function demote(address user) {...
    ADD			function demote(address user) {...
    SWAP1			function demote(address user) {...
    SWAP2			function demote(address user) {...
    SWAP1			function demote(address user) {...
    POP			function demote(address user) {...
    POP			function demote(address user) {...
    PUSH [tag16]		function demote(address user) {...
    JUMP			function demote(address user) {...
  tag15: 
    JUMPDEST		function demote(address user) {...
    STOP			function demote(address user) {...
  tag5: 
    JUMPDEST		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH [tag17]		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 4		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    CALLDATALOAD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH [tag18]		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    JUMP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
  tag17: 
    JUMPDEST		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 40		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MLOAD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP4			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SUB			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP4			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MSTORE			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP6			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MLOAD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MSTORE			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MLOAD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MUL			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP4			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP4			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP3			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 0		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 4		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP5			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 1F		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DIV			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH F		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MUL			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 3		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    CALL			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP4			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SUB			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP3			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MSTORE			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP5			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MLOAD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MSTORE			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MLOAD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MUL			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP4			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP4			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP3			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 0		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 4		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP5			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 1F		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DIV			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH F		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MUL			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 3		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    CALL			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    ADD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP5			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 40		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    MLOAD			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    DUP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SUB			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP1			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    RETURN			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
  tag6: 
    JUMPDEST		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH [tag19]		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH 4		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP1			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    POP			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    POP			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH [tag20]		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    JUMP			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
  tag19: 
    JUMPDEST		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH 40		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    MLOAD			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP1			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP7			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH FFFFFFFF		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    AND			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP2			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    MSTORE			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH 20		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    ADD			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP6			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH FFFFFFFF		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    AND			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP2			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    MSTORE			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH 20		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    ADD			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP5			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH FFFFFFFF		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    AND			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP2			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    MSTORE			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH 20		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    ADD			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP4			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP2			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    MSTORE			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH 20		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    ADD			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP3			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP2			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    MSTORE			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH 20		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    ADD			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    SWAP6			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    POP			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    POP			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    POP			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    POP			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    POP			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    POP			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH 40		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    MLOAD			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    DUP1			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    SWAP2			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    SUB			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    SWAP1			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    RETURN			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
  tag7: 
    JUMPDEST		function nuke() {...
    PUSH [tag21]		function nuke() {...
    PUSH 4		function nuke() {...
    DUP1			function nuke() {...
    POP			function nuke() {...
    POP			function nuke() {...
    PUSH [tag22]		function nuke() {...
    JUMP			function nuke() {...
  tag21: 
    JUMPDEST		function nuke() {...
    STOP			function nuke() {...
  tag8: 
    JUMPDEST		function authProposals() constant returns(address[]) {...
    PUSH [tag23]		function authProposals() constant returns(address[]) {...
    PUSH 4		function authProposals() constant returns(address[]) {...
    DUP1			function authProposals() constant returns(address[]) {...
    POP			function authProposals() constant returns(address[]) {...
    POP			function authProposals() constant returns(address[]) {...
    PUSH [tag24]		function authProposals() constant returns(address[]) {...
    JUMP			function authProposals() constant returns(address[]) {...
  tag23: 
    JUMPDEST		function authProposals() constant returns(address[]) {...
    PUSH 40		function authProposals() constant returns(address[]) {...
    MLOAD			function authProposals() constant returns(address[]) {...
    DUP1			function authProposals() constant returns(address[]) {...
    DUP1			function authProposals() constant returns(address[]) {...
    PUSH 20		function authProposals() constant returns(address[]) {...
    ADD			function authProposals() constant returns(address[]) {...
    DUP3			function authProposals() constant returns(address[]) {...
    DUP2			function authProposals() constant returns(address[]) {...
    SUB			function authProposals() constant returns(address[]) {...
    DUP3			function authProposals() constant returns(address[]) {...
    MSTORE			function authProposals() constant returns(address[]) {...
    DUP4			function authProposals() constant returns(address[]) {...
    DUP2			function authProposals() constant returns(address[]) {...
    DUP2			function authProposals() constant returns(address[]) {...
    MLOAD			function authProposals() constant returns(address[]) {...
    DUP2			function authProposals() constant returns(address[]) {...
    MSTORE			function authProposals() constant returns(address[]) {...
    PUSH 20		function authProposals() constant returns(address[]) {...
    ADD			function authProposals() constant returns(address[]) {...
    SWAP2			function authProposals() constant returns(address[]) {...
    POP			function authProposals() constant returns(address[]) {...
    DUP1			function authProposals() constant returns(address[]) {...
    MLOAD			function authProposals() constant returns(address[]) {...
    SWAP1			function authProposals() constant returns(address[]) {...
    PUSH 20		function authProposals() constant returns(address[]) {...
    ADD			function authProposals() constant returns(address[]) {...
    SWAP1			function authProposals() constant returns(address[]) {...
    PUSH 20		function authProposals() constant returns(address[]) {...
    MUL			function authProposals() constant returns(address[]) {...
    DUP1			function authProposals() constant returns(address[]) {...
    DUP4			function authProposals() constant returns(address[]) {...
    DUP4			function authProposals() constant returns(address[]) {...
    DUP3			function authProposals() constant returns(address[]) {...
    SWAP1			function authProposals() constant returns(address[]) {...
    PUSH 0		function authProposals() constant returns(address[]) {...
    PUSH 4		function authProposals() constant returns(address[]) {...
    PUSH 20		function authProposals() constant returns(address[]) {...
    DUP5			function authProposals() constant returns(address[]) {...
    PUSH 1F		function authProposals() constant returns(address[]) {...
    ADD			function authProposals() constant returns(address[]) {...
    DIV			function authProposals() constant returns(address[]) {...
    PUSH F		function authProposals() constant returns(address[]) {...
    MUL			function authProposals() constant returns(address[]) {...
    PUSH 3		function authProposals() constant returns(address[]) {...
    ADD			function authProposals() constant returns(address[]) {...
    CALL			function authProposals() constant returns(address[]) {...
    POP			function authProposals() constant returns(address[]) {...
    SWAP1			function authProposals() constant returns(address[]) {...
    POP			function authProposals() constant returns(address[]) {...
    ADD			function authProposals() constant returns(address[]) {...
    SWAP3			function authProposals() constant returns(address[]) {...
    POP			function authProposals() constant returns(address[]) {...
    POP			function authProposals() constant returns(address[]) {...
    POP			function authProposals() constant returns(address[]) {...
    PUSH 40		function authProposals() constant returns(address[]) {...
    MLOAD			function authProposals() constant returns(address[]) {...
    DUP1			function authProposals() constant returns(address[]) {...
    SWAP2			function authProposals() constant returns(address[]) {...
    SUB			function authProposals() constant returns(address[]) {...
    SWAP1			function authProposals() constant returns(address[]) {...
    RETURN			function authProposals() constant returns(address[]) {...
  tag9: 
    JUMPDEST		function promote(address user) {...
    PUSH [tag25]		function promote(address user) {...
    PUSH 4		function promote(address user) {...
    DUP1			function promote(address user) {...
    DUP1			function promote(address user) {...
    CALLDATALOAD			function promote(address user) {...
    SWAP1			function promote(address user) {...
    PUSH 20		function promote(address user) {...
    ADD			function promote(address user) {...
    SWAP1			function promote(address user) {...
    SWAP2			function promote(address user) {...
    SWAP1			function promote(address user) {...
    POP			function promote(address user) {...
    POP			function promote(address user) {...
    PUSH [tag26]		function promote(address user) {...
    JUMP			function promote(address user) {...
  tag25: 
    JUMPDEST		function promote(address user) {...
    STOP			function promote(address user) {...
  tag10: 
    JUMPDEST		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    PUSH [tag27]		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    PUSH 4		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    DUP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    DUP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    CALLDATALOAD			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    PUSH 20		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    ADD			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP2			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    DUP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    CALLDATALOAD			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    PUSH 20		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    ADD			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP2			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    DUP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    CALLDATALOAD			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    PUSH 20		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    ADD			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP2			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    DUP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    CALLDATALOAD			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    PUSH 20		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    ADD			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP2			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    SWAP1			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    POP			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    POP			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    PUSH [tag28]		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    JUMP			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
  tag27: 
    JUMPDEST		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    STOP			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
  tag14: 
    JUMPDEST		function signers() constant returns(address[]) {...
    PUSH 20		address[]
    PUSH 40		address[]
    MLOAD			address[]
    SWAP1			address[]
    DUP2			address[]
    ADD			address[]
    PUSH 40		address[]
    MSTORE			address[]
    DUP1			address[]
    PUSH 0		address[]
    DUP2			address[]
    MSTORE			address[]
    PUSH 20		address[]
    ADD			address[]
    POP			address[]
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP1			return voters
    SLOAD			return voters
    DUP1			return voters
    PUSH 20		return voters
    MUL			return voters
    PUSH 20		return voters
    ADD			return voters
    PUSH 40		return voters
    MLOAD			return voters
    SWAP1			return voters
    DUP2			return voters
    ADD			return voters
    PUSH 40		return voters
    MSTORE			return voters
    DUP1			return voters
    SWAP3			return voters
    SWAP2			return voters
    SWAP1			return voters
    DUP2			return voters
    DUP2			return voters
    MSTORE			return voters
    PUSH 20		return voters
    ADD			return voters
    DUP3			return voters
    DUP1			return voters
    SLOAD			return voters
    DUP1			return voters
    ISZERO			return voters
    PUSH [tag30]		return voters
    JUMPI			return voters
    PUSH 20		return voters
    MUL			return voters
    DUP3			return voters
    ADD			return voters
    SWAP2			return voters
    SWAP1			return voters
    PUSH 0		return voters
    MSTORE			return voters
    PUSH 20		return voters
    PUSH 0		return voters
    SHA3			return voters
    SWAP1			return voters
  tag31: 
    JUMPDEST		return voters
    DUP2			return voters
    PUSH 0		return voters
    SWAP1			return voters
    SLOAD			return voters
    SWAP1			return voters
    PUSH 100		return voters
    EXP			return voters
    SWAP1			return voters
    DIV			return voters
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		return voters
    AND			return voters
    DUP2			return voters
    MSTORE			return voters
    PUSH 20		return voters
    ADD			return voters
    SWAP1			return voters
    PUSH 1		return voters
    ADD			return voters
    SWAP1			return voters
    DUP1			return voters
    DUP4			return voters
    GT			return voters
    PUSH [tag31]		return voters
    JUMPI			return voters
  tag30: 
    JUMPDEST		return voters
    POP			return voters
    POP			return voters
    POP			return voters
    POP			return voters
    POP			return voters
    SWAP1			return voters
    POP			return voters
    PUSH [tag29]		return voters
    JUMP			return voters
  tag29: 
    JUMPDEST		function signers() constant returns(address[]) {...
    SWAP1			function signers() constant returns(address[]) {...
    JUMP	[out]		function signers() constant returns(address[]) {...
  tag24: 
    JUMPDEST		function authProposals() constant returns(address[]) {...
    PUSH 20		address[]
    PUSH 40		address[]
    MLOAD			address[]
    SWAP1			address[]
    DUP2			address[]
    ADD			address[]
    PUSH 40		address[]
    MSTORE			address[]
    DUP1			address[]
    PUSH 0		address[]
    DUP2			address[]
    MSTORE			address[]
    PUSH 20		address[]
    ADD			address[]
    POP			address[]
    PUSH 3		authPend
    PUSH 0		authPend
    POP			authPend
    DUP1			return authPend
    SLOAD			return authPend
    DUP1			return authPend
    PUSH 20		return authPend
    MUL			return authPend
    PUSH 20		return authPend
    ADD			return authPend
    PUSH 40		return authPend
    MLOAD			return authPend
    SWAP1			return authPend
    DUP2			return authPend
    ADD			return authPend
    PUSH 40		return authPend
    MSTORE			return authPend
    DUP1			return authPend
    SWAP3			return authPend
    SWAP2			return authPend
    SWAP1			return authPend
    DUP2			return authPend
    DUP2			return authPend
    MSTORE			return authPend
    PUSH 20		return authPend
    ADD			return authPend
    DUP3			return authPend
    DUP1			return authPend
    SLOAD			return authPend
    DUP1			return authPend
    ISZERO			return authPend
    PUSH [tag33]		return authPend
    JUMPI			return authPend
    PUSH 20		return authPend
    MUL			return authPend
    DUP3			return authPend
    ADD			return authPend
    SWAP2			return authPend
    SWAP1			return authPend
    PUSH 0		return authPend
    MSTORE			return authPend
    PUSH 20		return authPend
    PUSH 0		return authPend
    SHA3			return authPend
    SWAP1			return authPend
  tag34: 
    JUMPDEST		return authPend
    DUP2			return authPend
    PUSH 0		return authPend
    SWAP1			return authPend
    SLOAD			return authPend
    SWAP1			return authPend
    PUSH 100		return authPend
    EXP			return authPend
    SWAP1			return authPend
    DIV			return authPend
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		return authPend
    AND			return authPend
    DUP2			return authPend
    MSTORE			return authPend
    PUSH 20		return authPend
    ADD			return authPend
    SWAP1			return authPend
    PUSH 1		return authPend
    ADD			return authPend
    SWAP1			return authPend
    DUP1			return authPend
    DUP4			return authPend
    GT			return authPend
    PUSH [tag34]		return authPend
    JUMPI			return authPend
  tag33: 
    JUMPDEST		return authPend
    POP			return authPend
    POP			return authPend
    POP			return authPend
    POP			return authPend
    POP			return authPend
    SWAP1			return authPend
    POP			return authPend
    PUSH [tag32]		return authPend
    JUMP			return authPend
  tag32: 
    JUMPDEST		function authProposals() constant returns(address[]) {...
    SWAP1			function authProposals() constant returns(address[]) {...
    JUMP	[out]		function authProposals() constant returns(address[]) {...
  tag18: 
    JUMPDEST		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    PUSH 20		address[] promote
    PUSH 40		address[] promote
    MLOAD			address[] promote
    SWAP1			address[] promote
    DUP2			address[] promote
    ADD			address[] promote
    PUSH 40		address[] promote
    MSTORE			address[] promote
    DUP1			address[] promote
    PUSH 0		address[] promote
    DUP2			address[] promote
    MSTORE			address[] promote
    PUSH 20		address[] promote
    ADD			address[] promote
    POP			address[] promote
    PUSH 20		address[] demote
    PUSH 40		address[] demote
    MLOAD			address[] demote
    SWAP1			address[] demote
    DUP2			address[] demote
    ADD			address[] demote
    PUSH 40		address[] demote
    MSTORE			address[] demote
    DUP1			address[] demote
    PUSH 0		address[] demote
    DUP2			address[] demote
    MSTORE			address[] demote
    PUSH 20		address[] demote
    ADD			address[] demote
    POP			address[] demote
    PUSH 2		authProps
    PUSH 0		authProps
    POP			authProps
    PUSH 0		authProps[user]
    DUP5			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authProps[user]
    AND			authProps[user]
    DUP2			authProps[user]
    MSTORE			authProps[user]
    PUSH 20		authProps[user]
    ADD			authProps[user]
    SWAP1			authProps[user]
    DUP2			authProps[user]
    MSTORE			authProps[user]
    PUSH 20		authProps[user]
    ADD			authProps[user]
    PUSH 0		authProps[user]
    SHA3			authProps[user]
    PUSH 0		authProps[user]
    POP			authProps[user]
    PUSH 0		authProps[user].pass
    ADD			authProps[user].pass
    PUSH 0		authProps[user].pass
    POP			authProps[user].pass
    PUSH 2		authProps
    PUSH 0		authProps
    POP			authProps
    PUSH 0		authProps[user]
    DUP6			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authProps[user]
    AND			authProps[user]
    DUP2			authProps[user]
    MSTORE			authProps[user]
    PUSH 20		authProps[user]
    ADD			authProps[user]
    SWAP1			authProps[user]
    DUP2			authProps[user]
    MSTORE			authProps[user]
    PUSH 20		authProps[user]
    ADD			authProps[user]
    PUSH 0		authProps[user]
    SHA3			authProps[user]
    PUSH 0		authProps[user]
    POP			authProps[user]
    PUSH 1		authProps[user].fail
    ADD			authProps[user].fail
    PUSH 0		authProps[user].fail
    POP			authProps[user].fail
    DUP2			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    SLOAD			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    MUL			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    PUSH 40		return (authProps[user].pass, authProps[user].fail)
    MLOAD			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    DUP2			return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    PUSH 40		return (authProps[user].pass, authProps[user].fail)
    MSTORE			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    SWAP3			return (authProps[user].pass, authProps[user].fail)
    SWAP2			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    DUP2			return (authProps[user].pass, authProps[user].fail)
    DUP2			return (authProps[user].pass, authProps[user].fail)
    MSTORE			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    DUP3			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    SLOAD			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    ISZERO			return (authProps[user].pass, authProps[user].fail)
    PUSH [tag36]		return (authProps[user].pass, authProps[user].fail)
    JUMPI			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    MUL			return (authProps[user].pass, authProps[user].fail)
    DUP3			return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    SWAP2			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    PUSH 0		return (authProps[user].pass, authProps[user].fail)
    MSTORE			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    PUSH 0		return (authProps[user].pass, authProps[user].fail)
    SHA3			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
  tag37: 
    JUMPDEST		return (authProps[user].pass, authProps[user].fail)
    DUP2			return (authProps[user].pass, authProps[user].fail)
    PUSH 0		return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    SLOAD			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    PUSH 100		return (authProps[user].pass, authProps[user].fail)
    EXP			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    DIV			return (authProps[user].pass, authProps[user].fail)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		return (authProps[user].pass, authProps[user].fail)
    AND			return (authProps[user].pass, authProps[user].fail)
    DUP2			return (authProps[user].pass, authProps[user].fail)
    MSTORE			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    PUSH 1		return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    DUP4			return (authProps[user].pass, authProps[user].fail)
    GT			return (authProps[user].pass, authProps[user].fail)
    PUSH [tag37]		return (authProps[user].pass, authProps[user].fail)
    JUMPI			return (authProps[user].pass, authProps[user].fail)
  tag36: 
    JUMPDEST		return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    SWAP2			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    SLOAD			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    MUL			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    PUSH 40		return (authProps[user].pass, authProps[user].fail)
    MLOAD			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    DUP2			return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    PUSH 40		return (authProps[user].pass, authProps[user].fail)
    MSTORE			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    SWAP3			return (authProps[user].pass, authProps[user].fail)
    SWAP2			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    DUP2			return (authProps[user].pass, authProps[user].fail)
    DUP2			return (authProps[user].pass, authProps[user].fail)
    MSTORE			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    DUP3			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    SLOAD			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    ISZERO			return (authProps[user].pass, authProps[user].fail)
    PUSH [tag38]		return (authProps[user].pass, authProps[user].fail)
    JUMPI			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    MUL			return (authProps[user].pass, authProps[user].fail)
    DUP3			return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    SWAP2			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    PUSH 0		return (authProps[user].pass, authProps[user].fail)
    MSTORE			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    PUSH 0		return (authProps[user].pass, authProps[user].fail)
    SHA3			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
  tag39: 
    JUMPDEST		return (authProps[user].pass, authProps[user].fail)
    DUP2			return (authProps[user].pass, authProps[user].fail)
    PUSH 0		return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    SLOAD			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    PUSH 100		return (authProps[user].pass, authProps[user].fail)
    EXP			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    DIV			return (authProps[user].pass, authProps[user].fail)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		return (authProps[user].pass, authProps[user].fail)
    AND			return (authProps[user].pass, authProps[user].fail)
    DUP2			return (authProps[user].pass, authProps[user].fail)
    MSTORE			return (authProps[user].pass, authProps[user].fail)
    PUSH 20		return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    PUSH 1		return (authProps[user].pass, authProps[user].fail)
    ADD			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    DUP1			return (authProps[user].pass, authProps[user].fail)
    DUP4			return (authProps[user].pass, authProps[user].fail)
    GT			return (authProps[user].pass, authProps[user].fail)
    PUSH [tag39]		return (authProps[user].pass, authProps[user].fail)
    JUMPI			return (authProps[user].pass, authProps[user].fail)
  tag38: 
    JUMPDEST		return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    SWAP1			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    SWAP2			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    SWAP2			return (authProps[user].pass, authProps[user].fail)
    POP			return (authProps[user].pass, authProps[user].fail)
    PUSH [tag35]		return (authProps[user].pass, authProps[user].fail)
    JUMP			return (authProps[user].pass, authProps[user].fail)
  tag35: 
    JUMPDEST		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    POP			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    SWAP2			function authVotes(address user) constant returns(address[] promote, address[] demote) {...
    JUMP	[out]		function authVotes(address user) constant returns(address[] promote, address[] demote) {...
  tag20: 
    JUMPDEST		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    PUSH 0		uint32 major
    PUSH 0		uint32 minor
    PUSH 0		uint32 patch
    PUSH 0		bytes20 commit
    PUSH 0		uint time
    PUSH 0		var release
    PUSH 0		0
    PUSH 8		releases
    PUSH 0		releases
    POP			releases
    DUP1			releases.length
    SLOAD			releases.length
    SWAP1			releases.length
    POP			releases.length
    EQ			releases.length == 0
    ISZERO			if (releases.length == 0) {...
    PUSH [tag41]		if (releases.length == 0) {...
    JUMPI			if (releases.length == 0) {...
    PUSH 0		0
    PUSH 0		0
    PUSH 0		0
    PUSH 0		0
    PUSH 0		0
    DUP5			return (0, 0, 0, 0, 0)
    SWAP5			return (0, 0, 0, 0, 0)
    POP			return (0, 0, 0, 0, 0)
    DUP4			return (0, 0, 0, 0, 0)
    SWAP4			return (0, 0, 0, 0, 0)
    POP			return (0, 0, 0, 0, 0)
    DUP3			return (0, 0, 0, 0, 0)
    SWAP3			return (0, 0, 0, 0, 0)
    POP			return (0, 0, 0, 0, 0)
    DUP2			return (0, 0, 0, 0, 0)
    PUSH 1000000000000000000000000		return (0, 0, 0, 0, 0)
    MUL			return (0, 0, 0, 0, 0)
    SWAP2			return (0, 0, 0, 0, 0)
    POP			return (0, 0, 0, 0, 0)
    DUP1			return (0, 0, 0, 0, 0)
    SWAP1			return (0, 0, 0, 0, 0)
    POP			return (0, 0, 0, 0, 0)
    SWAP6			return (0, 0, 0, 0, 0)
    POP			return (0, 0, 0, 0, 0)
    SWAP6			return (0, 0, 0, 0, 0)
    POP			return (0, 0, 0, 0, 0)
    SWAP6			return (0, 0, 0, 0, 0)
    POP			return (0, 0, 0, 0, 0)
    SWAP6			return (0, 0, 0, 0, 0)
    POP			return (0, 0, 0, 0, 0)
    SWAP6			return (0, 0, 0, 0, 0)
    POP			return (0, 0, 0, 0, 0)
    PUSH [tag40]		return (0, 0, 0, 0, 0)
    JUMP			return (0, 0, 0, 0, 0)
  tag41: 
    JUMPDEST		if (releases.length == 0) {...
    PUSH 8		releases
    PUSH 0		releases
    POP			releases
    PUSH 1		1
    PUSH 8		releases
    PUSH 0		releases
    POP			releases
    DUP1			releases.length
    SLOAD			releases.length
    SWAP1			releases.length
    POP			releases.length
    SUB			releases.length - 1
    DUP2			releases[releases.length - 1]
    SLOAD			releases[releases.length - 1]
    DUP2			releases[releases.length - 1]
    LT			releases[releases.length - 1]
    ISZERO			releases[releases.length - 1]
    PUSH [ErrorTag]		releases[releases.length - 1]
    JUMPI			releases[releases.length - 1]
    SWAP1			releases[releases.length - 1]
    PUSH 0		releases[releases.length - 1]
    MSTORE			releases[releases.length - 1]
    PUSH 20		releases[releases.length - 1]
    PUSH 0		releases[releases.length - 1]
    SHA3			releases[releases.length - 1]
    SWAP1			releases[releases.length - 1]
    PUSH 4		releases[releases.length - 1]
    MUL			releases[releases.length - 1]
    ADD			releases[releases.length - 1]
    PUSH 0		releases[releases.length - 1]
  tag42: 
    JUMPDEST		releases[releases.length - 1]
    POP			releases[releases.length - 1]
    SWAP1			var release = releases[releases.length - 1]
    POP			var release = releases[releases.length - 1]
    DUP1			release
    PUSH 0		release.major
    ADD			release.major
    PUSH 0		release.major
    SWAP1			release.major
    SLOAD			release.major
    SWAP1			release.major
    PUSH 100		release.major
    EXP			release.major
    SWAP1			release.major
    DIV			release.major
    PUSH FFFFFFFF		release.major
    AND			release.major
    DUP2			release
    PUSH 0		release.minor
    ADD			release.minor
    PUSH 4		release.minor
    SWAP1			release.minor
    SLOAD			release.minor
    SWAP1			release.minor
    PUSH 100		release.minor
    EXP			release.minor
    SWAP1			release.minor
    DIV			release.minor
    PUSH FFFFFFFF		release.minor
    AND			release.minor
    DUP3			release
    PUSH 0		release.patch
    ADD			release.patch
    PUSH 8		release.patch
    SWAP1			release.patch
    SLOAD			release.patch
    SWAP1			release.patch
    PUSH 100		release.patch
    EXP			release.patch
    SWAP1			release.patch
    DIV			release.patch
    PUSH FFFFFFFF		release.patch
    AND			release.patch
    DUP4			release
    PUSH 0		release.commit
    ADD			release.commit
    PUSH C		release.commit
    SWAP1			release.commit
    SLOAD			release.commit
    SWAP1			release.commit
    PUSH 100		release.commit
    EXP			release.commit
    SWAP1			release.commit
    DIV			release.commit
    PUSH 1000000000000000000000000		release.commit
    MUL			release.commit
    DUP5			release
    PUSH 1		release.time
    ADD			release.time
    PUSH 0		release.time
    SWAP1			release.time
    SLOAD			release.time
    SWAP1			release.time
    PUSH 100		release.time
    EXP			release.time
    SWAP1			release.time
    DIV			release.time
    PUSH FFFFFFFFFFFFFFFF		release.time
    AND			release.time
    DUP1			return (release.major, release.minor, release.patch, release.commit, release.time)
    PUSH FFFFFFFFFFFFFFFF		return (release.major, release.minor, release.patch, release.commit, release.time)
    AND			return (release.major, release.minor, release.patch, release.commit, release.time)
    SWAP1			return (release.major, release.minor, release.patch, release.commit, release.time)
    POP			return (release.major, release.minor, release.patch, release.commit, release.time)
    SWAP6			return (release.major, release.minor, release.patch, release.commit, release.time)
    POP			return (release.major, release.minor, release.patch, release.commit, release.time)
    SWAP6			return (release.major, release.minor, release.patch, release.commit, release.time)
    POP			return (release.major, release.minor, release.patch, release.commit, release.time)
    SWAP6			return (release.major, release.minor, release.patch, release.commit, release.time)
    POP			return (release.major, release.minor, release.patch, release.commit, release.time)
    SWAP6			return (release.major, release.minor, release.patch, release.commit, release.time)
    POP			return (release.major, release.minor, release.patch, release.commit, release.time)
    SWAP6			return (release.major, release.minor, release.patch, release.commit, release.time)
    POP			return (release.major, release.minor, release.patch, release.commit, release.time)
    PUSH [tag40]		return (release.major, release.minor, release.patch, release.commit, release.time)
    JUMP			return (release.major, release.minor, release.patch, release.commit, release.time)
  tag40: 
    JUMPDEST		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    POP			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    SWAP1			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    SWAP2			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    SWAP3			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    SWAP4			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    SWAP5			function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
    JUMP	[out]		function currentVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, uint time) {...
  tag12: 
    JUMPDEST		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    PUSH 0		uint32 major
    PUSH 0		uint32 minor
    PUSH 0		uint32 patch
    PUSH 0		bytes20 commit
    PUSH 20		address[] pass
    PUSH 40		address[] pass
    MLOAD			address[] pass
    SWAP1			address[] pass
    DUP2			address[] pass
    ADD			address[] pass
    PUSH 40		address[] pass
    MSTORE			address[] pass
    DUP1			address[] pass
    PUSH 0		address[] pass
    DUP2			address[] pass
    MSTORE			address[] pass
    PUSH 20		address[] pass
    ADD			address[] pass
    POP			address[] pass
    PUSH 20		address[] fail
    PUSH 40		address[] fail
    MLOAD			address[] fail
    SWAP1			address[] fail
    DUP2			address[] fail
    ADD			address[] fail
    PUSH 40		address[] fail
    MSTORE			address[] fail
    DUP1			address[] fail
    PUSH 0		address[] fail
    DUP2			address[] fail
    MSTORE			address[] fail
    PUSH 20		address[] fail
    ADD			address[] fail
    POP			address[] fail
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.major
    ADD			verProp.major
    PUSH 0		verProp.major
    SWAP1			verProp.major
    SLOAD			verProp.major
    SWAP1			verProp.major
    PUSH 100		verProp.major
    EXP			verProp.major
    SWAP1			verProp.major
    DIV			verProp.major
    PUSH FFFFFFFF		verProp.major
    AND			verProp.major
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.minor
    ADD			verProp.minor
    PUSH 4		verProp.minor
    SWAP1			verProp.minor
    SLOAD			verProp.minor
    SWAP1			verProp.minor
    PUSH 100		verProp.minor
    EXP			verProp.minor
    SWAP1			verProp.minor
    DIV			verProp.minor
    PUSH FFFFFFFF		verProp.minor
    AND			verProp.minor
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.patch
    ADD			verProp.patch
    PUSH 8		verProp.patch
    SWAP1			verProp.patch
    SLOAD			verProp.patch
    SWAP1			verProp.patch
    PUSH 100		verProp.patch
    EXP			verProp.patch
    SWAP1			verProp.patch
    DIV			verProp.patch
    PUSH FFFFFFFF		verProp.patch
    AND			verProp.patch
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.commit
    ADD			verProp.commit
    PUSH C		verProp.commit
    SWAP1			verProp.commit
    SLOAD			verProp.commit
    SWAP1			verProp.commit
    PUSH 100		verProp.commit
    EXP			verProp.commit
    SWAP1			verProp.commit
    DIV			verProp.commit
    PUSH 1000000000000000000000000		verProp.commit
    MUL			verProp.commit
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 2		verProp.votes
    ADD			verProp.votes
    PUSH 0		verProp.votes
    POP			verProp.votes
    PUSH 0		verProp.votes.pass
    ADD			verProp.votes.pass
    PUSH 0		verProp.votes.pass
    POP			verProp.votes.pass
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 2		verProp.votes
    ADD			verProp.votes
    PUSH 0		verProp.votes
    POP			verProp.votes
    PUSH 1		verProp.votes.fail
    ADD			verProp.votes.fail
    PUSH 0		verProp.votes.fail
    POP			verProp.votes.fail
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SLOAD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MUL			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 40		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MLOAD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 40		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MSTORE			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP3			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MSTORE			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP3			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SLOAD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ISZERO			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH [tag44]		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    JUMPI			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MUL			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP3			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 0		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MSTORE			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 0		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SHA3			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
  tag45: 
    JUMPDEST		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 0		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SLOAD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 100		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    EXP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DIV			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    AND			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MSTORE			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 1		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP4			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    GT			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH [tag45]		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    JUMPI			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
  tag44: 
    JUMPDEST		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SLOAD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MUL			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 40		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MLOAD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 40		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MSTORE			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP3			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MSTORE			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP3			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SLOAD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ISZERO			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH [tag46]		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    JUMPI			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MUL			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP3			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 0		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MSTORE			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 0		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SHA3			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
  tag47: 
    JUMPDEST		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 0		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SLOAD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 100		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    EXP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DIV			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    AND			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP2			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    MSTORE			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 20		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH 1		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    ADD			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    DUP4			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    GT			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH [tag47]		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    JUMPI			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
  tag46: 
    JUMPDEST		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP1			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP6			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP6			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP6			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP6			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP6			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    SWAP6			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    POP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    PUSH [tag43]		return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
    JUMP			return (verProp.major, verProp.minor, verProp.patch, verProp.commit, verProp.votes.pass, verProp.votes.fail)
  tag43: 
    JUMPDEST		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP1			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP2			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP3			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP4			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP5			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    SWAP6			function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
    JUMP	[out]		function proposedVersion() constant returns (uint32 major, uint32 minor, uint32 patch, bytes20 commit, address[] pass, address[] fail) {...
  tag26: 
    JUMPDEST		function promote(address user) {...
    PUSH [tag49]		updateSigner(user, true)
    DUP2			user
    PUSH 1		true
    PUSH [tag50]		updateSigner
    JUMP	[in]		updateSigner(user, true)
  tag49: 
    JUMPDEST		updateSigner(user, true)
  tag48: 
    JUMPDEST		function promote(address user) {...
    POP			function promote(address user) {...
    JUMP	[out]		function promote(address user) {...
  tag16: 
    JUMPDEST		function demote(address user) {...
    PUSH [tag52]		updateSigner(user, false)
    DUP2			user
    PUSH 0		false
    PUSH [tag50]		updateSigner
    JUMP	[in]		updateSigner(user, false)
  tag52: 
    JUMPDEST		updateSigner(user, false)
  tag51: 
    JUMPDEST		function demote(address user) {...
    POP			function demote(address user) {...
    JUMP	[out]		function demote(address user) {...
  tag28: 
    JUMPDEST		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    PUSH [tag54]		updateRelease(major, minor, patch, commit, true)
    DUP5			major
    DUP5			minor
    DUP5			patch
    DUP5			commit
    PUSH 1		true
    PUSH [tag55]		updateRelease
    JUMP	[in]		updateRelease(major, minor, patch, commit, true)
  tag54: 
    JUMPDEST		updateRelease(major, minor, patch, commit, true)
  tag53: 
    JUMPDEST		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    POP			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    POP			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    POP			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    POP			function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
    JUMP	[out]		function release(uint32 major, uint32 minor, uint32 patch, bytes20 commit) {...
  tag22: 
    JUMPDEST		function nuke() {...
    PUSH [tag57]		updateRelease(0, 0, 0, 0, false)
    PUSH 0		0
    PUSH 0		0
    PUSH 0		0
    PUSH 0		0
    PUSH 1000000000000000000000000		updateRelease(0, 0, 0, 0, false)
    MUL			updateRelease(0, 0, 0, 0, false)
    PUSH 0		false
    PUSH [tag55]		updateRelease
    JUMP	[in]		updateRelease(0, 0, 0, 0, false)
  tag57: 
    JUMPDEST		updateRelease(0, 0, 0, 0, false)
  tag56: 
    JUMPDEST		function nuke() {...
    JUMP	[out]		function nuke() {...
  tag50: 
    JUMPDEST		function updateSigner(address user, bool authorize) internal isSigner {...
    PUSH 0		Votes votes
    PUSH 0		uint i
    PUSH 0		authorised
    PUSH 0		authorised
    POP			authorised
    PUSH 0		authorised[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authorised[msg.sender]
    AND			authorised[msg.sender]
    DUP2			authorised[msg.sender]
    MSTORE			authorised[msg.sender]
    PUSH 20		authorised[msg.sender]
    ADD			authorised[msg.sender]
    SWAP1			authorised[msg.sender]
    DUP2			authorised[msg.sender]
    MSTORE			authorised[msg.sender]
    PUSH 20		authorised[msg.sender]
    ADD			authorised[msg.sender]
    PUSH 0		authorised[msg.sender]
    SHA3			authorised[msg.sender]
    PUSH 0		authorised[msg.sender]
    SWAP1			authorised[msg.sender]
    SLOAD			authorised[msg.sender]
    SWAP1			authorised[msg.sender]
    PUSH 100		authorised[msg.sender]
    EXP			authorised[msg.sender]
    SWAP1			authorised[msg.sender]
    DIV			authorised[msg.sender]
    PUSH FF		authorised[msg.sender]
    AND			authorised[msg.sender]
    ISZERO			if (authorised[msg.sender]) {...
    PUSH [tag59]		if (authorised[msg.sender]) {...
    JUMPI			if (authorised[msg.sender]) {...
    PUSH 2		authProps
    PUSH 0		authProps
    POP			authProps
    PUSH 0		authProps[user]
    DUP6			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authProps[user]
    AND			authProps[user]
    DUP2			authProps[user]
    MSTORE			authProps[user]
    PUSH 20		authProps[user]
    ADD			authProps[user]
    SWAP1			authProps[user]
    DUP2			authProps[user]
    MSTORE			authProps[user]
    PUSH 20		authProps[user]
    ADD			authProps[user]
    PUSH 0		authProps[user]
    SHA3			authProps[user]
    PUSH 0		authProps[user]
    POP			authProps[user]
    SWAP2			Votes votes = authProps[user]
    POP			Votes votes = authProps[user]
    PUSH 0		0
    SWAP1			uint i = 0
    POP			uint i = 0
  tag60: 
    JUMPDEST		for (uint i = 0; i < votes.pass.length; i++) {...
    DUP2			votes
    PUSH 0		votes.pass
    ADD			votes.pass
    PUSH 0		votes.pass
    POP			votes.pass
    DUP1			votes.pass.length
    SLOAD			votes.pass.length
    SWAP1			votes.pass.length
    POP			votes.pass.length
    DUP2			i
    LT			i < votes.pass.length
    ISZERO			for (uint i = 0; i < votes.pass.length; i++) {...
    PUSH [tag61]		for (uint i = 0; i < votes.pass.length; i++) {...
    JUMPI			for (uint i = 0; i < votes.pass.length; i++) {...
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.pass[i] == msg.sender
    AND			votes.pass[i] == msg.sender
    DUP3			votes
    PUSH 0		votes.pass
    ADD			votes.pass
    PUSH 0		votes.pass
    POP			votes.pass
    DUP3			i
    DUP2			votes.pass[i]
    SLOAD			votes.pass[i]
    DUP2			votes.pass[i]
    LT			votes.pass[i]
    ISZERO			votes.pass[i]
    PUSH [ErrorTag]		votes.pass[i]
    JUMPI			votes.pass[i]
    SWAP1			votes.pass[i]
    PUSH 0		votes.pass[i]
    MSTORE			votes.pass[i]
    PUSH 20		votes.pass[i]
    PUSH 0		votes.pass[i]
    SHA3			votes.pass[i]
    SWAP1			votes.pass[i]
    ADD			votes.pass[i]
    PUSH 0		votes.pass[i]
  tag63: 
    JUMPDEST		votes.pass[i]
    SWAP1			votes.pass[i]
    SLOAD			votes.pass[i]
    SWAP1			votes.pass[i]
    PUSH 100		votes.pass[i]
    EXP			votes.pass[i]
    SWAP1			votes.pass[i]
    DIV			votes.pass[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.pass[i]
    AND			votes.pass[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.pass[i] == msg.sender
    AND			votes.pass[i] == msg.sender
    EQ			votes.pass[i] == msg.sender
    ISZERO			if (votes.pass[i] == msg.sender) {...
    PUSH [tag64]		if (votes.pass[i] == msg.sender) {...
    JUMPI			if (votes.pass[i] == msg.sender) {...
    PUSH [tag58]		return;
    JUMP			return;
  tag64: 
    JUMPDEST		if (votes.pass[i] == msg.sender) {...
  tag62: 
    JUMPDEST		for (uint i = 0; i < votes.pass.length; i++) {...
    DUP1			i++
    DUP1			i++
    PUSH 1		i++
    ADD			i++
    SWAP2			i++
    POP			i++
    POP			i++
    PUSH [tag60]		for (uint i = 0; i < votes.pass.length; i++) {...
    JUMP			for (uint i = 0; i < votes.pass.length; i++) {...
  tag61: 
    JUMPDEST		for (uint i = 0; i < votes.pass.length; i++) {...
    PUSH 0		0
    SWAP1			i = 0
    POP			i = 0
    DUP1			i = 0
    POP			i = 0
  tag65: 
    JUMPDEST		for (i = 0; i < votes.fail.length; i++) {...
    DUP2			votes
    PUSH 1		votes.fail
    ADD			votes.fail
    PUSH 0		votes.fail
    POP			votes.fail
    DUP1			votes.fail.length
    SLOAD			votes.fail.length
    SWAP1			votes.fail.length
    POP			votes.fail.length
    DUP2			i
    LT			i < votes.fail.length
    ISZERO			for (i = 0; i < votes.fail.length; i++) {...
    PUSH [tag66]		for (i = 0; i < votes.fail.length; i++) {...
    JUMPI			for (i = 0; i < votes.fail.length; i++) {...
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.fail[i] == msg.sender
    AND			votes.fail[i] == msg.sender
    DUP3			votes
    PUSH 1		votes.fail
    ADD			votes.fail
    PUSH 0		votes.fail
    POP			votes.fail
    DUP3			i
    DUP2			votes.fail[i]
    SLOAD			votes.fail[i]
    DUP2			votes.fail[i]
    LT			votes.fail[i]
    ISZERO			votes.fail[i]
    PUSH [ErrorTag]		votes.fail[i]
    JUMPI			votes.fail[i]
    SWAP1			votes.fail[i]
    PUSH 0		votes.fail[i]
    MSTORE			votes.fail[i]
    PUSH 20		votes.fail[i]
    PUSH 0		votes.fail[i]
    SHA3			votes.fail[i]
    SWAP1			votes.fail[i]
    ADD			votes.fail[i]
    PUSH 0		votes.fail[i]
  tag68: 
    JUMPDEST		votes.fail[i]
    SWAP1			votes.fail[i]
    SLOAD			votes.fail[i]
    SWAP1			votes.fail[i]
    PUSH 100		votes.fail[i]
    EXP			votes.fail[i]
    SWAP1			votes.fail[i]
    DIV			votes.fail[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.fail[i]
    AND			votes.fail[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.fail[i] == msg.sender
    AND			votes.fail[i] == msg.sender
    EQ			votes.fail[i] == msg.sender
    ISZERO			if (votes.fail[i] == msg.sender) {...
    PUSH [tag69]		if (votes.fail[i] == msg.sender) {...
    JUMPI			if (votes.fail[i] == msg.sender) {...
    PUSH [tag58]		return;
    JUMP			return;
  tag69: 
    JUMPDEST		if (votes.fail[i] == msg.sender) {...
  tag67: 
    JUMPDEST		for (i = 0; i < votes.fail.length; i++) {...
    DUP1			i++
    DUP1			i++
    PUSH 1		i++
    ADD			i++
    SWAP2			i++
    POP			i++
    POP			i++
    PUSH [tag65]		for (i = 0; i < votes.fail.length; i++) {...
    JUMP			for (i = 0; i < votes.fail.length; i++) {...
  tag66: 
    JUMPDEST		for (i = 0; i < votes.fail.length; i++) {...
    PUSH 0		0
    DUP3			votes
    PUSH 0		votes.pass
    ADD			votes.pass
    PUSH 0		votes.pass
    POP			votes.pass
    DUP1			votes.pass.length
    SLOAD			votes.pass.length
    SWAP1			votes.pass.length
    POP			votes.pass.length
    EQ			votes.pass.length == 0
    DUP1			votes.pass.length == 0 && votes.fail.length == 0
    ISZERO			votes.pass.length == 0 && votes.fail.length == 0
    PUSH [tag70]		votes.pass.length == 0 && votes.fail.length == 0
    JUMPI			votes.pass.length == 0 && votes.fail.length == 0
    POP			votes.pass.length == 0 && votes.fail.length == 0
    PUSH 0		0
    DUP3			votes
    PUSH 1		votes.fail
    ADD			votes.fail
    PUSH 0		votes.fail
    POP			votes.fail
    DUP1			votes.fail.length
    SLOAD			votes.fail.length
    SWAP1			votes.fail.length
    POP			votes.fail.length
    EQ			votes.fail.length == 0
  tag70: 
    JUMPDEST		votes.pass.length == 0 && votes.fail.length == 0
    ISZERO			if (votes.pass.length == 0 && votes.fail.length == 0) {...
    PUSH [tag71]		if (votes.pass.length == 0 && votes.fail.length == 0) {...
    JUMPI			if (votes.pass.length == 0 && votes.fail.length == 0) {...
    PUSH 3		authPend
    PUSH 0		authPend
    POP			authPend
    DUP1			authPend.push(user)
    SLOAD			authPend.push(user)
    DUP1			authPend.push(user)
    PUSH 1		authPend.push(user)
    ADD			authPend.push(user)
    DUP3			authPend.push(user)
    DUP2			authPend.push(user)
    DUP2			authPend.push(user)
    SLOAD			authPend.push(user)
    DUP2			authPend.push(user)
    DUP4			authPend.push(user)
    SSTORE			authPend.push(user)
    DUP2			authPend.push(user)
    DUP2			authPend.push(user)
    ISZERO			authPend.push(user)
    GT			authPend.push(user)
    PUSH [tag72]		authPend.push(user)
    JUMPI			authPend.push(user)
    DUP2			authPend.push(user)
    DUP4			authPend.push(user)
    PUSH 0		authPend.push(user)
    MSTORE			authPend.push(user)
    PUSH 20		authPend.push(user)
    PUSH 0		authPend.push(user)
    SHA3			authPend.push(user)
    SWAP2			authPend.push(user)
    DUP3			authPend.push(user)
    ADD			authPend.push(user)
    SWAP2			authPend.push(user)
    ADD			authPend.push(user)
    PUSH [tag73]		authPend.push(user)
    SWAP2			authPend.push(user)
    SWAP1			authPend.push(user)
    PUSH [tag74]		authPend.push(user)
    JUMP			authPend.push(user)
  tag74: 
    JUMPDEST		authPend.push(user)
    DUP1			authPend.push(user)
    DUP3			authPend.push(user)
    GT			authPend.push(user)
    ISZERO			authPend.push(user)
    PUSH [tag75]		authPend.push(user)
    JUMPI			authPend.push(user)
    PUSH 0		authPend.push(user)
    DUP2			authPend.push(user)
    DUP2			authPend.push(user)
    POP			authPend.push(user)
    PUSH 0		authPend.push(user)
    SWAP1			authPend.push(user)
    SSTORE			authPend.push(user)
    POP			authPend.push(user)
    PUSH 1		authPend.push(user)
    ADD			authPend.push(user)
    PUSH [tag74]		authPend.push(user)
    JUMP			authPend.push(user)
  tag75: 
    JUMPDEST		authPend.push(user)
    POP			authPend.push(user)
    SWAP1			authPend.push(user)
    JUMP			authPend.push(user)
  tag73: 
    JUMPDEST		authPend.push(user)
  tag72: 
    JUMPDEST		authPend.push(user)
    POP			authPend.push(user)
    POP			authPend.push(user)
    POP			authPend.push(user)
    SWAP2			authPend.push(user)
    SWAP1			authPend.push(user)
    SWAP1			authPend.push(user)
    PUSH 0		authPend.push(user)
    MSTORE			authPend.push(user)
    PUSH 20		authPend.push(user)
    PUSH 0		authPend.push(user)
    SHA3			authPend.push(user)
    SWAP1			authPend.push(user)
    ADD			authPend.push(user)
    PUSH 0		authPend.push(user)
  tag76: 
    JUMPDEST		authPend.push(user)
    DUP7			user
    SWAP1			authPend.push(user)
    SWAP2			authPend.push(user)
    SWAP1			authPend.push(user)
    SWAP2			authPend.push(user)
    PUSH 100		authPend.push(user)
    EXP			authPend.push(user)
    DUP2			authPend.push(user)
    SLOAD			authPend.push(user)
    DUP2			authPend.push(user)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authPend.push(user)
    MUL			authPend.push(user)
    NOT			authPend.push(user)
    AND			authPend.push(user)
    SWAP1			authPend.push(user)
    DUP4			authPend.push(user)
    MUL			authPend.push(user)
    OR			authPend.push(user)
    SWAP1			authPend.push(user)
    SSTORE			authPend.push(user)
    POP			authPend.push(user)
    POP			authPend.push(user)
  tag71: 
    JUMPDEST		if (votes.pass.length == 0 && votes.fail.length == 0) {...
    DUP3			authorize
    ISZERO			if (authorize) {...
    PUSH [tag77]		if (authorize) {...
    JUMPI			if (authorize) {...
    DUP2			votes
    PUSH 0		votes.pass
    ADD			votes.pass
    PUSH 0		votes.pass
    POP			votes.pass
    DUP1			votes.pass.push(msg.sender)
    SLOAD			votes.pass.push(msg.sender)
    DUP1			votes.pass.push(msg.sender)
    PUSH 1		votes.pass.push(msg.sender)
    ADD			votes.pass.push(msg.sender)
    DUP3			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    SLOAD			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    DUP4			votes.pass.push(msg.sender)
    SSTORE			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    ISZERO			votes.pass.push(msg.sender)
    GT			votes.pass.push(msg.sender)
    PUSH [tag78]		votes.pass.push(msg.sender)
    JUMPI			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    DUP4			votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    MSTORE			votes.pass.push(msg.sender)
    PUSH 20		votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    SHA3			votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    DUP3			votes.pass.push(msg.sender)
    ADD			votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    ADD			votes.pass.push(msg.sender)
    PUSH [tag79]		votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    PUSH [tag80]		votes.pass.push(msg.sender)
    JUMP			votes.pass.push(msg.sender)
  tag80: 
    JUMPDEST		votes.pass.push(msg.sender)
    DUP1			votes.pass.push(msg.sender)
    DUP3			votes.pass.push(msg.sender)
    GT			votes.pass.push(msg.sender)
    ISZERO			votes.pass.push(msg.sender)
    PUSH [tag81]		votes.pass.push(msg.sender)
    JUMPI			votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    SSTORE			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    PUSH 1		votes.pass.push(msg.sender)
    ADD			votes.pass.push(msg.sender)
    PUSH [tag80]		votes.pass.push(msg.sender)
    JUMP			votes.pass.push(msg.sender)
  tag81: 
    JUMPDEST		votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    JUMP			votes.pass.push(msg.sender)
  tag79: 
    JUMPDEST		votes.pass.push(msg.sender)
  tag78: 
    JUMPDEST		votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    MSTORE			votes.pass.push(msg.sender)
    PUSH 20		votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    SHA3			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    ADD			votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
  tag82: 
    JUMPDEST		votes.pass.push(msg.sender)
    CALLER			msg.sender
    SWAP1			votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    PUSH 100		votes.pass.push(msg.sender)
    EXP			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    SLOAD			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.pass.push(msg.sender)
    MUL			votes.pass.push(msg.sender)
    NOT			votes.pass.push(msg.sender)
    AND			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    DUP4			votes.pass.push(msg.sender)
    MUL			votes.pass.push(msg.sender)
    OR			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    SSTORE			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    PUSH 2		2
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP1			voters.length
    SLOAD			voters.length
    SWAP1			voters.length
    POP			voters.length
    DIV			voters.length / 2
    DUP3			votes
    PUSH 0		votes.pass
    ADD			votes.pass
    PUSH 0		votes.pass
    POP			votes.pass
    DUP1			votes.pass.length
    SLOAD			votes.pass.length
    SWAP1			votes.pass.length
    POP			votes.pass.length
    GT			votes.pass.length <= voters.length / 2
    ISZERO			votes.pass.length <= voters.length / 2
    ISZERO			if (votes.pass.length <= voters.length / 2) {...
    PUSH [tag83]		if (votes.pass.length <= voters.length / 2) {...
    JUMPI			if (votes.pass.length <= voters.length / 2) {...
    PUSH [tag58]		return;
    JUMP			return;
  tag83: 
    JUMPDEST		if (votes.pass.length <= voters.length / 2) {...
    PUSH [tag84]		if (authorize) {...
    JUMP			if (authorize) {...
  tag77: 
    JUMPDEST		if (authorize) {...
    DUP2			votes
    PUSH 1		votes.fail
    ADD			votes.fail
    PUSH 0		votes.fail
    POP			votes.fail
    DUP1			votes.fail.push(msg.sender)
    SLOAD			votes.fail.push(msg.sender)
    DUP1			votes.fail.push(msg.sender)
    PUSH 1		votes.fail.push(msg.sender)
    ADD			votes.fail.push(msg.sender)
    DUP3			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    SLOAD			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    DUP4			votes.fail.push(msg.sender)
    SSTORE			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    ISZERO			votes.fail.push(msg.sender)
    GT			votes.fail.push(msg.sender)
    PUSH [tag85]		votes.fail.push(msg.sender)
    JUMPI			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    DUP4			votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    MSTORE			votes.fail.push(msg.sender)
    PUSH 20		votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    SHA3			votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    DUP3			votes.fail.push(msg.sender)
    ADD			votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    ADD			votes.fail.push(msg.sender)
    PUSH [tag86]		votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    PUSH [tag87]		votes.fail.push(msg.sender)
    JUMP			votes.fail.push(msg.sender)
  tag87: 
    JUMPDEST		votes.fail.push(msg.sender)
    DUP1			votes.fail.push(msg.sender)
    DUP3			votes.fail.push(msg.sender)
    GT			votes.fail.push(msg.sender)
    ISZERO			votes.fail.push(msg.sender)
    PUSH [tag88]		votes.fail.push(msg.sender)
    JUMPI			votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    SSTORE			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    PUSH 1		votes.fail.push(msg.sender)
    ADD			votes.fail.push(msg.sender)
    PUSH [tag87]		votes.fail.push(msg.sender)
    JUMP			votes.fail.push(msg.sender)
  tag88: 
    JUMPDEST		votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    JUMP			votes.fail.push(msg.sender)
  tag86: 
    JUMPDEST		votes.fail.push(msg.sender)
  tag85: 
    JUMPDEST		votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    MSTORE			votes.fail.push(msg.sender)
    PUSH 20		votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    SHA3			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    ADD			votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
  tag89: 
    JUMPDEST		votes.fail.push(msg.sender)
    CALLER			msg.sender
    SWAP1			votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    PUSH 100		votes.fail.push(msg.sender)
    EXP			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    SLOAD			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.fail.push(msg.sender)
    MUL			votes.fail.push(msg.sender)
    NOT			votes.fail.push(msg.sender)
    AND			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    DUP4			votes.fail.push(msg.sender)
    MUL			votes.fail.push(msg.sender)
    OR			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    SSTORE			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    PUSH 2		2
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP1			voters.length
    SLOAD			voters.length
    SWAP1			voters.length
    POP			voters.length
    DIV			voters.length / 2
    DUP3			votes
    PUSH 1		votes.fail
    ADD			votes.fail
    PUSH 0		votes.fail
    POP			votes.fail
    DUP1			votes.fail.length
    SLOAD			votes.fail.length
    SWAP1			votes.fail.length
    POP			votes.fail.length
    GT			votes.fail.length <= voters.length / 2
    ISZERO			votes.fail.length <= voters.length / 2
    ISZERO			if (votes.fail.length <= voters.length / 2) {...
    PUSH [tag90]		if (votes.fail.length <= voters.length / 2) {...
    JUMPI			if (votes.fail.length <= voters.length / 2) {...
    PUSH [tag58]		return;
    JUMP			return;
  tag90: 
    JUMPDEST		if (votes.fail.length <= voters.length / 2) {...
  tag84: 
    JUMPDEST		if (authorize) {...
    DUP3			authorize
    DUP1			authorize && !authorised[user]
    ISZERO			authorize && !authorised[user]
    PUSH [tag91]		authorize && !authorised[user]
    JUMPI			authorize && !authorised[user]
    POP			authorize && !authorised[user]
    PUSH 0		authorised
    PUSH 0		authorised
    POP			authorised
    PUSH 0		authorised[user]
    DUP6			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authorised[user]
    AND			authorised[user]
    DUP2			authorised[user]
    MSTORE			authorised[user]
    PUSH 20		authorised[user]
    ADD			authorised[user]
    SWAP1			authorised[user]
    DUP2			authorised[user]
    MSTORE			authorised[user]
    PUSH 20		authorised[user]
    ADD			authorised[user]
    PUSH 0		authorised[user]
    SHA3			authorised[user]
    PUSH 0		authorised[user]
    SWAP1			authorised[user]
    SLOAD			authorised[user]
    SWAP1			authorised[user]
    PUSH 100		authorised[user]
    EXP			authorised[user]
    SWAP1			authorised[user]
    DIV			authorised[user]
    PUSH FF		authorised[user]
    AND			authorised[user]
    ISZERO			!authorised[user]
  tag91: 
    JUMPDEST		authorize && !authorised[user]
    ISZERO			if (authorize && !authorised[user]) {...
    PUSH [tag92]		if (authorize && !authorised[user]) {...
    JUMPI			if (authorize && !authorised[user]) {...
    PUSH 1		true
    PUSH 0		authorised
    PUSH 0		authorised
    POP			authorised
    PUSH 0		authorised[user]
    DUP7			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authorised[user]
    AND			authorised[user]
    DUP2			authorised[user]
    MSTORE			authorised[user]
    PUSH 20		authorised[user]
    ADD			authorised[user]
    SWAP1			authorised[user]
    DUP2			authorised[user]
    MSTORE			authorised[user]
    PUSH 20		authorised[user]
    ADD			authorised[user]
    PUSH 0		authorised[user]
    SHA3			authorised[user]
    PUSH 0		authorised[user]
    PUSH 100		authorised[user] = true
    EXP			authorised[user] = true
    DUP2			authorised[user] = true
    SLOAD			authorised[user] = true
    DUP2			authorised[user] = true
    PUSH FF		authorised[user] = true
    MUL			authorised[user] = true
    NOT			authorised[user] = true
    AND			authorised[user] = true
    SWAP1			authorised[user] = true
    DUP4			authorised[user] = true
    MUL			authorised[user] = true
    OR			authorised[user] = true
    SWAP1			authorised[user] = true
    SSTORE			authorised[user] = true
    POP			authorised[user] = true
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP1			voters.push(user)
    SLOAD			voters.push(user)
    DUP1			voters.push(user)
    PUSH 1		voters.push(user)
    ADD			voters.push(user)
    DUP3			voters.push(user)
    DUP2			voters.push(user)
    DUP2			voters.push(user)
    SLOAD			voters.push(user)
    DUP2			voters.push(user)
    DUP4			voters.push(user)
    SSTORE			voters.push(user)
    DUP2			voters.push(user)
    DUP2			voters.push(user)
    ISZERO			voters.push(user)
    GT			voters.push(user)
    PUSH [tag93]		voters.push(user)
    JUMPI			voters.push(user)
    DUP2			voters.push(user)
    DUP4			voters.push(user)
    PUSH 0		voters.push(user)
    MSTORE			voters.push(user)
    PUSH 20		voters.push(user)
    PUSH 0		voters.push(user)
    SHA3			voters.push(user)
    SWAP2			voters.push(user)
    DUP3			voters.push(user)
    ADD			voters.push(user)
    SWAP2			voters.push(user)
    ADD			voters.push(user)
    PUSH [tag94]		voters.push(user)
    SWAP2			voters.push(user)
    SWAP1			voters.push(user)
    PUSH [tag95]		voters.push(user)
    JUMP			voters.push(user)
  tag95: 
    JUMPDEST		voters.push(user)
    DUP1			voters.push(user)
    DUP3			voters.push(user)
    GT			voters.push(user)
    ISZERO			voters.push(user)
    PUSH [tag96]		voters.push(user)
    JUMPI			voters.push(user)
    PUSH 0		voters.push(user)
    DUP2			voters.push(user)
    DUP2			voters.push(user)
    POP			voters.push(user)
    PUSH 0		voters.push(user)
    SWAP1			voters.push(user)
    SSTORE			voters.push(user)
    POP			voters.push(user)
    PUSH 1		voters.push(user)
    ADD			voters.push(user)
    PUSH [tag95]		voters.push(user)
    JUMP			voters.push(user)
  tag96: 
    JUMPDEST		voters.push(user)
    POP			voters.push(user)
    SWAP1			voters.push(user)
    JUMP			voters.push(user)
  tag94: 
    JUMPDEST		voters.push(user)
  tag93: 
    JUMPDEST		voters.push(user)
    POP			voters.push(user)
    POP			voters.push(user)
    POP			voters.push(user)
    SWAP2			voters.push(user)
    SWAP1			voters.push(user)
    SWAP1			voters.push(user)
    PUSH 0		voters.push(user)
    MSTORE			voters.push(user)
    PUSH 20		voters.push(user)
    PUSH 0		voters.push(user)
    SHA3			voters.push(user)
    SWAP1			voters.push(user)
    ADD			voters.push(user)
    PUSH 0		voters.push(user)
  tag97: 
    JUMPDEST		voters.push(user)
    DUP7			user
    SWAP1			voters.push(user)
    SWAP2			voters.push(user)
    SWAP1			voters.push(user)
    SWAP2			voters.push(user)
    PUSH 100		voters.push(user)
    EXP			voters.push(user)
    DUP2			voters.push(user)
    SLOAD			voters.push(user)
    DUP2			voters.push(user)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		voters.push(user)
    MUL			voters.push(user)
    NOT			voters.push(user)
    AND			voters.push(user)
    SWAP1			voters.push(user)
    DUP4			voters.push(user)
    MUL			voters.push(user)
    OR			voters.push(user)
    SWAP1			voters.push(user)
    SSTORE			voters.push(user)
    POP			voters.push(user)
    POP			voters.push(user)
    PUSH [tag98]		if (authorize && !authorised[user]) {...
    JUMP			if (authorize && !authorised[user]) {...
  tag92: 
    JUMPDEST		if (authorize && !authorised[user]) {...
    DUP3			authorize
    ISZERO			!authorize
    DUP1			!authorize && authorised[user]
    ISZERO			!authorize && authorised[user]
    PUSH [tag99]		!authorize && authorised[user]
    JUMPI			!authorize && authorised[user]
    POP			!authorize && authorised[user]
    PUSH 0		authorised
    PUSH 0		authorised
    POP			authorised
    PUSH 0		authorised[user]
    DUP6			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authorised[user]
    AND			authorised[user]
    DUP2			authorised[user]
    MSTORE			authorised[user]
    PUSH 20		authorised[user]
    ADD			authorised[user]
    SWAP1			authorised[user]
    DUP2			authorised[user]
    MSTORE			authorised[user]
    PUSH 20		authorised[user]
    ADD			authorised[user]
    PUSH 0		authorised[user]
    SHA3			authorised[user]
    PUSH 0		authorised[user]
    SWAP1			authorised[user]
    SLOAD			authorised[user]
    SWAP1			authorised[user]
    PUSH 100		authorised[user]
    EXP			authorised[user]
    SWAP1			authorised[user]
    DIV			authorised[user]
    PUSH FF		authorised[user]
    AND			authorised[user]
  tag99: 
    JUMPDEST		!authorize && authorised[user]
    ISZERO			if (!authorize && authorised[user]) {...
    PUSH [tag100]		if (!authorize && authorised[user]) {...
    JUMPI			if (!authorize && authorised[user]) {...
    PUSH 0		false
    PUSH 0		authorised
    PUSH 0		authorised
    POP			authorised
    PUSH 0		authorised[user]
    DUP7			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authorised[user]
    AND			authorised[user]
    DUP2			authorised[user]
    MSTORE			authorised[user]
    PUSH 20		authorised[user]
    ADD			authorised[user]
    SWAP1			authorised[user]
    DUP2			authorised[user]
    MSTORE			authorised[user]
    PUSH 20		authorised[user]
    ADD			authorised[user]
    PUSH 0		authorised[user]
    SHA3			authorised[user]
    PUSH 0		authorised[user]
    PUSH 100		authorised[user] = false
    EXP			authorised[user] = false
    DUP2			authorised[user] = false
    SLOAD			authorised[user] = false
    DUP2			authorised[user] = false
    PUSH FF		authorised[user] = false
    MUL			authorised[user] = false
    NOT			authorised[user] = false
    AND			authorised[user] = false
    SWAP1			authorised[user] = false
    DUP4			authorised[user] = false
    MUL			authorised[user] = false
    OR			authorised[user] = false
    SWAP1			authorised[user] = false
    SSTORE			authorised[user] = false
    POP			authorised[user] = false
    PUSH 0		0
    SWAP1			i = 0
    POP			i = 0
    DUP1			i = 0
    POP			i = 0
  tag101: 
    JUMPDEST		for (i = 0; i < voters.length; i++) {...
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP1			voters.length
    SLOAD			voters.length
    SWAP1			voters.length
    POP			voters.length
    DUP2			i
    LT			i < voters.length
    ISZERO			for (i = 0; i < voters.length; i++) {...
    PUSH [tag102]		for (i = 0; i < voters.length; i++) {...
    JUMPI			for (i = 0; i < voters.length; i++) {...
    DUP4			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		voters[i] == user
    AND			voters[i] == user
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP3			i
    DUP2			voters[i]
    SLOAD			voters[i]
    DUP2			voters[i]
    LT			voters[i]
    ISZERO			voters[i]
    PUSH [ErrorTag]		voters[i]
    JUMPI			voters[i]
    SWAP1			voters[i]
    PUSH 0		voters[i]
    MSTORE			voters[i]
    PUSH 20		voters[i]
    PUSH 0		voters[i]
    SHA3			voters[i]
    SWAP1			voters[i]
    ADD			voters[i]
    PUSH 0		voters[i]
  tag104: 
    JUMPDEST		voters[i]
    SWAP1			voters[i]
    SLOAD			voters[i]
    SWAP1			voters[i]
    PUSH 100		voters[i]
    EXP			voters[i]
    SWAP1			voters[i]
    DIV			voters[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		voters[i]
    AND			voters[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		voters[i] == user
    AND			voters[i] == user
    EQ			voters[i] == user
    ISZERO			if (voters[i] == user) {...
    PUSH [tag105]		if (voters[i] == user) {...
    JUMPI			if (voters[i] == user) {...
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    PUSH 1		1
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP1			voters.length
    SLOAD			voters.length
    SWAP1			voters.length
    POP			voters.length
    SUB			voters.length - 1
    DUP2			voters[voters.length - 1]
    SLOAD			voters[voters.length - 1]
    DUP2			voters[voters.length - 1]
    LT			voters[voters.length - 1]
    ISZERO			voters[voters.length - 1]
    PUSH [ErrorTag]		voters[voters.length - 1]
    JUMPI			voters[voters.length - 1]
    SWAP1			voters[voters.length - 1]
    PUSH 0		voters[voters.length - 1]
    MSTORE			voters[voters.length - 1]
    PUSH 20		voters[voters.length - 1]
    PUSH 0		voters[voters.length - 1]
    SHA3			voters[voters.length - 1]
    SWAP1			voters[voters.length - 1]
    ADD			voters[voters.length - 1]
    PUSH 0		voters[voters.length - 1]
  tag106: 
    JUMPDEST		voters[voters.length - 1]
    SWAP1			voters[voters.length - 1]
    SLOAD			voters[voters.length - 1]
    SWAP1			voters[voters.length - 1]
    PUSH 100		voters[voters.length - 1]
    EXP			voters[voters.length - 1]
    SWAP1			voters[voters.length - 1]
    DIV			voters[voters.length - 1]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		voters[voters.length - 1]
    AND			voters[voters.length - 1]
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP3			i
    DUP2			voters[i]
    SLOAD			voters[i]
    DUP2			voters[i]
    LT			voters[i]
    ISZERO			voters[i]
    PUSH [ErrorTag]		voters[i]
    JUMPI			voters[i]
    SWAP1			voters[i]
    PUSH 0		voters[i]
    MSTORE			voters[i]
    PUSH 20		voters[i]
    PUSH 0		voters[i]
    SHA3			voters[i]
    SWAP1			voters[i]
    ADD			voters[i]
    PUSH 0		voters[i]
  tag107: 
    JUMPDEST		voters[i]
    PUSH 100		voters[i] = voters[voters.length - 1]
    EXP			voters[i] = voters[voters.length - 1]
    DUP2			voters[i] = voters[voters.length - 1]
    SLOAD			voters[i] = voters[voters.length - 1]
    DUP2			voters[i] = voters[voters.length - 1]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		voters[i] = voters[voters.length - 1]
    MUL			voters[i] = voters[voters.length - 1]
    NOT			voters[i] = voters[voters.length - 1]
    AND			voters[i] = voters[voters.length - 1]
    SWAP1			voters[i] = voters[voters.length - 1]
    DUP4			voters[i] = voters[voters.length - 1]
    MUL			voters[i] = voters[voters.length - 1]
    OR			voters[i] = voters[voters.length - 1]
    SWAP1			voters[i] = voters[voters.length - 1]
    SSTORE			voters[i] = voters[voters.length - 1]
    POP			voters[i] = voters[voters.length - 1]
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP1			voters.length--
    SLOAD			voters.length--
    DUP1			voters.length--
    SWAP2			voters.length--
    SWAP1			voters.length--
    PUSH 1		voters.length--
    SWAP1			voters.length--
    SUB			voters.length--
    SWAP1			voters.length--
    SWAP1			voters.length--
    DUP2			voters.length--
    SLOAD			voters.length--
    DUP2			voters.length--
    DUP4			voters.length--
    SSTORE			voters.length--
    DUP2			voters.length--
    DUP2			voters.length--
    ISZERO			voters.length--
    GT			voters.length--
    PUSH [tag108]		voters.length--
    JUMPI			voters.length--
    DUP2			voters.length--
    DUP4			voters.length--
    PUSH 0		voters.length--
    MSTORE			voters.length--
    PUSH 20		voters.length--
    PUSH 0		voters.length--
    SHA3			voters.length--
    SWAP2			voters.length--
    DUP3			voters.length--
    ADD			voters.length--
    SWAP2			voters.length--
    ADD			voters.length--
    PUSH [tag109]		voters.length--
    SWAP2			voters.length--
    SWAP1			voters.length--
    PUSH [tag110]		voters.length--
    JUMP			voters.length--
  tag110: 
    JUMPDEST		voters.length--
    DUP1			voters.length--
    DUP3			voters.length--
    GT			voters.length--
    ISZERO			voters.length--
    PUSH [tag111]		voters.length--
    JUMPI			voters.length--
    PUSH 0		voters.length--
    DUP2			voters.length--
    DUP2			voters.length--
    POP			voters.length--
    PUSH 0		voters.length--
    SWAP1			voters.length--
    SSTORE			voters.length--
    POP			voters.length--
    PUSH 1		voters.length--
    ADD			voters.length--
    PUSH [tag110]		voters.length--
    JUMP			voters.length--
  tag111: 
    JUMPDEST		voters.length--
    POP			voters.length--
    SWAP1			voters.length--
    JUMP			voters.length--
  tag109: 
    JUMPDEST		voters.length--
  tag108: 
    JUMPDEST		voters.length--
    POP			voters.length--
    POP			voters.length--
    POP			voters.length--
    POP			voters.length--
    PUSH 4		verProp
    PUSH 0		verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 4		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 8		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH C		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 1		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFFFFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 2		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    POP			delete verProp
    DUP1			delete verProp
    SLOAD			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    SSTORE			delete verProp
    SWAP1			delete verProp
    PUSH 0		delete verProp
    MSTORE			delete verProp
    PUSH 20		delete verProp
    PUSH 0		delete verProp
    SHA3			delete verProp
    SWAP1			delete verProp
    DUP2			delete verProp
    ADD			delete verProp
    SWAP1			delete verProp
    PUSH [tag113]		delete verProp
    SWAP2			delete verProp
    SWAP1			delete verProp
    PUSH [tag114]		delete verProp
    JUMP			delete verProp
  tag114: 
    JUMPDEST		delete verProp
    DUP1			delete verProp
    DUP3			delete verProp
    GT			delete verProp
    ISZERO			delete verProp
    PUSH [tag115]		delete verProp
    JUMPI			delete verProp
    PUSH 0		delete verProp
    DUP2			delete verProp
    DUP2			delete verProp
    POP			delete verProp
    PUSH 0		delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    POP			delete verProp
    PUSH 1		delete verProp
    ADD			delete verProp
    PUSH [tag114]		delete verProp
    JUMP			delete verProp
  tag115: 
    JUMPDEST		delete verProp
    POP			delete verProp
    SWAP1			delete verProp
    JUMP			delete verProp
  tag113: 
    JUMPDEST		delete verProp
  tag112: 
    JUMPDEST		delete verProp
    POP			delete verProp
    PUSH 1		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    POP			delete verProp
    DUP1			delete verProp
    SLOAD			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    SSTORE			delete verProp
    SWAP1			delete verProp
    PUSH 0		delete verProp
    MSTORE			delete verProp
    PUSH 20		delete verProp
    PUSH 0		delete verProp
    SHA3			delete verProp
    SWAP1			delete verProp
    DUP2			delete verProp
    ADD			delete verProp
    SWAP1			delete verProp
    PUSH [tag117]		delete verProp
    SWAP2			delete verProp
    SWAP1			delete verProp
    PUSH [tag118]		delete verProp
    JUMP			delete verProp
  tag118: 
    JUMPDEST		delete verProp
    DUP1			delete verProp
    DUP3			delete verProp
    GT			delete verProp
    ISZERO			delete verProp
    PUSH [tag119]		delete verProp
    JUMPI			delete verProp
    PUSH 0		delete verProp
    DUP2			delete verProp
    DUP2			delete verProp
    POP			delete verProp
    PUSH 0		delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    POP			delete verProp
    PUSH 1		delete verProp
    ADD			delete verProp
    PUSH [tag118]		delete verProp
    JUMP			delete verProp
  tag119: 
    JUMPDEST		delete verProp
    POP			delete verProp
    SWAP1			delete verProp
    JUMP			delete verProp
  tag117: 
    JUMPDEST		delete verProp
  tag116: 
    JUMPDEST		delete verProp
    POP			delete verProp
    POP			delete verProp
    POP			delete verProp
    POP			delete verProp
    POP			delete verProp
    PUSH [tag102]		break
    JUMP			break
  tag105: 
    JUMPDEST		if (voters[i] == user) {...
  tag103: 
    JUMPDEST		for (i = 0; i < voters.length; i++) {...
    DUP1			i++
    DUP1			i++
    PUSH 1		i++
    ADD			i++
    SWAP2			i++
    POP			i++
    POP			i++
    PUSH [tag101]		for (i = 0; i < voters.length; i++) {...
    JUMP			for (i = 0; i < voters.length; i++) {...
  tag102: 
    JUMPDEST		for (i = 0; i < voters.length; i++) {...
  tag100: 
    JUMPDEST		if (!authorize && authorised[user]) {...
  tag98: 
    JUMPDEST		if (authorize && !authorised[user]) {...
    PUSH 2		authProps
    PUSH 0		authProps
    POP			authProps
    PUSH 0		authProps[user]
    DUP6			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authProps[user]
    AND			authProps[user]
    DUP2			authProps[user]
    MSTORE			authProps[user]
    PUSH 20		authProps[user]
    ADD			authProps[user]
    SWAP1			authProps[user]
    DUP2			authProps[user]
    MSTORE			authProps[user]
    PUSH 20		authProps[user]
    ADD			authProps[user]
    PUSH 0		authProps[user]
    SHA3			authProps[user]
    PUSH 0		authProps[user]
    PUSH 0		delete authProps[user]
    DUP3			delete authProps[user]
    ADD			delete authProps[user]
    PUSH 0		delete authProps[user]
    POP			delete authProps[user]
    DUP1			delete authProps[user]
    SLOAD			delete authProps[user]
    PUSH 0		delete authProps[user]
    DUP3			delete authProps[user]
    SSTORE			delete authProps[user]
    SWAP1			delete authProps[user]
    PUSH 0		delete authProps[user]
    MSTORE			delete authProps[user]
    PUSH 20		delete authProps[user]
    PUSH 0		delete authProps[user]
    SHA3			delete authProps[user]
    SWAP1			delete authProps[user]
    DUP2			delete authProps[user]
    ADD			delete authProps[user]
    SWAP1			delete authProps[user]
    PUSH [tag121]		delete authProps[user]
    SWAP2			delete authProps[user]
    SWAP1			delete authProps[user]
    PUSH [tag122]		delete authProps[user]
    JUMP			delete authProps[user]
  tag122: 
    JUMPDEST		delete authProps[user]
    DUP1			delete authProps[user]
    DUP3			delete authProps[user]
    GT			delete authProps[user]
    ISZERO			delete authProps[user]
    PUSH [tag123]		delete authProps[user]
    JUMPI			delete authProps[user]
    PUSH 0		delete authProps[user]
    DUP2			delete authProps[user]
    DUP2			delete authProps[user]
    POP			delete authProps[user]
    PUSH 0		delete authProps[user]
    SWAP1			delete authProps[user]
    SSTORE			delete authProps[user]
    POP			delete authProps[user]
    PUSH 1		delete authProps[user]
    ADD			delete authProps[user]
    PUSH [tag122]		delete authProps[user]
    JUMP			delete authProps[user]
  tag123: 
    JUMPDEST		delete authProps[user]
    POP			delete authProps[user]
    SWAP1			delete authProps[user]
    JUMP			delete authProps[user]
  tag121: 
    JUMPDEST		delete authProps[user]
  tag120: 
    JUMPDEST		delete authProps[user]
    POP			delete authProps[user]
    PUSH 1		delete authProps[user]
    DUP3			delete authProps[user]
    ADD			delete authProps[user]
    PUSH 0		delete authProps[user]
    POP			delete authProps[user]
    DUP1			delete authProps[user]
    SLOAD			delete authProps[user]
    PUSH 0		delete authProps[user]
    DUP3			delete authProps[user]
    SSTORE			delete authProps[user]
    SWAP1			delete authProps[user]
    PUSH 0		delete authProps[user]
    MSTORE			delete authProps[user]
    PUSH 20		delete authProps[user]
    PUSH 0		delete authProps[user]
    SHA3			delete authProps[user]
    SWAP1			delete authProps[user]
    DUP2			delete authProps[user]
    ADD			delete authProps[user]
    SWAP1			delete authProps[user]
    PUSH [tag125]		delete authProps[user]
    SWAP2			delete authProps[user]
    SWAP1			delete authProps[user]
    PUSH [tag126]		delete authProps[user]
    JUMP			delete authProps[user]
  tag126: 
    JUMPDEST		delete authProps[user]
    DUP1			delete authProps[user]
    DUP3			delete authProps[user]
    GT			delete authProps[user]
    ISZERO			delete authProps[user]
    PUSH [tag127]		delete authProps[user]
    JUMPI			delete authProps[user]
    PUSH 0		delete authProps[user]
    DUP2			delete authProps[user]
    DUP2			delete authProps[user]
    POP			delete authProps[user]
    PUSH 0		delete authProps[user]
    SWAP1			delete authProps[user]
    SSTORE			delete authProps[user]
    POP			delete authProps[user]
    PUSH 1		delete authProps[user]
    ADD			delete authProps[user]
    PUSH [tag126]		delete authProps[user]
    JUMP			delete authProps[user]
  tag127: 
    JUMPDEST		delete authProps[user]
    POP			delete authProps[user]
    SWAP1			delete authProps[user]
    JUMP			delete authProps[user]
  tag125: 
    JUMPDEST		delete authProps[user]
  tag124: 
    JUMPDEST		delete authProps[user]
    POP			delete authProps[user]
    POP			delete authProps[user]
    POP			delete authProps[user]
    PUSH 0		0
    SWAP1			i = 0
    POP			i = 0
    DUP1			i = 0
    POP			i = 0
  tag128: 
    JUMPDEST		for (i = 0; i < authPend.length; i++) {...
    PUSH 3		authPend
    PUSH 0		authPend
    POP			authPend
    DUP1			authPend.length
    SLOAD			authPend.length
    SWAP1			authPend.length
    POP			authPend.length
    DUP2			i
    LT			i < authPend.length
    ISZERO			for (i = 0; i < authPend.length; i++) {...
    PUSH [tag129]		for (i = 0; i < authPend.length; i++) {...
    JUMPI			for (i = 0; i < authPend.length; i++) {...
    DUP4			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authPend[i] == user
    AND			authPend[i] == user
    PUSH 3		authPend
    PUSH 0		authPend
    POP			authPend
    DUP3			i
    DUP2			authPend[i]
    SLOAD			authPend[i]
    DUP2			authPend[i]
    LT			authPend[i]
    ISZERO			authPend[i]
    PUSH [ErrorTag]		authPend[i]
    JUMPI			authPend[i]
    SWAP1			authPend[i]
    PUSH 0		authPend[i]
    MSTORE			authPend[i]
    PUSH 20		authPend[i]
    PUSH 0		authPend[i]
    SHA3			authPend[i]
    SWAP1			authPend[i]
    ADD			authPend[i]
    PUSH 0		authPend[i]
  tag131: 
    JUMPDEST		authPend[i]
    SWAP1			authPend[i]
    SLOAD			authPend[i]
    SWAP1			authPend[i]
    PUSH 100		authPend[i]
    EXP			authPend[i]
    SWAP1			authPend[i]
    DIV			authPend[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authPend[i]
    AND			authPend[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authPend[i] == user
    AND			authPend[i] == user
    EQ			authPend[i] == user
    ISZERO			if (authPend[i] == user) {...
    PUSH [tag132]		if (authPend[i] == user) {...
    JUMPI			if (authPend[i] == user) {...
    PUSH 3		authPend
    PUSH 0		authPend
    POP			authPend
    PUSH 1		1
    PUSH 3		authPend
    PUSH 0		authPend
    POP			authPend
    DUP1			authPend.length
    SLOAD			authPend.length
    SWAP1			authPend.length
    POP			authPend.length
    SUB			authPend.length - 1
    DUP2			authPend[authPend.length - 1]
    SLOAD			authPend[authPend.length - 1]
    DUP2			authPend[authPend.length - 1]
    LT			authPend[authPend.length - 1]
    ISZERO			authPend[authPend.length - 1]
    PUSH [ErrorTag]		authPend[authPend.length - 1]
    JUMPI			authPend[authPend.length - 1]
    SWAP1			authPend[authPend.length - 1]
    PUSH 0		authPend[authPend.length - 1]
    MSTORE			authPend[authPend.length - 1]
    PUSH 20		authPend[authPend.length - 1]
    PUSH 0		authPend[authPend.length - 1]
    SHA3			authPend[authPend.length - 1]
    SWAP1			authPend[authPend.length - 1]
    ADD			authPend[authPend.length - 1]
    PUSH 0		authPend[authPend.length - 1]
  tag133: 
    JUMPDEST		authPend[authPend.length - 1]
    SWAP1			authPend[authPend.length - 1]
    SLOAD			authPend[authPend.length - 1]
    SWAP1			authPend[authPend.length - 1]
    PUSH 100		authPend[authPend.length - 1]
    EXP			authPend[authPend.length - 1]
    SWAP1			authPend[authPend.length - 1]
    DIV			authPend[authPend.length - 1]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authPend[authPend.length - 1]
    AND			authPend[authPend.length - 1]
    PUSH 3		authPend
    PUSH 0		authPend
    POP			authPend
    DUP3			i
    DUP2			authPend[i]
    SLOAD			authPend[i]
    DUP2			authPend[i]
    LT			authPend[i]
    ISZERO			authPend[i]
    PUSH [ErrorTag]		authPend[i]
    JUMPI			authPend[i]
    SWAP1			authPend[i]
    PUSH 0		authPend[i]
    MSTORE			authPend[i]
    PUSH 20		authPend[i]
    PUSH 0		authPend[i]
    SHA3			authPend[i]
    SWAP1			authPend[i]
    ADD			authPend[i]
    PUSH 0		authPend[i]
  tag134: 
    JUMPDEST		authPend[i]
    PUSH 100		authPend[i] = authPend[authPend.length - 1]
    EXP			authPend[i] = authPend[authPend.length - 1]
    DUP2			authPend[i] = authPend[authPend.length - 1]
    SLOAD			authPend[i] = authPend[authPend.length - 1]
    DUP2			authPend[i] = authPend[authPend.length - 1]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authPend[i] = authPend[authPend.length - 1]
    MUL			authPend[i] = authPend[authPend.length - 1]
    NOT			authPend[i] = authPend[authPend.length - 1]
    AND			authPend[i] = authPend[authPend.length - 1]
    SWAP1			authPend[i] = authPend[authPend.length - 1]
    DUP4			authPend[i] = authPend[authPend.length - 1]
    MUL			authPend[i] = authPend[authPend.length - 1]
    OR			authPend[i] = authPend[authPend.length - 1]
    SWAP1			authPend[i] = authPend[authPend.length - 1]
    SSTORE			authPend[i] = authPend[authPend.length - 1]
    POP			authPend[i] = authPend[authPend.length - 1]
    PUSH 3		authPend
    PUSH 0		authPend
    POP			authPend
    DUP1			authPend.length--
    SLOAD			authPend.length--
    DUP1			authPend.length--
    SWAP2			authPend.length--
    SWAP1			authPend.length--
    PUSH 1		authPend.length--
    SWAP1			authPend.length--
    SUB			authPend.length--
    SWAP1			authPend.length--
    SWAP1			authPend.length--
    DUP2			authPend.length--
    SLOAD			authPend.length--
    DUP2			authPend.length--
    DUP4			authPend.length--
    SSTORE			authPend.length--
    DUP2			authPend.length--
    DUP2			authPend.length--
    ISZERO			authPend.length--
    GT			authPend.length--
    PUSH [tag135]		authPend.length--
    JUMPI			authPend.length--
    DUP2			authPend.length--
    DUP4			authPend.length--
    PUSH 0		authPend.length--
    MSTORE			authPend.length--
    PUSH 20		authPend.length--
    PUSH 0		authPend.length--
    SHA3			authPend.length--
    SWAP2			authPend.length--
    DUP3			authPend.length--
    ADD			authPend.length--
    SWAP2			authPend.length--
    ADD			authPend.length--
    PUSH [tag136]		authPend.length--
    SWAP2			authPend.length--
    SWAP1			authPend.length--
    PUSH [tag137]		authPend.length--
    JUMP			authPend.length--
  tag137: 
    JUMPDEST		authPend.length--
    DUP1			authPend.length--
    DUP3			authPend.length--
    GT			authPend.length--
    ISZERO			authPend.length--
    PUSH [tag138]		authPend.length--
    JUMPI			authPend.length--
    PUSH 0		authPend.length--
    DUP2			authPend.length--
    DUP2			authPend.length--
    POP			authPend.length--
    PUSH 0		authPend.length--
    SWAP1			authPend.length--
    SSTORE			authPend.length--
    POP			authPend.length--
    PUSH 1		authPend.length--
    ADD			authPend.length--
    PUSH [tag137]		authPend.length--
    JUMP			authPend.length--
  tag138: 
    JUMPDEST		authPend.length--
    POP			authPend.length--
    SWAP1			authPend.length--
    JUMP			authPend.length--
  tag136: 
    JUMPDEST		authPend.length--
  tag135: 
    JUMPDEST		authPend.length--
    POP			authPend.length--
    POP			authPend.length--
    POP			authPend.length--
    POP			authPend.length--
    PUSH [tag129]		break
    JUMP			break
  tag132: 
    JUMPDEST		if (authPend[i] == user) {...
  tag130: 
    JUMPDEST		for (i = 0; i < authPend.length; i++) {...
    DUP1			i++
    DUP1			i++
    PUSH 1		i++
    ADD			i++
    SWAP2			i++
    POP			i++
    POP			i++
    PUSH [tag128]		for (i = 0; i < authPend.length; i++) {...
    JUMP			for (i = 0; i < authPend.length; i++) {...
  tag129: 
    JUMPDEST		for (i = 0; i < authPend.length; i++) {...
  tag59: 
    JUMPDEST		if (authorised[msg.sender]) {...
  tag58: 
    JUMPDEST		function updateSigner(address user, bool authorize) internal isSigner {...
    POP			function updateSigner(address user, bool authorize) internal isSigner {...
    POP			function updateSigner(address user, bool authorize) internal isSigner {...
    POP			function updateSigner(address user, bool authorize) internal isSigner {...
    POP			function updateSigner(address user, bool authorize) internal isSigner {...
    JUMP	[out]		function updateSigner(address user, bool authorize) internal isSigner {...
  tag55: 
    JUMPDEST		function updateRelease(uint32 major, uint32 minor, uint32 patch, bytes20 commit, bool release) internal isSigner {...
    PUSH 0		Votes votes
    PUSH 0		uint i
    PUSH 0		authorised
    PUSH 0		authorised
    POP			authorised
    PUSH 0		authorised[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		authorised[msg.sender]
    AND			authorised[msg.sender]
    DUP2			authorised[msg.sender]
    MSTORE			authorised[msg.sender]
    PUSH 20		authorised[msg.sender]
    ADD			authorised[msg.sender]
    SWAP1			authorised[msg.sender]
    DUP2			authorised[msg.sender]
    MSTORE			authorised[msg.sender]
    PUSH 20		authorised[msg.sender]
    ADD			authorised[msg.sender]
    PUSH 0		authorised[msg.sender]
    SHA3			authorised[msg.sender]
    PUSH 0		authorised[msg.sender]
    SWAP1			authorised[msg.sender]
    SLOAD			authorised[msg.sender]
    SWAP1			authorised[msg.sender]
    PUSH 100		authorised[msg.sender]
    EXP			authorised[msg.sender]
    SWAP1			authorised[msg.sender]
    DIV			authorised[msg.sender]
    PUSH FF		authorised[msg.sender]
    AND			authorised[msg.sender]
    ISZERO			if (authorised[msg.sender]) {...
    PUSH [tag140]		if (authorised[msg.sender]) {...
    JUMPI			if (authorised[msg.sender]) {...
    DUP3			release
    ISZERO			!release
    DUP1			!release && verProp.votes.pass.length == 0
    ISZERO			!release && verProp.votes.pass.length == 0
    PUSH [tag141]		!release && verProp.votes.pass.length == 0
    JUMPI			!release && verProp.votes.pass.length == 0
    POP			!release && verProp.votes.pass.length == 0
    PUSH 0		0
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 2		verProp.votes
    ADD			verProp.votes
    PUSH 0		verProp.votes
    POP			verProp.votes
    PUSH 0		verProp.votes.pass
    ADD			verProp.votes.pass
    PUSH 0		verProp.votes.pass
    POP			verProp.votes.pass
    DUP1			verProp.votes.pass.length
    SLOAD			verProp.votes.pass.length
    SWAP1			verProp.votes.pass.length
    POP			verProp.votes.pass.length
    EQ			verProp.votes.pass.length == 0
  tag141: 
    JUMPDEST		!release && verProp.votes.pass.length == 0
    ISZERO			if (!release && verProp.votes.pass.length == 0) {...
    PUSH [tag142]		if (!release && verProp.votes.pass.length == 0) {...
    JUMPI			if (!release && verProp.votes.pass.length == 0) {...
    PUSH [tag139]		return;
    JUMP			return;
  tag142: 
    JUMPDEST		if (!release && verProp.votes.pass.length == 0) {...
    PUSH 0		0
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 2		verProp.votes
    ADD			verProp.votes
    PUSH 0		verProp.votes
    POP			verProp.votes
    PUSH 0		verProp.votes.pass
    ADD			verProp.votes.pass
    PUSH 0		verProp.votes.pass
    POP			verProp.votes.pass
    DUP1			verProp.votes.pass.length
    SLOAD			verProp.votes.pass.length
    SWAP1			verProp.votes.pass.length
    POP			verProp.votes.pass.length
    EQ			verProp.votes.pass.length == 0
    ISZERO			if (verProp.votes.pass.length == 0) {...
    PUSH [tag143]		if (verProp.votes.pass.length == 0) {...
    JUMPI			if (verProp.votes.pass.length == 0) {...
    DUP7			major
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.major
    ADD			verProp.major
    PUSH 0		verProp.major
    PUSH 100		verProp.major  = major
    EXP			verProp.major  = major
    DUP2			verProp.major  = major
    SLOAD			verProp.major  = major
    DUP2			verProp.major  = major
    PUSH FFFFFFFF		verProp.major  = major
    MUL			verProp.major  = major
    NOT			verProp.major  = major
    AND			verProp.major  = major
    SWAP1			verProp.major  = major
    DUP4			verProp.major  = major
    MUL			verProp.major  = major
    OR			verProp.major  = major
    SWAP1			verProp.major  = major
    SSTORE			verProp.major  = major
    POP			verProp.major  = major
    DUP6			minor
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.minor
    ADD			verProp.minor
    PUSH 4		verProp.minor
    PUSH 100		verProp.minor  = minor
    EXP			verProp.minor  = minor
    DUP2			verProp.minor  = minor
    SLOAD			verProp.minor  = minor
    DUP2			verProp.minor  = minor
    PUSH FFFFFFFF		verProp.minor  = minor
    MUL			verProp.minor  = minor
    NOT			verProp.minor  = minor
    AND			verProp.minor  = minor
    SWAP1			verProp.minor  = minor
    DUP4			verProp.minor  = minor
    MUL			verProp.minor  = minor
    OR			verProp.minor  = minor
    SWAP1			verProp.minor  = minor
    SSTORE			verProp.minor  = minor
    POP			verProp.minor  = minor
    DUP5			patch
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.patch
    ADD			verProp.patch
    PUSH 8		verProp.patch
    PUSH 100		verProp.patch  = patch
    EXP			verProp.patch  = patch
    DUP2			verProp.patch  = patch
    SLOAD			verProp.patch  = patch
    DUP2			verProp.patch  = patch
    PUSH FFFFFFFF		verProp.patch  = patch
    MUL			verProp.patch  = patch
    NOT			verProp.patch  = patch
    AND			verProp.patch  = patch
    SWAP1			verProp.patch  = patch
    DUP4			verProp.patch  = patch
    MUL			verProp.patch  = patch
    OR			verProp.patch  = patch
    SWAP1			verProp.patch  = patch
    SSTORE			verProp.patch  = patch
    POP			verProp.patch  = patch
    DUP4			commit
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.commit
    ADD			verProp.commit
    PUSH C		verProp.commit
    PUSH 100		verProp.commit = commit
    EXP			verProp.commit = commit
    DUP2			verProp.commit = commit
    SLOAD			verProp.commit = commit
    DUP2			verProp.commit = commit
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		verProp.commit = commit
    MUL			verProp.commit = commit
    NOT			verProp.commit = commit
    AND			verProp.commit = commit
    SWAP1			verProp.commit = commit
    DUP4			verProp.commit = commit
    PUSH 1000000000000000000000000		verProp.commit = commit
    SWAP1			verProp.commit = commit
    DIV			verProp.commit = commit
    MUL			verProp.commit = commit
    OR			verProp.commit = commit
    SWAP1			verProp.commit = commit
    SSTORE			verProp.commit = commit
    POP			verProp.commit = commit
  tag143: 
    JUMPDEST		if (verProp.votes.pass.length == 0) {...
    DUP3			release
    DUP1			release && (verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit)
    ISZERO			release && (verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit)
    PUSH [tag144]		release && (verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit)
    JUMPI			release && (verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit)
    POP			release && (verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit)
    DUP7			major
    PUSH FFFFFFFF		verProp.major != major
    AND			verProp.major != major
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.major
    ADD			verProp.major
    PUSH 0		verProp.major
    SWAP1			verProp.major
    SLOAD			verProp.major
    SWAP1			verProp.major
    PUSH 100		verProp.major
    EXP			verProp.major
    SWAP1			verProp.major
    DIV			verProp.major
    PUSH FFFFFFFF		verProp.major
    AND			verProp.major
    PUSH FFFFFFFF		verProp.major != major
    AND			verProp.major != major
    EQ			verProp.major != major
    ISZERO			verProp.major != major
    DUP1			verProp.major != major || verProp.minor != minor
    PUSH [tag145]		verProp.major != major || verProp.minor != minor
    JUMPI			verProp.major != major || verProp.minor != minor
    POP			verProp.major != major || verProp.minor != minor
    DUP6			minor
    PUSH FFFFFFFF		verProp.minor != minor
    AND			verProp.minor != minor
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.minor
    ADD			verProp.minor
    PUSH 4		verProp.minor
    SWAP1			verProp.minor
    SLOAD			verProp.minor
    SWAP1			verProp.minor
    PUSH 100		verProp.minor
    EXP			verProp.minor
    SWAP1			verProp.minor
    DIV			verProp.minor
    PUSH FFFFFFFF		verProp.minor
    AND			verProp.minor
    PUSH FFFFFFFF		verProp.minor != minor
    AND			verProp.minor != minor
    EQ			verProp.minor != minor
    ISZERO			verProp.minor != minor
  tag145: 
    JUMPDEST		verProp.major != major || verProp.minor != minor
    DUP1			verProp.major != major || verProp.minor != minor || verProp.patch != patch
    PUSH [tag146]		verProp.major != major || verProp.minor != minor || verProp.patch != patch
    JUMPI			verProp.major != major || verProp.minor != minor || verProp.patch != patch
    POP			verProp.major != major || verProp.minor != minor || verProp.patch != patch
    DUP5			patch
    PUSH FFFFFFFF		verProp.patch != patch
    AND			verProp.patch != patch
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.patch
    ADD			verProp.patch
    PUSH 8		verProp.patch
    SWAP1			verProp.patch
    SLOAD			verProp.patch
    SWAP1			verProp.patch
    PUSH 100		verProp.patch
    EXP			verProp.patch
    SWAP1			verProp.patch
    DIV			verProp.patch
    PUSH FFFFFFFF		verProp.patch
    AND			verProp.patch
    PUSH FFFFFFFF		verProp.patch != patch
    AND			verProp.patch != patch
    EQ			verProp.patch != patch
    ISZERO			verProp.patch != patch
  tag146: 
    JUMPDEST		verProp.major != major || verProp.minor != minor || verProp.patch != patch
    DUP1			verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit
    PUSH [tag147]		verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit
    JUMPI			verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit
    POP			verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit
    DUP4			commit
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 0		verProp.commit
    ADD			verProp.commit
    PUSH C		verProp.commit
    SWAP1			verProp.commit
    SLOAD			verProp.commit
    SWAP1			verProp.commit
    PUSH 100		verProp.commit
    EXP			verProp.commit
    SWAP1			verProp.commit
    DIV			verProp.commit
    PUSH 1000000000000000000000000		verProp.commit
    MUL			verProp.commit
    EQ			verProp.commit != commit
    ISZERO			verProp.commit != commit
  tag147: 
    JUMPDEST		verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit
  tag144: 
    JUMPDEST		release && (verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit)
    ISZERO			if (release && (verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit)) {...
    PUSH [tag148]		if (release && (verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit)) {...
    JUMPI			if (release && (verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit)) {...
    PUSH [tag139]		return;
    JUMP			return;
  tag148: 
    JUMPDEST		if (release && (verProp.major != major || verProp.minor != minor || verProp.patch != patch || verProp.commit != commit)) {...
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 2		verProp.votes
    ADD			verProp.votes
    PUSH 0		verProp.votes
    POP			verProp.votes
    SWAP2			Votes votes = verProp.votes
    POP			Votes votes = verProp.votes
    PUSH 0		0
    SWAP1			uint i = 0
    POP			uint i = 0
  tag149: 
    JUMPDEST		for (uint i = 0; i < votes.pass.length; i++) {...
    DUP2			votes
    PUSH 0		votes.pass
    ADD			votes.pass
    PUSH 0		votes.pass
    POP			votes.pass
    DUP1			votes.pass.length
    SLOAD			votes.pass.length
    SWAP1			votes.pass.length
    POP			votes.pass.length
    DUP2			i
    LT			i < votes.pass.length
    ISZERO			for (uint i = 0; i < votes.pass.length; i++) {...
    PUSH [tag150]		for (uint i = 0; i < votes.pass.length; i++) {...
    JUMPI			for (uint i = 0; i < votes.pass.length; i++) {...
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.pass[i] == msg.sender
    AND			votes.pass[i] == msg.sender
    DUP3			votes
    PUSH 0		votes.pass
    ADD			votes.pass
    PUSH 0		votes.pass
    POP			votes.pass
    DUP3			i
    DUP2			votes.pass[i]
    SLOAD			votes.pass[i]
    DUP2			votes.pass[i]
    LT			votes.pass[i]
    ISZERO			votes.pass[i]
    PUSH [ErrorTag]		votes.pass[i]
    JUMPI			votes.pass[i]
    SWAP1			votes.pass[i]
    PUSH 0		votes.pass[i]
    MSTORE			votes.pass[i]
    PUSH 20		votes.pass[i]
    PUSH 0		votes.pass[i]
    SHA3			votes.pass[i]
    SWAP1			votes.pass[i]
    ADD			votes.pass[i]
    PUSH 0		votes.pass[i]
  tag152: 
    JUMPDEST		votes.pass[i]
    SWAP1			votes.pass[i]
    SLOAD			votes.pass[i]
    SWAP1			votes.pass[i]
    PUSH 100		votes.pass[i]
    EXP			votes.pass[i]
    SWAP1			votes.pass[i]
    DIV			votes.pass[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.pass[i]
    AND			votes.pass[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.pass[i] == msg.sender
    AND			votes.pass[i] == msg.sender
    EQ			votes.pass[i] == msg.sender
    ISZERO			if (votes.pass[i] == msg.sender) {...
    PUSH [tag153]		if (votes.pass[i] == msg.sender) {...
    JUMPI			if (votes.pass[i] == msg.sender) {...
    PUSH [tag139]		return;
    JUMP			return;
  tag153: 
    JUMPDEST		if (votes.pass[i] == msg.sender) {...
  tag151: 
    JUMPDEST		for (uint i = 0; i < votes.pass.length; i++) {...
    DUP1			i++
    DUP1			i++
    PUSH 1		i++
    ADD			i++
    SWAP2			i++
    POP			i++
    POP			i++
    PUSH [tag149]		for (uint i = 0; i < votes.pass.length; i++) {...
    JUMP			for (uint i = 0; i < votes.pass.length; i++) {...
  tag150: 
    JUMPDEST		for (uint i = 0; i < votes.pass.length; i++) {...
    PUSH 0		0
    SWAP1			i = 0
    POP			i = 0
    DUP1			i = 0
    POP			i = 0
  tag154: 
    JUMPDEST		for (i = 0; i < votes.fail.length; i++) {...
    DUP2			votes
    PUSH 1		votes.fail
    ADD			votes.fail
    PUSH 0		votes.fail
    POP			votes.fail
    DUP1			votes.fail.length
    SLOAD			votes.fail.length
    SWAP1			votes.fail.length
    POP			votes.fail.length
    DUP2			i
    LT			i < votes.fail.length
    ISZERO			for (i = 0; i < votes.fail.length; i++) {...
    PUSH [tag155]		for (i = 0; i < votes.fail.length; i++) {...
    JUMPI			for (i = 0; i < votes.fail.length; i++) {...
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.fail[i] == msg.sender
    AND			votes.fail[i] == msg.sender
    DUP3			votes
    PUSH 1		votes.fail
    ADD			votes.fail
    PUSH 0		votes.fail
    POP			votes.fail
    DUP3			i
    DUP2			votes.fail[i]
    SLOAD			votes.fail[i]
    DUP2			votes.fail[i]
    LT			votes.fail[i]
    ISZERO			votes.fail[i]
    PUSH [ErrorTag]		votes.fail[i]
    JUMPI			votes.fail[i]
    SWAP1			votes.fail[i]
    PUSH 0		votes.fail[i]
    MSTORE			votes.fail[i]
    PUSH 20		votes.fail[i]
    PUSH 0		votes.fail[i]
    SHA3			votes.fail[i]
    SWAP1			votes.fail[i]
    ADD			votes.fail[i]
    PUSH 0		votes.fail[i]
  tag157: 
    JUMPDEST		votes.fail[i]
    SWAP1			votes.fail[i]
    SLOAD			votes.fail[i]
    SWAP1			votes.fail[i]
    PUSH 100		votes.fail[i]
    EXP			votes.fail[i]
    SWAP1			votes.fail[i]
    DIV			votes.fail[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.fail[i]
    AND			votes.fail[i]
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.fail[i] == msg.sender
    AND			votes.fail[i] == msg.sender
    EQ			votes.fail[i] == msg.sender
    ISZERO			if (votes.fail[i] == msg.sender) {...
    PUSH [tag158]		if (votes.fail[i] == msg.sender) {...
    JUMPI			if (votes.fail[i] == msg.sender) {...
    PUSH [tag139]		return;
    JUMP			return;
  tag158: 
    JUMPDEST		if (votes.fail[i] == msg.sender) {...
  tag156: 
    JUMPDEST		for (i = 0; i < votes.fail.length; i++) {...
    DUP1			i++
    DUP1			i++
    PUSH 1		i++
    ADD			i++
    SWAP2			i++
    POP			i++
    POP			i++
    PUSH [tag154]		for (i = 0; i < votes.fail.length; i++) {...
    JUMP			for (i = 0; i < votes.fail.length; i++) {...
  tag155: 
    JUMPDEST		for (i = 0; i < votes.fail.length; i++) {...
    DUP3			release
    ISZERO			if (release) {...
    PUSH [tag159]		if (release) {...
    JUMPI			if (release) {...
    DUP2			votes
    PUSH 0		votes.pass
    ADD			votes.pass
    PUSH 0		votes.pass
    POP			votes.pass
    DUP1			votes.pass.push(msg.sender)
    SLOAD			votes.pass.push(msg.sender)
    DUP1			votes.pass.push(msg.sender)
    PUSH 1		votes.pass.push(msg.sender)
    ADD			votes.pass.push(msg.sender)
    DUP3			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    SLOAD			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    DUP4			votes.pass.push(msg.sender)
    SSTORE			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    ISZERO			votes.pass.push(msg.sender)
    GT			votes.pass.push(msg.sender)
    PUSH [tag160]		votes.pass.push(msg.sender)
    JUMPI			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    DUP4			votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    MSTORE			votes.pass.push(msg.sender)
    PUSH 20		votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    SHA3			votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    DUP3			votes.pass.push(msg.sender)
    ADD			votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    ADD			votes.pass.push(msg.sender)
    PUSH [tag161]		votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    PUSH [tag162]		votes.pass.push(msg.sender)
    JUMP			votes.pass.push(msg.sender)
  tag162: 
    JUMPDEST		votes.pass.push(msg.sender)
    DUP1			votes.pass.push(msg.sender)
    DUP3			votes.pass.push(msg.sender)
    GT			votes.pass.push(msg.sender)
    ISZERO			votes.pass.push(msg.sender)
    PUSH [tag163]		votes.pass.push(msg.sender)
    JUMPI			votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    SSTORE			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    PUSH 1		votes.pass.push(msg.sender)
    ADD			votes.pass.push(msg.sender)
    PUSH [tag162]		votes.pass.push(msg.sender)
    JUMP			votes.pass.push(msg.sender)
  tag163: 
    JUMPDEST		votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    JUMP			votes.pass.push(msg.sender)
  tag161: 
    JUMPDEST		votes.pass.push(msg.sender)
  tag160: 
    JUMPDEST		votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    MSTORE			votes.pass.push(msg.sender)
    PUSH 20		votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
    SHA3			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    ADD			votes.pass.push(msg.sender)
    PUSH 0		votes.pass.push(msg.sender)
  tag164: 
    JUMPDEST		votes.pass.push(msg.sender)
    CALLER			msg.sender
    SWAP1			votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    SWAP2			votes.pass.push(msg.sender)
    PUSH 100		votes.pass.push(msg.sender)
    EXP			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    SLOAD			votes.pass.push(msg.sender)
    DUP2			votes.pass.push(msg.sender)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.pass.push(msg.sender)
    MUL			votes.pass.push(msg.sender)
    NOT			votes.pass.push(msg.sender)
    AND			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    DUP4			votes.pass.push(msg.sender)
    MUL			votes.pass.push(msg.sender)
    OR			votes.pass.push(msg.sender)
    SWAP1			votes.pass.push(msg.sender)
    SSTORE			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    POP			votes.pass.push(msg.sender)
    PUSH 2		2
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP1			voters.length
    SLOAD			voters.length
    SWAP1			voters.length
    POP			voters.length
    DIV			voters.length / 2
    DUP3			votes
    PUSH 0		votes.pass
    ADD			votes.pass
    PUSH 0		votes.pass
    POP			votes.pass
    DUP1			votes.pass.length
    SLOAD			votes.pass.length
    SWAP1			votes.pass.length
    POP			votes.pass.length
    GT			votes.pass.length <= voters.length / 2
    ISZERO			votes.pass.length <= voters.length / 2
    ISZERO			if (votes.pass.length <= voters.length / 2) {...
    PUSH [tag165]		if (votes.pass.length <= voters.length / 2) {...
    JUMPI			if (votes.pass.length <= voters.length / 2) {...
    PUSH [tag139]		return;
    JUMP			return;
  tag165: 
    JUMPDEST		if (votes.pass.length <= voters.length / 2) {...
    PUSH [tag166]		if (release) {...
    JUMP			if (release) {...
  tag159: 
    JUMPDEST		if (release) {...
    DUP2			votes
    PUSH 1		votes.fail
    ADD			votes.fail
    PUSH 0		votes.fail
    POP			votes.fail
    DUP1			votes.fail.push(msg.sender)
    SLOAD			votes.fail.push(msg.sender)
    DUP1			votes.fail.push(msg.sender)
    PUSH 1		votes.fail.push(msg.sender)
    ADD			votes.fail.push(msg.sender)
    DUP3			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    SLOAD			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    DUP4			votes.fail.push(msg.sender)
    SSTORE			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    ISZERO			votes.fail.push(msg.sender)
    GT			votes.fail.push(msg.sender)
    PUSH [tag167]		votes.fail.push(msg.sender)
    JUMPI			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    DUP4			votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    MSTORE			votes.fail.push(msg.sender)
    PUSH 20		votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    SHA3			votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    DUP3			votes.fail.push(msg.sender)
    ADD			votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    ADD			votes.fail.push(msg.sender)
    PUSH [tag168]		votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    PUSH [tag169]		votes.fail.push(msg.sender)
    JUMP			votes.fail.push(msg.sender)
  tag169: 
    JUMPDEST		votes.fail.push(msg.sender)
    DUP1			votes.fail.push(msg.sender)
    DUP3			votes.fail.push(msg.sender)
    GT			votes.fail.push(msg.sender)
    ISZERO			votes.fail.push(msg.sender)
    PUSH [tag170]		votes.fail.push(msg.sender)
    JUMPI			votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    SSTORE			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    PUSH 1		votes.fail.push(msg.sender)
    ADD			votes.fail.push(msg.sender)
    PUSH [tag169]		votes.fail.push(msg.sender)
    JUMP			votes.fail.push(msg.sender)
  tag170: 
    JUMPDEST		votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    JUMP			votes.fail.push(msg.sender)
  tag168: 
    JUMPDEST		votes.fail.push(msg.sender)
  tag167: 
    JUMPDEST		votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    MSTORE			votes.fail.push(msg.sender)
    PUSH 20		votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
    SHA3			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    ADD			votes.fail.push(msg.sender)
    PUSH 0		votes.fail.push(msg.sender)
  tag171: 
    JUMPDEST		votes.fail.push(msg.sender)
    CALLER			msg.sender
    SWAP1			votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    SWAP2			votes.fail.push(msg.sender)
    PUSH 100		votes.fail.push(msg.sender)
    EXP			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    SLOAD			votes.fail.push(msg.sender)
    DUP2			votes.fail.push(msg.sender)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		votes.fail.push(msg.sender)
    MUL			votes.fail.push(msg.sender)
    NOT			votes.fail.push(msg.sender)
    AND			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    DUP4			votes.fail.push(msg.sender)
    MUL			votes.fail.push(msg.sender)
    OR			votes.fail.push(msg.sender)
    SWAP1			votes.fail.push(msg.sender)
    SSTORE			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    POP			votes.fail.push(msg.sender)
    PUSH 2		2
    PUSH 1		voters
    PUSH 0		voters
    POP			voters
    DUP1			voters.length
    SLOAD			voters.length
    SWAP1			voters.length
    POP			voters.length
    DIV			voters.length / 2
    DUP3			votes
    PUSH 1		votes.fail
    ADD			votes.fail
    PUSH 0		votes.fail
    POP			votes.fail
    DUP1			votes.fail.length
    SLOAD			votes.fail.length
    SWAP1			votes.fail.length
    POP			votes.fail.length
    GT			votes.fail.length <= voters.length / 2
    ISZERO			votes.fail.length <= voters.length / 2
    ISZERO			if (votes.fail.length <= voters.length / 2) {...
    PUSH [tag172]		if (votes.fail.length <= voters.length / 2) {...
    JUMPI			if (votes.fail.length <= voters.length / 2) {...
    PUSH [tag139]		return;
    JUMP			return;
  tag172: 
    JUMPDEST		if (votes.fail.length <= voters.length / 2) {...
  tag166: 
    JUMPDEST		if (release) {...
    DUP3			release
    ISZERO			if (release) {...
    PUSH [tag173]		if (release) {...
    JUMPI			if (release) {...
    TIMESTAMP			now
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    PUSH 1		verProp.time
    ADD			verProp.time
    PUSH 0		verProp.time
    PUSH 100		verProp.time = uint64(now)
    EXP			verProp.time = uint64(now)
    DUP2			verProp.time = uint64(now)
    SLOAD			verProp.time = uint64(now)
    DUP2			verProp.time = uint64(now)
    PUSH FFFFFFFFFFFFFFFF		verProp.time = uint64(now)
    MUL			verProp.time = uint64(now)
    NOT			verProp.time = uint64(now)
    AND			verProp.time = uint64(now)
    SWAP1			verProp.time = uint64(now)
    DUP4			verProp.time = uint64(now)
    MUL			verProp.time = uint64(now)
    OR			verProp.time = uint64(now)
    SWAP1			verProp.time = uint64(now)
    SSTORE			verProp.time = uint64(now)
    POP			verProp.time = uint64(now)
    PUSH 8		releases
    PUSH 0		releases
    POP			releases
    DUP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP1			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    DUP3			releases.push(verProp)
    DUP2			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP2			releases.push(verProp)
    DUP4			releases.push(verProp)
    SSTORE			releases.push(verProp)
    DUP2			releases.push(verProp)
    DUP2			releases.push(verProp)
    ISZERO			releases.push(verProp)
    GT			releases.push(verProp)
    PUSH [tag174]		releases.push(verProp)
    JUMPI			releases.push(verProp)
    PUSH 4		releases.push(verProp)
    MUL			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 4		releases.push(verProp)
    MUL			releases.push(verProp)
    DUP4			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    MSTORE			releases.push(verProp)
    PUSH 20		releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SHA3			releases.push(verProp)
    SWAP2			releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    SWAP2			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH [tag175]		releases.push(verProp)
    SWAP2			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH [tag176]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag176: 
    JUMPDEST		releases.push(verProp)
    DUP1			releases.push(verProp)
    DUP3			releases.push(verProp)
    GT			releases.push(verProp)
    ISZERO			releases.push(verProp)
    PUSH [tag177]		releases.push(verProp)
    JUMPI			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH FFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 4		releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH FFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 8		releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH FFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH C		releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH FFFFFFFFFFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    PUSH 2		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    POP			releases.push(verProp)
    DUP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    SSTORE			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    MSTORE			releases.push(verProp)
    PUSH 20		releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SHA3			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP2			releases.push(verProp)
    ADD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH [tag179]		releases.push(verProp)
    SWAP2			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH [tag180]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag180: 
    JUMPDEST		releases.push(verProp)
    DUP1			releases.push(verProp)
    DUP3			releases.push(verProp)
    GT			releases.push(verProp)
    ISZERO			releases.push(verProp)
    PUSH [tag181]		releases.push(verProp)
    JUMPI			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP2			releases.push(verProp)
    DUP2			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH [tag180]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag181: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    JUMP			releases.push(verProp)
  tag179: 
    JUMPDEST		releases.push(verProp)
  tag178: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    POP			releases.push(verProp)
    DUP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    SSTORE			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    MSTORE			releases.push(verProp)
    PUSH 20		releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SHA3			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP2			releases.push(verProp)
    ADD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH [tag183]		releases.push(verProp)
    SWAP2			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH [tag184]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag184: 
    JUMPDEST		releases.push(verProp)
    DUP1			releases.push(verProp)
    DUP3			releases.push(verProp)
    GT			releases.push(verProp)
    ISZERO			releases.push(verProp)
    PUSH [tag185]		releases.push(verProp)
    JUMPI			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP2			releases.push(verProp)
    DUP2			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH [tag184]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag185: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    JUMP			releases.push(verProp)
  tag183: 
    JUMPDEST		releases.push(verProp)
  tag182: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH [tag176]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag177: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    JUMP			releases.push(verProp)
  tag175: 
    JUMPDEST		releases.push(verProp)
  tag174: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    SWAP2			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    MSTORE			releases.push(verProp)
    PUSH 20		releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SHA3			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 4		releases.push(verProp)
    MUL			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
  tag186: 
    JUMPDEST		releases.push(verProp)
    PUSH 4		verProp
    PUSH 0		verProp
    POP			verProp
    SWAP1			releases.push(verProp)
    SWAP2			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SWAP2			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SWAP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DIV			releases.push(verProp)
    PUSH FFFFFFFF		releases.push(verProp)
    AND			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH FFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP4			releases.push(verProp)
    MUL			releases.push(verProp)
    OR			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 4		releases.push(verProp)
    SWAP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DIV			releases.push(verProp)
    PUSH FFFFFFFF		releases.push(verProp)
    AND			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 4		releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH FFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP4			releases.push(verProp)
    MUL			releases.push(verProp)
    OR			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 8		releases.push(verProp)
    SWAP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DIV			releases.push(verProp)
    PUSH FFFFFFFF		releases.push(verProp)
    AND			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 8		releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH FFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP4			releases.push(verProp)
    MUL			releases.push(verProp)
    OR			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH C		releases.push(verProp)
    SWAP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DIV			releases.push(verProp)
    PUSH 1000000000000000000000000		releases.push(verProp)
    MUL			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH C		releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP4			releases.push(verProp)
    PUSH 1000000000000000000000000		releases.push(verProp)
    SWAP1			releases.push(verProp)
    DIV			releases.push(verProp)
    MUL			releases.push(verProp)
    OR			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SWAP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DIV			releases.push(verProp)
    PUSH FFFFFFFFFFFFFFFF		releases.push(verProp)
    AND			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH FFFFFFFFFFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP4			releases.push(verProp)
    MUL			releases.push(verProp)
    OR			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 2		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    POP			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 2		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    POP			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    POP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP3			releases.push(verProp)
    DUP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP3			releases.push(verProp)
    DUP3			releases.push(verProp)
    SSTORE			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    MSTORE			releases.push(verProp)
    PUSH 20		releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SHA3			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP2			releases.push(verProp)
    ADD			releases.push(verProp)
    SWAP3			releases.push(verProp)
    DUP3			releases.push(verProp)
    ISZERO			releases.push(verProp)
    PUSH [tag187]		releases.push(verProp)
    JUMPI			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    MSTORE			releases.push(verProp)
    PUSH 20		releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SHA3			releases.push(verProp)
    SWAP2			releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
  tag188: 
    JUMPDEST		releases.push(verProp)
    DUP3			releases.push(verProp)
    DUP2			releases.push(verProp)
    GT			releases.push(verProp)
    ISZERO			releases.push(verProp)
    PUSH [tag189]		releases.push(verProp)
    JUMPI			releases.push(verProp)
    DUP3			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP3			releases.push(verProp)
    SSTORE			releases.push(verProp)
    SWAP2			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    SWAP2			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH [tag188]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag189: 
    JUMPDEST		releases.push(verProp)
  tag187: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH [tag190]		releases.push(verProp)
    SWAP2			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH [tag191]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag191: 
    JUMPDEST		releases.push(verProp)
    DUP1			releases.push(verProp)
    DUP3			releases.push(verProp)
    GT			releases.push(verProp)
    ISZERO			releases.push(verProp)
    PUSH [tag192]		releases.push(verProp)
    JUMPI			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP2			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH [tag191]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag192: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    JUMP			releases.push(verProp)
  tag190: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    POP			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    POP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP3			releases.push(verProp)
    DUP1			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP3			releases.push(verProp)
    DUP3			releases.push(verProp)
    SSTORE			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    MSTORE			releases.push(verProp)
    PUSH 20		releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SHA3			releases.push(verProp)
    SWAP1			releases.push(verProp)
    DUP2			releases.push(verProp)
    ADD			releases.push(verProp)
    SWAP3			releases.push(verProp)
    DUP3			releases.push(verProp)
    ISZERO			releases.push(verProp)
    PUSH [tag193]		releases.push(verProp)
    JUMPI			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    MSTORE			releases.push(verProp)
    PUSH 20		releases.push(verProp)
    PUSH 0		releases.push(verProp)
    SHA3			releases.push(verProp)
    SWAP2			releases.push(verProp)
    DUP3			releases.push(verProp)
    ADD			releases.push(verProp)
  tag194: 
    JUMPDEST		releases.push(verProp)
    DUP3			releases.push(verProp)
    DUP2			releases.push(verProp)
    GT			releases.push(verProp)
    ISZERO			releases.push(verProp)
    PUSH [tag195]		releases.push(verProp)
    JUMPI			releases.push(verProp)
    DUP3			releases.push(verProp)
    SLOAD			releases.push(verProp)
    DUP3			releases.push(verProp)
    SSTORE			releases.push(verProp)
    SWAP2			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    SWAP2			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH [tag194]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag195: 
    JUMPDEST		releases.push(verProp)
  tag193: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH [tag196]		releases.push(verProp)
    SWAP2			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH [tag197]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag197: 
    JUMPDEST		releases.push(verProp)
    DUP1			releases.push(verProp)
    DUP3			releases.push(verProp)
    GT			releases.push(verProp)
    ISZERO			releases.push(verProp)
    PUSH [tag198]		releases.push(verProp)
    JUMPI			releases.push(verProp)
    PUSH 0		releases.push(verProp)
    DUP2			releases.push(verProp)
    DUP2			releases.push(verProp)
    PUSH 100		releases.push(verProp)
    EXP			releases.push(verProp)
    DUP2			releases.push(verProp)
    SLOAD			releases.push(verProp)
    SWAP1			releases.push(verProp)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		releases.push(verProp)
    MUL			releases.push(verProp)
    NOT			releases.push(verProp)
    AND			releases.push(verProp)
    SWAP1			releases.push(verProp)
    SSTORE			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 1		releases.push(verProp)
    ADD			releases.push(verProp)
    PUSH [tag197]		releases.push(verProp)
    JUMP			releases.push(verProp)
  tag198: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    SWAP1			releases.push(verProp)
    JUMP			releases.push(verProp)
  tag196: 
    JUMPDEST		releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    POP			releases.push(verProp)
    PUSH 4		verProp
    PUSH 0		verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 4		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 8		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH C		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 1		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFFFFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 2		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    POP			delete verProp
    DUP1			delete verProp
    SLOAD			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    SSTORE			delete verProp
    SWAP1			delete verProp
    PUSH 0		delete verProp
    MSTORE			delete verProp
    PUSH 20		delete verProp
    PUSH 0		delete verProp
    SHA3			delete verProp
    SWAP1			delete verProp
    DUP2			delete verProp
    ADD			delete verProp
    SWAP1			delete verProp
    PUSH [tag200]		delete verProp
    SWAP2			delete verProp
    SWAP1			delete verProp
    PUSH [tag201]		delete verProp
    JUMP			delete verProp
  tag201: 
    JUMPDEST		delete verProp
    DUP1			delete verProp
    DUP3			delete verProp
    GT			delete verProp
    ISZERO			delete verProp
    PUSH [tag202]		delete verProp
    JUMPI			delete verProp
    PUSH 0		delete verProp
    DUP2			delete verProp
    DUP2			delete verProp
    POP			delete verProp
    PUSH 0		delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    POP			delete verProp
    PUSH 1		delete verProp
    ADD			delete verProp
    PUSH [tag201]		delete verProp
    JUMP			delete verProp
  tag202: 
    JUMPDEST		delete verProp
    POP			delete verProp
    SWAP1			delete verProp
    JUMP			delete verProp
  tag200: 
    JUMPDEST		delete verProp
  tag199: 
    JUMPDEST		delete verProp
    POP			delete verProp
    PUSH 1		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    POP			delete verProp
    DUP1			delete verProp
    SLOAD			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    SSTORE			delete verProp
    SWAP1			delete verProp
    PUSH 0		delete verProp
    MSTORE			delete verProp
    PUSH 20		delete verProp
    PUSH 0		delete verProp
    SHA3			delete verProp
    SWAP1			delete verProp
    DUP2			delete verProp
    ADD			delete verProp
    SWAP1			delete verProp
    PUSH [tag204]		delete verProp
    SWAP2			delete verProp
    SWAP1			delete verProp
    PUSH [tag205]		delete verProp
    JUMP			delete verProp
  tag205: 
    JUMPDEST		delete verProp
    DUP1			delete verProp
    DUP3			delete verProp
    GT			delete verProp
    ISZERO			delete verProp
    PUSH [tag206]		delete verProp
    JUMPI			delete verProp
    PUSH 0		delete verProp
    DUP2			delete verProp
    DUP2			delete verProp
    POP			delete verProp
    PUSH 0		delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    POP			delete verProp
    PUSH 1		delete verProp
    ADD			delete verProp
    PUSH [tag205]		delete verProp
    JUMP			delete verProp
  tag206: 
    JUMPDEST		delete verProp
    POP			delete verProp
    SWAP1			delete verProp
    JUMP			delete verProp
  tag204: 
    JUMPDEST		delete verProp
  tag203: 
    JUMPDEST		delete verProp
    POP			delete verProp
    POP			delete verProp
    POP			delete verProp
    POP			delete verProp
    POP			delete verProp
    PUSH [tag207]		if (release) {...
    JUMP			if (release) {...
  tag173: 
    JUMPDEST		if (release) {...
    PUSH 4		verProp
    PUSH 0		verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 4		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 8		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH C		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 1		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    PUSH 100		delete verProp
    EXP			delete verProp
    DUP2			delete verProp
    SLOAD			delete verProp
    SWAP1			delete verProp
    PUSH FFFFFFFFFFFFFFFF		delete verProp
    MUL			delete verProp
    NOT			delete verProp
    AND			delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    PUSH 2		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    POP			delete verProp
    DUP1			delete verProp
    SLOAD			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    SSTORE			delete verProp
    SWAP1			delete verProp
    PUSH 0		delete verProp
    MSTORE			delete verProp
    PUSH 20		delete verProp
    PUSH 0		delete verProp
    SHA3			delete verProp
    SWAP1			delete verProp
    DUP2			delete verProp
    ADD			delete verProp
    SWAP1			delete verProp
    PUSH [tag209]		delete verProp
    SWAP2			delete verProp
    SWAP1			delete verProp
    PUSH [tag210]		delete verProp
    JUMP			delete verProp
  tag210: 
    JUMPDEST		delete verProp
    DUP1			delete verProp
    DUP3			delete verProp
    GT			delete verProp
    ISZERO			delete verProp
    PUSH [tag211]		delete verProp
    JUMPI			delete verProp
    PUSH 0		delete verProp
    DUP2			delete verProp
    DUP2			delete verProp
    POP			delete verProp
    PUSH 0		delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    POP			delete verProp
    PUSH 1		delete verProp
    ADD			delete verProp
    PUSH [tag210]		delete verProp
    JUMP			delete verProp
  tag211: 
    JUMPDEST		delete verProp
    POP			delete verProp
    SWAP1			delete verProp
    JUMP			delete verProp
  tag209: 
    JUMPDEST		delete verProp
  tag208: 
    JUMPDEST		delete verProp
    POP			delete verProp
    PUSH 1		delete verProp
    DUP3			delete verProp
    ADD			delete verProp
    PUSH 0		delete verProp
    POP			delete verProp
    DUP1			delete verProp
    SLOAD			delete verProp
    PUSH 0		delete verProp
    DUP3			delete verProp
    SSTORE			delete verProp
    SWAP1			delete verProp
    PUSH 0		delete verProp
    MSTORE			delete verProp
    PUSH 20		delete verProp
    PUSH 0		delete verProp
    SHA3			delete verProp
    SWAP1			delete verProp
    DUP2			delete verProp
    ADD			delete verProp
    SWAP1			delete verProp
    PUSH [tag213]		delete verProp
    SWAP2			delete verProp
    SWAP1			delete verProp
    PUSH [tag214]		delete verProp
    JUMP			delete verProp
  tag214: 
    JUMPDEST		delete verProp
    DUP1			delete verProp
    DUP3			delete verProp
    GT			delete verProp
    ISZERO			delete verProp
    PUSH [tag215]		delete verProp
    JUMPI			delete verProp
    PUSH 0		delete verProp
    DUP2			delete verProp
    DUP2			delete verProp
    POP			delete verProp
    PUSH 0		delete verProp
    SWAP1			delete verProp
    SSTORE			delete verProp
    POP			delete verProp
    PUSH 1		delete verProp
    ADD			delete verProp
    PUSH [tag214]		delete verProp
    JUMP			delete verProp
  tag215: 
    JUMPDEST		delete verProp
    POP			delete verProp
    SWAP1			delete verProp
    JUMP			delete verProp
  tag213: 
    JUMPDEST		delete verProp
  tag212: 
    JUMPDEST		delete verProp
    POP			delete verProp
    POP			delete verProp
    POP			delete verProp
    POP			delete verProp
    POP			delete verProp
  tag207: 
    JUMPDEST		if (release) {...
  tag140: 
    JUMPDEST		if (authorised[msg.sender]) {...
  tag139: 
    JUMPDEST		function updateRelease(uint32 major, uint32 minor, uint32 patch, bytes20 commit, bool release) internal isSigner {...
    POP			function updateRelease(uint32 major, uint32 minor, uint32 patch, bytes20 commit, bool release) internal isSigner {...
    POP			function updateRelease(uint32 major, uint32 minor, uint32 patch, bytes20 commit, bool release) internal isSigner {...
    POP			function updateRelease(uint32 major, uint32 minor, uint32 patch, bytes20 commit, bool release) internal isSigner {...
    POP			function updateRelease(uint32 major, uint32 minor, uint32 patch, bytes20 commit, bool release) internal isSigner {...
    POP			function updateRelease(uint32 major, uint32 minor, uint32 patch, bytes20 commit, bool release) internal isSigner {...
    POP			function updateRelease(uint32 major, uint32 minor, uint32 patch, bytes20 commit, bool release) internal isSigner {...
    POP			function updateRelease(uint32 major, uint32 minor, uint32 patch, bytes20 commit, bool release) internal isSigner {...
    JUMP	[out]		function updateRelease(uint32 major, uint32 minor, uint32 patch, bytes20 commit, bool release) internal isSigner {...
