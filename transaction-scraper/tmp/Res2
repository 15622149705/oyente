
======= GreedPit =======
EVM assembly:
.code:
  PUSH 60		contract GreedPit {...
  PUSH 40		contract GreedPit {...
  MSTORE			contract GreedPit {...
  PUSH 0		0
  PUSH 1		uint private balance = 0
  PUSH 0		uint private balance = 0
  POP			uint private balance = 0
  SSTORE			uint private balance = 0
  PUSH 0		0
  PUSH 2		uint private uniqueUsers = 0
  PUSH 0		uint private uniqueUsers = 0
  POP			uint private uniqueUsers = 0
  SSTORE			uint private uniqueUsers = 0
  PUSH 0		0
  PUSH 3		uint private usersProfits = 0
  PUSH 0		uint private usersProfits = 0
  POP			uint private usersProfits = 0
  SSTORE			uint private usersProfits = 0
  PUSH 0		0
  PUSH 4		uint private rescues = 0
  PUSH 0		uint private rescues = 0
  POP			uint private rescues = 0
  SSTORE			uint private rescues = 0
  PUSH 0		0
  PUSH 5		uint private collectedFees = 0
  PUSH 0		uint private collectedFees = 0
  POP			uint private collectedFees = 0
  SSTORE			uint private collectedFees = 0
  PUSH A		10
  PUSH 6		uint private jumpFee = 10
  PUSH 0		uint private jumpFee = 10
  POP			uint private jumpFee = 10
  SSTORE			uint private jumpFee = 10
  PUSH 6E		110
  PUSH 7		uint private baseMultiplier = 110
  PUSH 0		uint private baseMultiplier = 110
  POP			uint private baseMultiplier = 110
  SSTORE			uint private baseMultiplier = 110
  PUSH C8		200
  PUSH 8		uint private maxMultiplier = 200
  PUSH 0		uint private maxMultiplier = 200
  POP			uint private maxMultiplier = 200
  SSTORE			uint private maxMultiplier = 200
  PUSH 0		0
  PUSH 9		uint private payoutOrder = 0
  PUSH 0		uint private payoutOrder = 0
  POP			uint private payoutOrder = 0
  SSTORE			uint private payoutOrder = 0
  PUSH 0		0
  PUSH A		uint private rescueRecord = 0
  PUSH 0		uint private rescueRecord = 0
  POP			uint private rescueRecord = 0
  SSTORE			uint private rescueRecord = 0
  TIMESTAMP			now
  PUSH B		uint timeOfLastDeposit = now
  PUSH 0		uint timeOfLastDeposit = now
  POP			uint timeOfLastDeposit = now
  SSTORE			uint timeOfLastDeposit = now
  PUSH 0		0x0
  PUSH C		address private hero = 0x0
  PUSH 0		address private hero = 0x0
  PUSH 100		address private hero = 0x0
  EXP			address private hero = 0x0
  DUP2			address private hero = 0x0
  SLOAD			address private hero = 0x0
  DUP2			address private hero = 0x0
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		address private hero = 0x0
  MUL			address private hero = 0x0
  NOT			address private hero = 0x0
  AND			address private hero = 0x0
  SWAP1			address private hero = 0x0
  DUP4			address private hero = 0x0
  MUL			address private hero = 0x0
  OR			address private hero = 0x0
  SWAP1			address private hero = 0x0
  SSTORE			address private hero = 0x0
  POP			address private hero = 0x0
tag1: 
  JUMPDEST		function GreedPit() {...
  CALLER			msg.sender
  PUSH 0		owner
  PUSH 0		owner
  PUSH 100		owner = msg.sender
  EXP			owner = msg.sender
  DUP2			owner = msg.sender
  SLOAD			owner = msg.sender
  DUP2			owner = msg.sender
  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = msg.sender
  MUL			owner = msg.sender
  NOT			owner = msg.sender
  AND			owner = msg.sender
  SWAP1			owner = msg.sender
  DUP4			owner = msg.sender
  MUL			owner = msg.sender
  OR			owner = msg.sender
  SWAP1			owner = msg.sender
  SSTORE			owner = msg.sender
  POP			owner = msg.sender
tag2: 
  JUMPDEST		function GreedPit() {...
  PUSH #[$00000000…00000000]		contract GreedPit {...
  DUP1			contract GreedPit {...
  PUSH [$00000000…00000000]		contract GreedPit {...
  PUSH 0		contract GreedPit {...
  CODECOPY			contract GreedPit {...
  PUSH 0		contract GreedPit {...
  RETURN			contract GreedPit {...
.data:
  0: 
  .code:
    PUSH 60		contract GreedPit {...
    PUSH 40		contract GreedPit {...
    MSTORE			contract GreedPit {...
    CALLDATASIZE			contract GreedPit {...
    ISZERO			contract GreedPit {...
    PUSH [tag1]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    PUSH 0		contract GreedPit {...
    CALLDATALOAD			contract GreedPit {...
    PUSH 100000000000000000000000000000000000000000000000000000000		contract GreedPit {...
    SWAP1			contract GreedPit {...
    DIV			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH F23CBAA		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag2]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 10CF5D47		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag3]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 1C5D9FAA		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag4]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 332F93A9		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag5]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 376FE102		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag6]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 6A1DB1BF		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag7]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 6A8C2437		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag8]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 734D8287		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag9]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 7B12DF39		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag10]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 7FEF036E		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag11]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 839849C0		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag12]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH 9D7D6667		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag13]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH A51AEA2D		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag14]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH A6F9DAE1		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag15]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH ABF74A93		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag16]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH BFF1F9E1		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag17]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH C8796572		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag18]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH CE373B95		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag19]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH CE845D1D		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag20]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH E28FED1E		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag21]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH E6B972F5		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag22]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH ED498FA8		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag23]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    DUP1			contract GreedPit {...
    PUSH F67ABD87		contract GreedPit {...
    EQ			contract GreedPit {...
    PUSH [tag24]		contract GreedPit {...
    JUMPI			contract GreedPit {...
    PUSH [tag1]		contract GreedPit {...
    JUMP			contract GreedPit {...
  tag1: 
    JUMPDEST		contract GreedPit {...
    PUSH [tag25]		contract GreedPit {...
  tag26: 
    JUMPDEST		function() {...
    PUSH [tag28]		init()
    PUSH [tag29]		init
    JUMP	[in]		init()
  tag28: 
    JUMPDEST		init()
  tag27: 
    JUMPDEST		function() {...
    JUMP	[out]		function() {...
  tag25: 
    JUMPDEST		contract GreedPit {...
    STOP			contract GreedPit {...
  tag2: 
    JUMPDEST		function recycle() onlyowner...
    PUSH [tag30]		function recycle() onlyowner...
    PUSH 4		function recycle() onlyowner...
    DUP1			function recycle() onlyowner...
    POP			function recycle() onlyowner...
    POP			function recycle() onlyowner...
    PUSH [tag31]		function recycle() onlyowner...
    JUMP			function recycle() onlyowner...
  tag30: 
    JUMPDEST		function recycle() onlyowner...
    STOP			function recycle() onlyowner...
  tag3: 
    JUMPDEST		function awaitingPayout() constant returns (uint count, string info) {...
    PUSH [tag32]		function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 4		function awaitingPayout() constant returns (uint count, string info) {...
    DUP1			function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH [tag33]		function awaitingPayout() constant returns (uint count, string info) {...
    JUMP			function awaitingPayout() constant returns (uint count, string info) {...
  tag32: 
    JUMPDEST		function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 40		function awaitingPayout() constant returns (uint count, string info) {...
    MLOAD			function awaitingPayout() constant returns (uint count, string info) {...
    DUP1			function awaitingPayout() constant returns (uint count, string info) {...
    DUP4			function awaitingPayout() constant returns (uint count, string info) {...
    DUP2			function awaitingPayout() constant returns (uint count, string info) {...
    MSTORE			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 20		function awaitingPayout() constant returns (uint count, string info) {...
    ADD			function awaitingPayout() constant returns (uint count, string info) {...
    DUP1			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 20		function awaitingPayout() constant returns (uint count, string info) {...
    ADD			function awaitingPayout() constant returns (uint count, string info) {...
    DUP3			function awaitingPayout() constant returns (uint count, string info) {...
    DUP2			function awaitingPayout() constant returns (uint count, string info) {...
    SUB			function awaitingPayout() constant returns (uint count, string info) {...
    DUP3			function awaitingPayout() constant returns (uint count, string info) {...
    MSTORE			function awaitingPayout() constant returns (uint count, string info) {...
    DUP4			function awaitingPayout() constant returns (uint count, string info) {...
    DUP2			function awaitingPayout() constant returns (uint count, string info) {...
    DUP2			function awaitingPayout() constant returns (uint count, string info) {...
    MLOAD			function awaitingPayout() constant returns (uint count, string info) {...
    DUP2			function awaitingPayout() constant returns (uint count, string info) {...
    MSTORE			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 20		function awaitingPayout() constant returns (uint count, string info) {...
    ADD			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP2			function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
    DUP1			function awaitingPayout() constant returns (uint count, string info) {...
    MLOAD			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP1			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 20		function awaitingPayout() constant returns (uint count, string info) {...
    ADD			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP1			function awaitingPayout() constant returns (uint count, string info) {...
    DUP1			function awaitingPayout() constant returns (uint count, string info) {...
    DUP4			function awaitingPayout() constant returns (uint count, string info) {...
    DUP4			function awaitingPayout() constant returns (uint count, string info) {...
    DUP3			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP1			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 0		function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 4		function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 20		function awaitingPayout() constant returns (uint count, string info) {...
    DUP5			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 1F		function awaitingPayout() constant returns (uint count, string info) {...
    ADD			function awaitingPayout() constant returns (uint count, string info) {...
    DIV			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH F		function awaitingPayout() constant returns (uint count, string info) {...
    MUL			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 3		function awaitingPayout() constant returns (uint count, string info) {...
    ADD			function awaitingPayout() constant returns (uint count, string info) {...
    CALL			function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP1			function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP1			function awaitingPayout() constant returns (uint count, string info) {...
    DUP2			function awaitingPayout() constant returns (uint count, string info) {...
    ADD			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP1			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 1F		function awaitingPayout() constant returns (uint count, string info) {...
    AND			function awaitingPayout() constant returns (uint count, string info) {...
    DUP1			function awaitingPayout() constant returns (uint count, string info) {...
    ISZERO			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH [tag34]		function awaitingPayout() constant returns (uint count, string info) {...
    JUMPI			function awaitingPayout() constant returns (uint count, string info) {...
    DUP1			function awaitingPayout() constant returns (uint count, string info) {...
    DUP3			function awaitingPayout() constant returns (uint count, string info) {...
    SUB			function awaitingPayout() constant returns (uint count, string info) {...
    DUP1			function awaitingPayout() constant returns (uint count, string info) {...
    MLOAD			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 1		function awaitingPayout() constant returns (uint count, string info) {...
    DUP4			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 20		function awaitingPayout() constant returns (uint count, string info) {...
    SUB			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 100		function awaitingPayout() constant returns (uint count, string info) {...
    EXP			function awaitingPayout() constant returns (uint count, string info) {...
    SUB			function awaitingPayout() constant returns (uint count, string info) {...
    NOT			function awaitingPayout() constant returns (uint count, string info) {...
    AND			function awaitingPayout() constant returns (uint count, string info) {...
    DUP2			function awaitingPayout() constant returns (uint count, string info) {...
    MSTORE			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 20		function awaitingPayout() constant returns (uint count, string info) {...
    ADD			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP2			function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
  tag34: 
    JUMPDEST		function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP4			function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
    POP			function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 40		function awaitingPayout() constant returns (uint count, string info) {...
    MLOAD			function awaitingPayout() constant returns (uint count, string info) {...
    DUP1			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP2			function awaitingPayout() constant returns (uint count, string info) {...
    SUB			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP1			function awaitingPayout() constant returns (uint count, string info) {...
    RETURN			function awaitingPayout() constant returns (uint count, string info) {...
  tag4: 
    JUMPDEST		function setNickname(string name) {...
    PUSH [tag35]		function setNickname(string name) {...
    PUSH 4		function setNickname(string name) {...
    DUP1			function setNickname(string name) {...
    DUP1			function setNickname(string name) {...
    CALLDATALOAD			function setNickname(string name) {...
    SWAP1			function setNickname(string name) {...
    PUSH 20		function setNickname(string name) {...
    ADD			function setNickname(string name) {...
    SWAP1			function setNickname(string name) {...
    DUP3			function setNickname(string name) {...
    ADD			function setNickname(string name) {...
    DUP1			function setNickname(string name) {...
    CALLDATALOAD			function setNickname(string name) {...
    SWAP1			function setNickname(string name) {...
    PUSH 20		function setNickname(string name) {...
    ADD			function setNickname(string name) {...
    SWAP2			function setNickname(string name) {...
    SWAP2			function setNickname(string name) {...
    SWAP1			function setNickname(string name) {...
    DUP1			function setNickname(string name) {...
    DUP1			function setNickname(string name) {...
    PUSH 1F		function setNickname(string name) {...
    ADD			function setNickname(string name) {...
    PUSH 20		function setNickname(string name) {...
    DUP1			function setNickname(string name) {...
    SWAP2			function setNickname(string name) {...
    DIV			function setNickname(string name) {...
    MUL			function setNickname(string name) {...
    PUSH 20		function setNickname(string name) {...
    ADD			function setNickname(string name) {...
    PUSH 40		function setNickname(string name) {...
    MLOAD			function setNickname(string name) {...
    SWAP1			function setNickname(string name) {...
    DUP2			function setNickname(string name) {...
    ADD			function setNickname(string name) {...
    PUSH 40		function setNickname(string name) {...
    MSTORE			function setNickname(string name) {...
    DUP1			function setNickname(string name) {...
    SWAP4			function setNickname(string name) {...
    SWAP3			function setNickname(string name) {...
    SWAP2			function setNickname(string name) {...
    SWAP1			function setNickname(string name) {...
    DUP2			function setNickname(string name) {...
    DUP2			function setNickname(string name) {...
    MSTORE			function setNickname(string name) {...
    PUSH 20		function setNickname(string name) {...
    ADD			function setNickname(string name) {...
    DUP4			function setNickname(string name) {...
    DUP4			function setNickname(string name) {...
    DUP1			function setNickname(string name) {...
    DUP3			function setNickname(string name) {...
    DUP5			function setNickname(string name) {...
    CALLDATACOPY			function setNickname(string name) {...
    DUP3			function setNickname(string name) {...
    ADD			function setNickname(string name) {...
    SWAP2			function setNickname(string name) {...
    POP			function setNickname(string name) {...
    POP			function setNickname(string name) {...
    POP			function setNickname(string name) {...
    POP			function setNickname(string name) {...
    POP			function setNickname(string name) {...
    POP			function setNickname(string name) {...
    SWAP1			function setNickname(string name) {...
    SWAP1			function setNickname(string name) {...
    SWAP2			function setNickname(string name) {...
    SWAP1			function setNickname(string name) {...
    POP			function setNickname(string name) {...
    POP			function setNickname(string name) {...
    PUSH [tag36]		function setNickname(string name) {...
    JUMP			function setNickname(string name) {...
  tag35: 
    JUMPDEST		function setNickname(string name) {...
    STOP			function setNickname(string name) {...
  tag5: 
    JUMPDEST		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH [tag37]		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 4		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH [tag38]		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    JUMP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
  tag37: 
    JUMPDEST		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 40		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    MLOAD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP4			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    MSTORE			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 20		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    ADD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 20		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    ADD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP3			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SUB			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP3			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    MSTORE			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP4			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    MLOAD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    MSTORE			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 20		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    ADD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    MLOAD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 20		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    ADD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP4			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP4			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP3			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 0		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 4		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 20		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP5			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 1F		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    ADD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DIV			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH F		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    MUL			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 3		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    ADD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    CALL			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    ADD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 1F		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    AND			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    ISZERO			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH [tag39]		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    JUMPI			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP3			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SUB			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    MLOAD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 1		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP4			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 20		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SUB			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 100		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    EXP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SUB			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    NOT			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    AND			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    MSTORE			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 20		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    ADD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
  tag39: 
    JUMPDEST		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP4			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    POP			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 40		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    MLOAD			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    DUP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SUB			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    RETURN			function nextPayoutGoal() constant returns (uint finneys, string info) {...
  tag6: 
    JUMPDEST		function userId(address user) constant returns (uint id, string info) {...
    PUSH [tag40]		function userId(address user) constant returns (uint id, string info) {...
    PUSH 4		function userId(address user) constant returns (uint id, string info) {...
    DUP1			function userId(address user) constant returns (uint id, string info) {...
    DUP1			function userId(address user) constant returns (uint id, string info) {...
    CALLDATALOAD			function userId(address user) constant returns (uint id, string info) {...
    SWAP1			function userId(address user) constant returns (uint id, string info) {...
    PUSH 20		function userId(address user) constant returns (uint id, string info) {...
    ADD			function userId(address user) constant returns (uint id, string info) {...
    SWAP1			function userId(address user) constant returns (uint id, string info) {...
    SWAP2			function userId(address user) constant returns (uint id, string info) {...
    SWAP1			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    PUSH [tag41]		function userId(address user) constant returns (uint id, string info) {...
    JUMP			function userId(address user) constant returns (uint id, string info) {...
  tag40: 
    JUMPDEST		function userId(address user) constant returns (uint id, string info) {...
    PUSH 40		function userId(address user) constant returns (uint id, string info) {...
    MLOAD			function userId(address user) constant returns (uint id, string info) {...
    DUP1			function userId(address user) constant returns (uint id, string info) {...
    DUP4			function userId(address user) constant returns (uint id, string info) {...
    DUP2			function userId(address user) constant returns (uint id, string info) {...
    MSTORE			function userId(address user) constant returns (uint id, string info) {...
    PUSH 20		function userId(address user) constant returns (uint id, string info) {...
    ADD			function userId(address user) constant returns (uint id, string info) {...
    DUP1			function userId(address user) constant returns (uint id, string info) {...
    PUSH 20		function userId(address user) constant returns (uint id, string info) {...
    ADD			function userId(address user) constant returns (uint id, string info) {...
    DUP3			function userId(address user) constant returns (uint id, string info) {...
    DUP2			function userId(address user) constant returns (uint id, string info) {...
    SUB			function userId(address user) constant returns (uint id, string info) {...
    DUP3			function userId(address user) constant returns (uint id, string info) {...
    MSTORE			function userId(address user) constant returns (uint id, string info) {...
    DUP4			function userId(address user) constant returns (uint id, string info) {...
    DUP2			function userId(address user) constant returns (uint id, string info) {...
    DUP2			function userId(address user) constant returns (uint id, string info) {...
    MLOAD			function userId(address user) constant returns (uint id, string info) {...
    DUP2			function userId(address user) constant returns (uint id, string info) {...
    MSTORE			function userId(address user) constant returns (uint id, string info) {...
    PUSH 20		function userId(address user) constant returns (uint id, string info) {...
    ADD			function userId(address user) constant returns (uint id, string info) {...
    SWAP2			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    DUP1			function userId(address user) constant returns (uint id, string info) {...
    MLOAD			function userId(address user) constant returns (uint id, string info) {...
    SWAP1			function userId(address user) constant returns (uint id, string info) {...
    PUSH 20		function userId(address user) constant returns (uint id, string info) {...
    ADD			function userId(address user) constant returns (uint id, string info) {...
    SWAP1			function userId(address user) constant returns (uint id, string info) {...
    DUP1			function userId(address user) constant returns (uint id, string info) {...
    DUP4			function userId(address user) constant returns (uint id, string info) {...
    DUP4			function userId(address user) constant returns (uint id, string info) {...
    DUP3			function userId(address user) constant returns (uint id, string info) {...
    SWAP1			function userId(address user) constant returns (uint id, string info) {...
    PUSH 0		function userId(address user) constant returns (uint id, string info) {...
    PUSH 4		function userId(address user) constant returns (uint id, string info) {...
    PUSH 20		function userId(address user) constant returns (uint id, string info) {...
    DUP5			function userId(address user) constant returns (uint id, string info) {...
    PUSH 1F		function userId(address user) constant returns (uint id, string info) {...
    ADD			function userId(address user) constant returns (uint id, string info) {...
    DIV			function userId(address user) constant returns (uint id, string info) {...
    PUSH F		function userId(address user) constant returns (uint id, string info) {...
    MUL			function userId(address user) constant returns (uint id, string info) {...
    PUSH 3		function userId(address user) constant returns (uint id, string info) {...
    ADD			function userId(address user) constant returns (uint id, string info) {...
    CALL			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    SWAP1			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    SWAP1			function userId(address user) constant returns (uint id, string info) {...
    DUP2			function userId(address user) constant returns (uint id, string info) {...
    ADD			function userId(address user) constant returns (uint id, string info) {...
    SWAP1			function userId(address user) constant returns (uint id, string info) {...
    PUSH 1F		function userId(address user) constant returns (uint id, string info) {...
    AND			function userId(address user) constant returns (uint id, string info) {...
    DUP1			function userId(address user) constant returns (uint id, string info) {...
    ISZERO			function userId(address user) constant returns (uint id, string info) {...
    PUSH [tag42]		function userId(address user) constant returns (uint id, string info) {...
    JUMPI			function userId(address user) constant returns (uint id, string info) {...
    DUP1			function userId(address user) constant returns (uint id, string info) {...
    DUP3			function userId(address user) constant returns (uint id, string info) {...
    SUB			function userId(address user) constant returns (uint id, string info) {...
    DUP1			function userId(address user) constant returns (uint id, string info) {...
    MLOAD			function userId(address user) constant returns (uint id, string info) {...
    PUSH 1		function userId(address user) constant returns (uint id, string info) {...
    DUP4			function userId(address user) constant returns (uint id, string info) {...
    PUSH 20		function userId(address user) constant returns (uint id, string info) {...
    SUB			function userId(address user) constant returns (uint id, string info) {...
    PUSH 100		function userId(address user) constant returns (uint id, string info) {...
    EXP			function userId(address user) constant returns (uint id, string info) {...
    SUB			function userId(address user) constant returns (uint id, string info) {...
    NOT			function userId(address user) constant returns (uint id, string info) {...
    AND			function userId(address user) constant returns (uint id, string info) {...
    DUP2			function userId(address user) constant returns (uint id, string info) {...
    MSTORE			function userId(address user) constant returns (uint id, string info) {...
    PUSH 20		function userId(address user) constant returns (uint id, string info) {...
    ADD			function userId(address user) constant returns (uint id, string info) {...
    SWAP2			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
  tag42: 
    JUMPDEST		function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    SWAP4			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    PUSH 40		function userId(address user) constant returns (uint id, string info) {...
    MLOAD			function userId(address user) constant returns (uint id, string info) {...
    DUP1			function userId(address user) constant returns (uint id, string info) {...
    SWAP2			function userId(address user) constant returns (uint id, string info) {...
    SUB			function userId(address user) constant returns (uint id, string info) {...
    SWAP1			function userId(address user) constant returns (uint id, string info) {...
    RETURN			function userId(address user) constant returns (uint id, string info) {...
  tag7: 
    JUMPDEST		function changeFee(uint fee) onlyowner {...
    PUSH [tag43]		function changeFee(uint fee) onlyowner {...
    PUSH 4		function changeFee(uint fee) onlyowner {...
    DUP1			function changeFee(uint fee) onlyowner {...
    DUP1			function changeFee(uint fee) onlyowner {...
    CALLDATALOAD			function changeFee(uint fee) onlyowner {...
    SWAP1			function changeFee(uint fee) onlyowner {...
    PUSH 20		function changeFee(uint fee) onlyowner {...
    ADD			function changeFee(uint fee) onlyowner {...
    SWAP1			function changeFee(uint fee) onlyowner {...
    SWAP2			function changeFee(uint fee) onlyowner {...
    SWAP1			function changeFee(uint fee) onlyowner {...
    POP			function changeFee(uint fee) onlyowner {...
    POP			function changeFee(uint fee) onlyowner {...
    PUSH [tag44]		function changeFee(uint fee) onlyowner {...
    JUMP			function changeFee(uint fee) onlyowner {...
  tag43: 
    JUMPDEST		function changeFee(uint fee) onlyowner {...
    STOP			function changeFee(uint fee) onlyowner {...
  tag8: 
    JUMPDEST		function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH [tag45]		function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 4		function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH [tag46]		function totalRescues() constant returns (uint rescueCount, string info) {...
    JUMP			function totalRescues() constant returns (uint rescueCount, string info) {...
  tag45: 
    JUMPDEST		function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 40		function totalRescues() constant returns (uint rescueCount, string info) {...
    MLOAD			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP4			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    MSTORE			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 20		function totalRescues() constant returns (uint rescueCount, string info) {...
    ADD			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 20		function totalRescues() constant returns (uint rescueCount, string info) {...
    ADD			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP3			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    SUB			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP3			function totalRescues() constant returns (uint rescueCount, string info) {...
    MSTORE			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP4			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    MLOAD			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    MSTORE			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 20		function totalRescues() constant returns (uint rescueCount, string info) {...
    ADD			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    MLOAD			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 20		function totalRescues() constant returns (uint rescueCount, string info) {...
    ADD			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP4			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP4			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP3			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 0		function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 4		function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 20		function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP5			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 1F		function totalRescues() constant returns (uint rescueCount, string info) {...
    ADD			function totalRescues() constant returns (uint rescueCount, string info) {...
    DIV			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH F		function totalRescues() constant returns (uint rescueCount, string info) {...
    MUL			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 3		function totalRescues() constant returns (uint rescueCount, string info) {...
    ADD			function totalRescues() constant returns (uint rescueCount, string info) {...
    CALL			function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    ADD			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 1F		function totalRescues() constant returns (uint rescueCount, string info) {...
    AND			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    ISZERO			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH [tag47]		function totalRescues() constant returns (uint rescueCount, string info) {...
    JUMPI			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP3			function totalRescues() constant returns (uint rescueCount, string info) {...
    SUB			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    MLOAD			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 1		function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP4			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 20		function totalRescues() constant returns (uint rescueCount, string info) {...
    SUB			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 100		function totalRescues() constant returns (uint rescueCount, string info) {...
    EXP			function totalRescues() constant returns (uint rescueCount, string info) {...
    SUB			function totalRescues() constant returns (uint rescueCount, string info) {...
    NOT			function totalRescues() constant returns (uint rescueCount, string info) {...
    AND			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    MSTORE			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 20		function totalRescues() constant returns (uint rescueCount, string info) {...
    ADD			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
  tag47: 
    JUMPDEST		function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP4			function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
    POP			function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 40		function totalRescues() constant returns (uint rescueCount, string info) {...
    MLOAD			function totalRescues() constant returns (uint rescueCount, string info) {...
    DUP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    SUB			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    RETURN			function totalRescues() constant returns (uint rescueCount, string info) {...
  tag9: 
    JUMPDEST		function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH [tag48]		function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 4		function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH [tag49]		function unclaimedFees() constant returns (uint ethers, string info) {...
    JUMP			function unclaimedFees() constant returns (uint ethers, string info) {...
  tag48: 
    JUMPDEST		function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 40		function unclaimedFees() constant returns (uint ethers, string info) {...
    MLOAD			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP4			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    MSTORE			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 20		function unclaimedFees() constant returns (uint ethers, string info) {...
    ADD			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 20		function unclaimedFees() constant returns (uint ethers, string info) {...
    ADD			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP3			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    SUB			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP3			function unclaimedFees() constant returns (uint ethers, string info) {...
    MSTORE			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP4			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    MLOAD			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    MSTORE			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 20		function unclaimedFees() constant returns (uint ethers, string info) {...
    ADD			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    MLOAD			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 20		function unclaimedFees() constant returns (uint ethers, string info) {...
    ADD			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP4			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP4			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP3			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 0		function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 4		function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 20		function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP5			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 1F		function unclaimedFees() constant returns (uint ethers, string info) {...
    ADD			function unclaimedFees() constant returns (uint ethers, string info) {...
    DIV			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH F		function unclaimedFees() constant returns (uint ethers, string info) {...
    MUL			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 3		function unclaimedFees() constant returns (uint ethers, string info) {...
    ADD			function unclaimedFees() constant returns (uint ethers, string info) {...
    CALL			function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    ADD			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 1F		function unclaimedFees() constant returns (uint ethers, string info) {...
    AND			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    ISZERO			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH [tag50]		function unclaimedFees() constant returns (uint ethers, string info) {...
    JUMPI			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP3			function unclaimedFees() constant returns (uint ethers, string info) {...
    SUB			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    MLOAD			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 1		function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP4			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 20		function unclaimedFees() constant returns (uint ethers, string info) {...
    SUB			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 100		function unclaimedFees() constant returns (uint ethers, string info) {...
    EXP			function unclaimedFees() constant returns (uint ethers, string info) {...
    SUB			function unclaimedFees() constant returns (uint ethers, string info) {...
    NOT			function unclaimedFees() constant returns (uint ethers, string info) {...
    AND			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    MSTORE			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 20		function unclaimedFees() constant returns (uint ethers, string info) {...
    ADD			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
  tag50: 
    JUMPDEST		function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP4			function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
    POP			function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 40		function unclaimedFees() constant returns (uint ethers, string info) {...
    MLOAD			function unclaimedFees() constant returns (uint ethers, string info) {...
    DUP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    SUB			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    RETURN			function unclaimedFees() constant returns (uint ethers, string info) {...
  tag10: 
    JUMPDEST		function userProfits() constant returns(uint profits, string info) {...
    PUSH [tag51]		function userProfits() constant returns(uint profits, string info) {...
    PUSH 4		function userProfits() constant returns(uint profits, string info) {...
    DUP1			function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
    PUSH [tag52]		function userProfits() constant returns(uint profits, string info) {...
    JUMP			function userProfits() constant returns(uint profits, string info) {...
  tag51: 
    JUMPDEST		function userProfits() constant returns(uint profits, string info) {...
    PUSH 40		function userProfits() constant returns(uint profits, string info) {...
    MLOAD			function userProfits() constant returns(uint profits, string info) {...
    DUP1			function userProfits() constant returns(uint profits, string info) {...
    DUP4			function userProfits() constant returns(uint profits, string info) {...
    DUP2			function userProfits() constant returns(uint profits, string info) {...
    MSTORE			function userProfits() constant returns(uint profits, string info) {...
    PUSH 20		function userProfits() constant returns(uint profits, string info) {...
    ADD			function userProfits() constant returns(uint profits, string info) {...
    DUP1			function userProfits() constant returns(uint profits, string info) {...
    PUSH 20		function userProfits() constant returns(uint profits, string info) {...
    ADD			function userProfits() constant returns(uint profits, string info) {...
    DUP3			function userProfits() constant returns(uint profits, string info) {...
    DUP2			function userProfits() constant returns(uint profits, string info) {...
    SUB			function userProfits() constant returns(uint profits, string info) {...
    DUP3			function userProfits() constant returns(uint profits, string info) {...
    MSTORE			function userProfits() constant returns(uint profits, string info) {...
    DUP4			function userProfits() constant returns(uint profits, string info) {...
    DUP2			function userProfits() constant returns(uint profits, string info) {...
    DUP2			function userProfits() constant returns(uint profits, string info) {...
    MLOAD			function userProfits() constant returns(uint profits, string info) {...
    DUP2			function userProfits() constant returns(uint profits, string info) {...
    MSTORE			function userProfits() constant returns(uint profits, string info) {...
    PUSH 20		function userProfits() constant returns(uint profits, string info) {...
    ADD			function userProfits() constant returns(uint profits, string info) {...
    SWAP2			function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
    DUP1			function userProfits() constant returns(uint profits, string info) {...
    MLOAD			function userProfits() constant returns(uint profits, string info) {...
    SWAP1			function userProfits() constant returns(uint profits, string info) {...
    PUSH 20		function userProfits() constant returns(uint profits, string info) {...
    ADD			function userProfits() constant returns(uint profits, string info) {...
    SWAP1			function userProfits() constant returns(uint profits, string info) {...
    DUP1			function userProfits() constant returns(uint profits, string info) {...
    DUP4			function userProfits() constant returns(uint profits, string info) {...
    DUP4			function userProfits() constant returns(uint profits, string info) {...
    DUP3			function userProfits() constant returns(uint profits, string info) {...
    SWAP1			function userProfits() constant returns(uint profits, string info) {...
    PUSH 0		function userProfits() constant returns(uint profits, string info) {...
    PUSH 4		function userProfits() constant returns(uint profits, string info) {...
    PUSH 20		function userProfits() constant returns(uint profits, string info) {...
    DUP5			function userProfits() constant returns(uint profits, string info) {...
    PUSH 1F		function userProfits() constant returns(uint profits, string info) {...
    ADD			function userProfits() constant returns(uint profits, string info) {...
    DIV			function userProfits() constant returns(uint profits, string info) {...
    PUSH F		function userProfits() constant returns(uint profits, string info) {...
    MUL			function userProfits() constant returns(uint profits, string info) {...
    PUSH 3		function userProfits() constant returns(uint profits, string info) {...
    ADD			function userProfits() constant returns(uint profits, string info) {...
    CALL			function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
    SWAP1			function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
    SWAP1			function userProfits() constant returns(uint profits, string info) {...
    DUP2			function userProfits() constant returns(uint profits, string info) {...
    ADD			function userProfits() constant returns(uint profits, string info) {...
    SWAP1			function userProfits() constant returns(uint profits, string info) {...
    PUSH 1F		function userProfits() constant returns(uint profits, string info) {...
    AND			function userProfits() constant returns(uint profits, string info) {...
    DUP1			function userProfits() constant returns(uint profits, string info) {...
    ISZERO			function userProfits() constant returns(uint profits, string info) {...
    PUSH [tag53]		function userProfits() constant returns(uint profits, string info) {...
    JUMPI			function userProfits() constant returns(uint profits, string info) {...
    DUP1			function userProfits() constant returns(uint profits, string info) {...
    DUP3			function userProfits() constant returns(uint profits, string info) {...
    SUB			function userProfits() constant returns(uint profits, string info) {...
    DUP1			function userProfits() constant returns(uint profits, string info) {...
    MLOAD			function userProfits() constant returns(uint profits, string info) {...
    PUSH 1		function userProfits() constant returns(uint profits, string info) {...
    DUP4			function userProfits() constant returns(uint profits, string info) {...
    PUSH 20		function userProfits() constant returns(uint profits, string info) {...
    SUB			function userProfits() constant returns(uint profits, string info) {...
    PUSH 100		function userProfits() constant returns(uint profits, string info) {...
    EXP			function userProfits() constant returns(uint profits, string info) {...
    SUB			function userProfits() constant returns(uint profits, string info) {...
    NOT			function userProfits() constant returns(uint profits, string info) {...
    AND			function userProfits() constant returns(uint profits, string info) {...
    DUP2			function userProfits() constant returns(uint profits, string info) {...
    MSTORE			function userProfits() constant returns(uint profits, string info) {...
    PUSH 20		function userProfits() constant returns(uint profits, string info) {...
    ADD			function userProfits() constant returns(uint profits, string info) {...
    SWAP2			function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
  tag53: 
    JUMPDEST		function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
    SWAP4			function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
    POP			function userProfits() constant returns(uint profits, string info) {...
    PUSH 40		function userProfits() constant returns(uint profits, string info) {...
    MLOAD			function userProfits() constant returns(uint profits, string info) {...
    DUP1			function userProfits() constant returns(uint profits, string info) {...
    SWAP2			function userProfits() constant returns(uint profits, string info) {...
    SUB			function userProfits() constant returns(uint profits, string info) {...
    SWAP1			function userProfits() constant returns(uint profits, string info) {...
    RETURN			function userProfits() constant returns(uint profits, string info) {...
  tag11: 
    JUMPDEST		function totalEntries() constant returns (uint count, string info) {...
    PUSH [tag54]		function totalEntries() constant returns (uint count, string info) {...
    PUSH 4		function totalEntries() constant returns (uint count, string info) {...
    DUP1			function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
    PUSH [tag55]		function totalEntries() constant returns (uint count, string info) {...
    JUMP			function totalEntries() constant returns (uint count, string info) {...
  tag54: 
    JUMPDEST		function totalEntries() constant returns (uint count, string info) {...
    PUSH 40		function totalEntries() constant returns (uint count, string info) {...
    MLOAD			function totalEntries() constant returns (uint count, string info) {...
    DUP1			function totalEntries() constant returns (uint count, string info) {...
    DUP4			function totalEntries() constant returns (uint count, string info) {...
    DUP2			function totalEntries() constant returns (uint count, string info) {...
    MSTORE			function totalEntries() constant returns (uint count, string info) {...
    PUSH 20		function totalEntries() constant returns (uint count, string info) {...
    ADD			function totalEntries() constant returns (uint count, string info) {...
    DUP1			function totalEntries() constant returns (uint count, string info) {...
    PUSH 20		function totalEntries() constant returns (uint count, string info) {...
    ADD			function totalEntries() constant returns (uint count, string info) {...
    DUP3			function totalEntries() constant returns (uint count, string info) {...
    DUP2			function totalEntries() constant returns (uint count, string info) {...
    SUB			function totalEntries() constant returns (uint count, string info) {...
    DUP3			function totalEntries() constant returns (uint count, string info) {...
    MSTORE			function totalEntries() constant returns (uint count, string info) {...
    DUP4			function totalEntries() constant returns (uint count, string info) {...
    DUP2			function totalEntries() constant returns (uint count, string info) {...
    DUP2			function totalEntries() constant returns (uint count, string info) {...
    MLOAD			function totalEntries() constant returns (uint count, string info) {...
    DUP2			function totalEntries() constant returns (uint count, string info) {...
    MSTORE			function totalEntries() constant returns (uint count, string info) {...
    PUSH 20		function totalEntries() constant returns (uint count, string info) {...
    ADD			function totalEntries() constant returns (uint count, string info) {...
    SWAP2			function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
    DUP1			function totalEntries() constant returns (uint count, string info) {...
    MLOAD			function totalEntries() constant returns (uint count, string info) {...
    SWAP1			function totalEntries() constant returns (uint count, string info) {...
    PUSH 20		function totalEntries() constant returns (uint count, string info) {...
    ADD			function totalEntries() constant returns (uint count, string info) {...
    SWAP1			function totalEntries() constant returns (uint count, string info) {...
    DUP1			function totalEntries() constant returns (uint count, string info) {...
    DUP4			function totalEntries() constant returns (uint count, string info) {...
    DUP4			function totalEntries() constant returns (uint count, string info) {...
    DUP3			function totalEntries() constant returns (uint count, string info) {...
    SWAP1			function totalEntries() constant returns (uint count, string info) {...
    PUSH 0		function totalEntries() constant returns (uint count, string info) {...
    PUSH 4		function totalEntries() constant returns (uint count, string info) {...
    PUSH 20		function totalEntries() constant returns (uint count, string info) {...
    DUP5			function totalEntries() constant returns (uint count, string info) {...
    PUSH 1F		function totalEntries() constant returns (uint count, string info) {...
    ADD			function totalEntries() constant returns (uint count, string info) {...
    DIV			function totalEntries() constant returns (uint count, string info) {...
    PUSH F		function totalEntries() constant returns (uint count, string info) {...
    MUL			function totalEntries() constant returns (uint count, string info) {...
    PUSH 3		function totalEntries() constant returns (uint count, string info) {...
    ADD			function totalEntries() constant returns (uint count, string info) {...
    CALL			function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
    SWAP1			function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
    SWAP1			function totalEntries() constant returns (uint count, string info) {...
    DUP2			function totalEntries() constant returns (uint count, string info) {...
    ADD			function totalEntries() constant returns (uint count, string info) {...
    SWAP1			function totalEntries() constant returns (uint count, string info) {...
    PUSH 1F		function totalEntries() constant returns (uint count, string info) {...
    AND			function totalEntries() constant returns (uint count, string info) {...
    DUP1			function totalEntries() constant returns (uint count, string info) {...
    ISZERO			function totalEntries() constant returns (uint count, string info) {...
    PUSH [tag56]		function totalEntries() constant returns (uint count, string info) {...
    JUMPI			function totalEntries() constant returns (uint count, string info) {...
    DUP1			function totalEntries() constant returns (uint count, string info) {...
    DUP3			function totalEntries() constant returns (uint count, string info) {...
    SUB			function totalEntries() constant returns (uint count, string info) {...
    DUP1			function totalEntries() constant returns (uint count, string info) {...
    MLOAD			function totalEntries() constant returns (uint count, string info) {...
    PUSH 1		function totalEntries() constant returns (uint count, string info) {...
    DUP4			function totalEntries() constant returns (uint count, string info) {...
    PUSH 20		function totalEntries() constant returns (uint count, string info) {...
    SUB			function totalEntries() constant returns (uint count, string info) {...
    PUSH 100		function totalEntries() constant returns (uint count, string info) {...
    EXP			function totalEntries() constant returns (uint count, string info) {...
    SUB			function totalEntries() constant returns (uint count, string info) {...
    NOT			function totalEntries() constant returns (uint count, string info) {...
    AND			function totalEntries() constant returns (uint count, string info) {...
    DUP2			function totalEntries() constant returns (uint count, string info) {...
    MSTORE			function totalEntries() constant returns (uint count, string info) {...
    PUSH 20		function totalEntries() constant returns (uint count, string info) {...
    ADD			function totalEntries() constant returns (uint count, string info) {...
    SWAP2			function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
  tag56: 
    JUMPDEST		function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
    SWAP4			function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
    POP			function totalEntries() constant returns (uint count, string info) {...
    PUSH 40		function totalEntries() constant returns (uint count, string info) {...
    MLOAD			function totalEntries() constant returns (uint count, string info) {...
    DUP1			function totalEntries() constant returns (uint count, string info) {...
    SWAP2			function totalEntries() constant returns (uint count, string info) {...
    SUB			function totalEntries() constant returns (uint count, string info) {...
    SWAP1			function totalEntries() constant returns (uint count, string info) {...
    RETURN			function totalEntries() constant returns (uint count, string info) {...
  tag12: 
    JUMPDEST		function changeBaseMultiplier(uint multi) onlyowner {...
    PUSH [tag57]		function changeBaseMultiplier(uint multi) onlyowner {...
    PUSH 4		function changeBaseMultiplier(uint multi) onlyowner {...
    DUP1			function changeBaseMultiplier(uint multi) onlyowner {...
    DUP1			function changeBaseMultiplier(uint multi) onlyowner {...
    CALLDATALOAD			function changeBaseMultiplier(uint multi) onlyowner {...
    SWAP1			function changeBaseMultiplier(uint multi) onlyowner {...
    PUSH 20		function changeBaseMultiplier(uint multi) onlyowner {...
    ADD			function changeBaseMultiplier(uint multi) onlyowner {...
    SWAP1			function changeBaseMultiplier(uint multi) onlyowner {...
    SWAP2			function changeBaseMultiplier(uint multi) onlyowner {...
    SWAP1			function changeBaseMultiplier(uint multi) onlyowner {...
    POP			function changeBaseMultiplier(uint multi) onlyowner {...
    POP			function changeBaseMultiplier(uint multi) onlyowner {...
    PUSH [tag58]		function changeBaseMultiplier(uint multi) onlyowner {...
    JUMP			function changeBaseMultiplier(uint multi) onlyowner {...
  tag57: 
    JUMPDEST		function changeBaseMultiplier(uint multi) onlyowner {...
    STOP			function changeBaseMultiplier(uint multi) onlyowner {...
  tag13: 
    JUMPDEST		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH [tag59]		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 4		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH [tag60]		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    JUMP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
  tag59: 
    JUMPDEST		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 40		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MLOAD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP5			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MSTORE			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 20		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    ADD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP4			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MSTORE			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 20		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    ADD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 20		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    ADD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP3			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SUB			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP3			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MSTORE			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP4			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MLOAD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MSTORE			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 20		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    ADD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MLOAD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 20		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    ADD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP4			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP4			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP3			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 0		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 4		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 20		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP5			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 1F		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    ADD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DIV			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH F		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MUL			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 3		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    ADD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    CALL			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    ADD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 1F		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    AND			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    ISZERO			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH [tag61]		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    JUMPI			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP3			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SUB			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MLOAD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 1		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP4			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 20		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SUB			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 100		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    EXP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SUB			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    NOT			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    AND			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MSTORE			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 20		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    ADD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
  tag61: 
    JUMPDEST		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP5			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    POP			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 40		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    MLOAD			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    DUP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SUB			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    RETURN			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
  tag14: 
    JUMPDEST		function changeMaxMultiplier(uint multi) onlyowner {...
    PUSH [tag62]		function changeMaxMultiplier(uint multi) onlyowner {...
    PUSH 4		function changeMaxMultiplier(uint multi) onlyowner {...
    DUP1			function changeMaxMultiplier(uint multi) onlyowner {...
    DUP1			function changeMaxMultiplier(uint multi) onlyowner {...
    CALLDATALOAD			function changeMaxMultiplier(uint multi) onlyowner {...
    SWAP1			function changeMaxMultiplier(uint multi) onlyowner {...
    PUSH 20		function changeMaxMultiplier(uint multi) onlyowner {...
    ADD			function changeMaxMultiplier(uint multi) onlyowner {...
    SWAP1			function changeMaxMultiplier(uint multi) onlyowner {...
    SWAP2			function changeMaxMultiplier(uint multi) onlyowner {...
    SWAP1			function changeMaxMultiplier(uint multi) onlyowner {...
    POP			function changeMaxMultiplier(uint multi) onlyowner {...
    POP			function changeMaxMultiplier(uint multi) onlyowner {...
    PUSH [tag63]		function changeMaxMultiplier(uint multi) onlyowner {...
    JUMP			function changeMaxMultiplier(uint multi) onlyowner {...
  tag62: 
    JUMPDEST		function changeMaxMultiplier(uint multi) onlyowner {...
    STOP			function changeMaxMultiplier(uint multi) onlyowner {...
  tag15: 
    JUMPDEST		function changeOwner(address newOwner) onlyowner {...
    PUSH [tag64]		function changeOwner(address newOwner) onlyowner {...
    PUSH 4		function changeOwner(address newOwner) onlyowner {...
    DUP1			function changeOwner(address newOwner) onlyowner {...
    DUP1			function changeOwner(address newOwner) onlyowner {...
    CALLDATALOAD			function changeOwner(address newOwner) onlyowner {...
    SWAP1			function changeOwner(address newOwner) onlyowner {...
    PUSH 20		function changeOwner(address newOwner) onlyowner {...
    ADD			function changeOwner(address newOwner) onlyowner {...
    SWAP1			function changeOwner(address newOwner) onlyowner {...
    SWAP2			function changeOwner(address newOwner) onlyowner {...
    SWAP1			function changeOwner(address newOwner) onlyowner {...
    POP			function changeOwner(address newOwner) onlyowner {...
    POP			function changeOwner(address newOwner) onlyowner {...
    PUSH [tag65]		function changeOwner(address newOwner) onlyowner {...
    JUMP			function changeOwner(address newOwner) onlyowner {...
  tag64: 
    JUMPDEST		function changeOwner(address newOwner) onlyowner {...
    STOP			function changeOwner(address newOwner) onlyowner {...
  tag16: 
    JUMPDEST		function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH [tag66]		function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 4		function pitFee() constant returns (uint feePercentage, string info) {...
    DUP1			function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH [tag67]		function pitFee() constant returns (uint feePercentage, string info) {...
    JUMP			function pitFee() constant returns (uint feePercentage, string info) {...
  tag66: 
    JUMPDEST		function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 40		function pitFee() constant returns (uint feePercentage, string info) {...
    MLOAD			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP1			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP4			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP2			function pitFee() constant returns (uint feePercentage, string info) {...
    MSTORE			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 20		function pitFee() constant returns (uint feePercentage, string info) {...
    ADD			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP1			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 20		function pitFee() constant returns (uint feePercentage, string info) {...
    ADD			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP3			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP2			function pitFee() constant returns (uint feePercentage, string info) {...
    SUB			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP3			function pitFee() constant returns (uint feePercentage, string info) {...
    MSTORE			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP4			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP2			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP2			function pitFee() constant returns (uint feePercentage, string info) {...
    MLOAD			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP2			function pitFee() constant returns (uint feePercentage, string info) {...
    MSTORE			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 20		function pitFee() constant returns (uint feePercentage, string info) {...
    ADD			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP2			function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP1			function pitFee() constant returns (uint feePercentage, string info) {...
    MLOAD			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP1			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 20		function pitFee() constant returns (uint feePercentage, string info) {...
    ADD			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP1			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP1			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP4			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP4			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP3			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP1			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 0		function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 4		function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 20		function pitFee() constant returns (uint feePercentage, string info) {...
    DUP5			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 1F		function pitFee() constant returns (uint feePercentage, string info) {...
    ADD			function pitFee() constant returns (uint feePercentage, string info) {...
    DIV			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH F		function pitFee() constant returns (uint feePercentage, string info) {...
    MUL			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 3		function pitFee() constant returns (uint feePercentage, string info) {...
    ADD			function pitFee() constant returns (uint feePercentage, string info) {...
    CALL			function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP1			function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP1			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP2			function pitFee() constant returns (uint feePercentage, string info) {...
    ADD			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP1			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 1F		function pitFee() constant returns (uint feePercentage, string info) {...
    AND			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP1			function pitFee() constant returns (uint feePercentage, string info) {...
    ISZERO			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH [tag68]		function pitFee() constant returns (uint feePercentage, string info) {...
    JUMPI			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP1			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP3			function pitFee() constant returns (uint feePercentage, string info) {...
    SUB			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP1			function pitFee() constant returns (uint feePercentage, string info) {...
    MLOAD			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 1		function pitFee() constant returns (uint feePercentage, string info) {...
    DUP4			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 20		function pitFee() constant returns (uint feePercentage, string info) {...
    SUB			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 100		function pitFee() constant returns (uint feePercentage, string info) {...
    EXP			function pitFee() constant returns (uint feePercentage, string info) {...
    SUB			function pitFee() constant returns (uint feePercentage, string info) {...
    NOT			function pitFee() constant returns (uint feePercentage, string info) {...
    AND			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP2			function pitFee() constant returns (uint feePercentage, string info) {...
    MSTORE			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 20		function pitFee() constant returns (uint feePercentage, string info) {...
    ADD			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP2			function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
  tag68: 
    JUMPDEST		function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP4			function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
    POP			function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 40		function pitFee() constant returns (uint feePercentage, string info) {...
    MLOAD			function pitFee() constant returns (uint feePercentage, string info) {...
    DUP1			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP2			function pitFee() constant returns (uint feePercentage, string info) {...
    SUB			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP1			function pitFee() constant returns (uint feePercentage, string info) {...
    RETURN			function pitFee() constant returns (uint feePercentage, string info) {...
  tag17: 
    JUMPDEST		function totalUsers() constant returns (uint users, string info) {...
    PUSH [tag69]		function totalUsers() constant returns (uint users, string info) {...
    PUSH 4		function totalUsers() constant returns (uint users, string info) {...
    DUP1			function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
    PUSH [tag70]		function totalUsers() constant returns (uint users, string info) {...
    JUMP			function totalUsers() constant returns (uint users, string info) {...
  tag69: 
    JUMPDEST		function totalUsers() constant returns (uint users, string info) {...
    PUSH 40		function totalUsers() constant returns (uint users, string info) {...
    MLOAD			function totalUsers() constant returns (uint users, string info) {...
    DUP1			function totalUsers() constant returns (uint users, string info) {...
    DUP4			function totalUsers() constant returns (uint users, string info) {...
    DUP2			function totalUsers() constant returns (uint users, string info) {...
    MSTORE			function totalUsers() constant returns (uint users, string info) {...
    PUSH 20		function totalUsers() constant returns (uint users, string info) {...
    ADD			function totalUsers() constant returns (uint users, string info) {...
    DUP1			function totalUsers() constant returns (uint users, string info) {...
    PUSH 20		function totalUsers() constant returns (uint users, string info) {...
    ADD			function totalUsers() constant returns (uint users, string info) {...
    DUP3			function totalUsers() constant returns (uint users, string info) {...
    DUP2			function totalUsers() constant returns (uint users, string info) {...
    SUB			function totalUsers() constant returns (uint users, string info) {...
    DUP3			function totalUsers() constant returns (uint users, string info) {...
    MSTORE			function totalUsers() constant returns (uint users, string info) {...
    DUP4			function totalUsers() constant returns (uint users, string info) {...
    DUP2			function totalUsers() constant returns (uint users, string info) {...
    DUP2			function totalUsers() constant returns (uint users, string info) {...
    MLOAD			function totalUsers() constant returns (uint users, string info) {...
    DUP2			function totalUsers() constant returns (uint users, string info) {...
    MSTORE			function totalUsers() constant returns (uint users, string info) {...
    PUSH 20		function totalUsers() constant returns (uint users, string info) {...
    ADD			function totalUsers() constant returns (uint users, string info) {...
    SWAP2			function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
    DUP1			function totalUsers() constant returns (uint users, string info) {...
    MLOAD			function totalUsers() constant returns (uint users, string info) {...
    SWAP1			function totalUsers() constant returns (uint users, string info) {...
    PUSH 20		function totalUsers() constant returns (uint users, string info) {...
    ADD			function totalUsers() constant returns (uint users, string info) {...
    SWAP1			function totalUsers() constant returns (uint users, string info) {...
    DUP1			function totalUsers() constant returns (uint users, string info) {...
    DUP4			function totalUsers() constant returns (uint users, string info) {...
    DUP4			function totalUsers() constant returns (uint users, string info) {...
    DUP3			function totalUsers() constant returns (uint users, string info) {...
    SWAP1			function totalUsers() constant returns (uint users, string info) {...
    PUSH 0		function totalUsers() constant returns (uint users, string info) {...
    PUSH 4		function totalUsers() constant returns (uint users, string info) {...
    PUSH 20		function totalUsers() constant returns (uint users, string info) {...
    DUP5			function totalUsers() constant returns (uint users, string info) {...
    PUSH 1F		function totalUsers() constant returns (uint users, string info) {...
    ADD			function totalUsers() constant returns (uint users, string info) {...
    DIV			function totalUsers() constant returns (uint users, string info) {...
    PUSH F		function totalUsers() constant returns (uint users, string info) {...
    MUL			function totalUsers() constant returns (uint users, string info) {...
    PUSH 3		function totalUsers() constant returns (uint users, string info) {...
    ADD			function totalUsers() constant returns (uint users, string info) {...
    CALL			function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
    SWAP1			function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
    SWAP1			function totalUsers() constant returns (uint users, string info) {...
    DUP2			function totalUsers() constant returns (uint users, string info) {...
    ADD			function totalUsers() constant returns (uint users, string info) {...
    SWAP1			function totalUsers() constant returns (uint users, string info) {...
    PUSH 1F		function totalUsers() constant returns (uint users, string info) {...
    AND			function totalUsers() constant returns (uint users, string info) {...
    DUP1			function totalUsers() constant returns (uint users, string info) {...
    ISZERO			function totalUsers() constant returns (uint users, string info) {...
    PUSH [tag71]		function totalUsers() constant returns (uint users, string info) {...
    JUMPI			function totalUsers() constant returns (uint users, string info) {...
    DUP1			function totalUsers() constant returns (uint users, string info) {...
    DUP3			function totalUsers() constant returns (uint users, string info) {...
    SUB			function totalUsers() constant returns (uint users, string info) {...
    DUP1			function totalUsers() constant returns (uint users, string info) {...
    MLOAD			function totalUsers() constant returns (uint users, string info) {...
    PUSH 1		function totalUsers() constant returns (uint users, string info) {...
    DUP4			function totalUsers() constant returns (uint users, string info) {...
    PUSH 20		function totalUsers() constant returns (uint users, string info) {...
    SUB			function totalUsers() constant returns (uint users, string info) {...
    PUSH 100		function totalUsers() constant returns (uint users, string info) {...
    EXP			function totalUsers() constant returns (uint users, string info) {...
    SUB			function totalUsers() constant returns (uint users, string info) {...
    NOT			function totalUsers() constant returns (uint users, string info) {...
    AND			function totalUsers() constant returns (uint users, string info) {...
    DUP2			function totalUsers() constant returns (uint users, string info) {...
    MSTORE			function totalUsers() constant returns (uint users, string info) {...
    PUSH 20		function totalUsers() constant returns (uint users, string info) {...
    ADD			function totalUsers() constant returns (uint users, string info) {...
    SWAP2			function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
  tag71: 
    JUMPDEST		function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
    SWAP4			function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
    POP			function totalUsers() constant returns (uint users, string info) {...
    PUSH 40		function totalUsers() constant returns (uint users, string info) {...
    MLOAD			function totalUsers() constant returns (uint users, string info) {...
    DUP1			function totalUsers() constant returns (uint users, string info) {...
    SWAP2			function totalUsers() constant returns (uint users, string info) {...
    SUB			function totalUsers() constant returns (uint users, string info) {...
    SWAP1			function totalUsers() constant returns (uint users, string info) {...
    RETURN			function totalUsers() constant returns (uint users, string info) {...
  tag18: 
    JUMPDEST		function collectFees() onlyowner {...
    PUSH [tag72]		function collectFees() onlyowner {...
    PUSH 4		function collectFees() onlyowner {...
    DUP1			function collectFees() onlyowner {...
    POP			function collectFees() onlyowner {...
    POP			function collectFees() onlyowner {...
    PUSH [tag73]		function collectFees() onlyowner {...
    JUMP			function collectFees() onlyowner {...
  tag72: 
    JUMPDEST		function collectFees() onlyowner {...
    STOP			function collectFees() onlyowner {...
  tag19: 
    JUMPDEST		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH [tag74]		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 4		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH [tag75]		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    JUMP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
  tag74: 
    JUMPDEST		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 40		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MLOAD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP6			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    AND			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MSTORE			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP5			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MSTORE			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP4			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SUB			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP4			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MSTORE			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP7			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MLOAD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MSTORE			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MLOAD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP4			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP4			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP3			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 0		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 4		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP5			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 1F		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DIV			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH F		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MUL			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 3		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    CALL			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 1F		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    AND			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ISZERO			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH [tag76]		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    JUMPI			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP3			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SUB			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MLOAD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 1		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP4			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SUB			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 100		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    EXP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SUB			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    NOT			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    AND			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MSTORE			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
  tag76: 
    JUMPDEST		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP4			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SUB			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP3			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MSTORE			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP5			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MLOAD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MSTORE			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MLOAD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP4			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP4			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP3			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 0		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 4		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP5			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 1F		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DIV			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH F		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MUL			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 3		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    CALL			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 1F		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    AND			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ISZERO			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH [tag77]		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    JUMPI			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP3			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SUB			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MLOAD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 1		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP4			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SUB			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 100		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    EXP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SUB			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    NOT			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    AND			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MSTORE			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 20		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    ADD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
  tag77: 
    JUMPDEST		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP7			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    POP			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 40		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    MLOAD			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    DUP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SUB			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    RETURN			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
  tag20: 
    JUMPDEST		function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH [tag78]		function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 4		function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH [tag79]		function currentBalance() constant returns (uint pitBalance, string info) {...
    JUMP			function currentBalance() constant returns (uint pitBalance, string info) {...
  tag78: 
    JUMPDEST		function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 40		function currentBalance() constant returns (uint pitBalance, string info) {...
    MLOAD			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP4			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    MSTORE			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 20		function currentBalance() constant returns (uint pitBalance, string info) {...
    ADD			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 20		function currentBalance() constant returns (uint pitBalance, string info) {...
    ADD			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP3			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    SUB			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP3			function currentBalance() constant returns (uint pitBalance, string info) {...
    MSTORE			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP4			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    MLOAD			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    MSTORE			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 20		function currentBalance() constant returns (uint pitBalance, string info) {...
    ADD			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    MLOAD			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 20		function currentBalance() constant returns (uint pitBalance, string info) {...
    ADD			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP4			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP4			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP3			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 0		function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 4		function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 20		function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP5			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 1F		function currentBalance() constant returns (uint pitBalance, string info) {...
    ADD			function currentBalance() constant returns (uint pitBalance, string info) {...
    DIV			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH F		function currentBalance() constant returns (uint pitBalance, string info) {...
    MUL			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 3		function currentBalance() constant returns (uint pitBalance, string info) {...
    ADD			function currentBalance() constant returns (uint pitBalance, string info) {...
    CALL			function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    ADD			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 1F		function currentBalance() constant returns (uint pitBalance, string info) {...
    AND			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    ISZERO			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH [tag80]		function currentBalance() constant returns (uint pitBalance, string info) {...
    JUMPI			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP3			function currentBalance() constant returns (uint pitBalance, string info) {...
    SUB			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    MLOAD			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 1		function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP4			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 20		function currentBalance() constant returns (uint pitBalance, string info) {...
    SUB			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 100		function currentBalance() constant returns (uint pitBalance, string info) {...
    EXP			function currentBalance() constant returns (uint pitBalance, string info) {...
    SUB			function currentBalance() constant returns (uint pitBalance, string info) {...
    NOT			function currentBalance() constant returns (uint pitBalance, string info) {...
    AND			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    MSTORE			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 20		function currentBalance() constant returns (uint pitBalance, string info) {...
    ADD			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
  tag80: 
    JUMPDEST		function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP4			function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
    POP			function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 40		function currentBalance() constant returns (uint pitBalance, string info) {...
    MLOAD			function currentBalance() constant returns (uint pitBalance, string info) {...
    DUP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    SUB			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    RETURN			function currentBalance() constant returns (uint pitBalance, string info) {...
  tag21: 
    JUMPDEST		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH [tag81]		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 4		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    CALLDATALOAD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 20		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    ADD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH [tag82]		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    JUMP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
  tag81: 
    JUMPDEST		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 40		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    MLOAD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP4			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    MSTORE			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 20		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    ADD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 20		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    ADD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP3			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SUB			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP3			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    MSTORE			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP4			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    MLOAD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    MSTORE			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 20		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    ADD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    MLOAD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 20		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    ADD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP4			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP4			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP3			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 0		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 4		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 20		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP5			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 1F		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    ADD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DIV			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH F		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    MUL			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 3		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    ADD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    CALL			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    ADD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 1F		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    AND			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    ISZERO			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH [tag83]		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    JUMPI			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP3			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SUB			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    MLOAD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 1		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP4			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 20		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SUB			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 100		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    EXP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SUB			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    NOT			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    AND			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    MSTORE			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 20		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    ADD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
  tag83: 
    JUMPDEST		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP4			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 40		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    MLOAD			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    DUP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SUB			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP1			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    RETURN			function userRescues(address user) constant returns(uint rescueCount, string info) {...
  tag22: 
    JUMPDEST		function userName(address Address) constant returns (string nickname) {...
    PUSH [tag84]		function userName(address Address) constant returns (string nickname) {...
    PUSH 4		function userName(address Address) constant returns (string nickname) {...
    DUP1			function userName(address Address) constant returns (string nickname) {...
    DUP1			function userName(address Address) constant returns (string nickname) {...
    CALLDATALOAD			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    PUSH 20		function userName(address Address) constant returns (string nickname) {...
    ADD			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    SWAP2			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
    PUSH [tag85]		function userName(address Address) constant returns (string nickname) {...
    JUMP			function userName(address Address) constant returns (string nickname) {...
  tag84: 
    JUMPDEST		function userName(address Address) constant returns (string nickname) {...
    PUSH 40		function userName(address Address) constant returns (string nickname) {...
    MLOAD			function userName(address Address) constant returns (string nickname) {...
    DUP1			function userName(address Address) constant returns (string nickname) {...
    DUP1			function userName(address Address) constant returns (string nickname) {...
    PUSH 20		function userName(address Address) constant returns (string nickname) {...
    ADD			function userName(address Address) constant returns (string nickname) {...
    DUP3			function userName(address Address) constant returns (string nickname) {...
    DUP2			function userName(address Address) constant returns (string nickname) {...
    SUB			function userName(address Address) constant returns (string nickname) {...
    DUP3			function userName(address Address) constant returns (string nickname) {...
    MSTORE			function userName(address Address) constant returns (string nickname) {...
    DUP4			function userName(address Address) constant returns (string nickname) {...
    DUP2			function userName(address Address) constant returns (string nickname) {...
    DUP2			function userName(address Address) constant returns (string nickname) {...
    MLOAD			function userName(address Address) constant returns (string nickname) {...
    DUP2			function userName(address Address) constant returns (string nickname) {...
    MSTORE			function userName(address Address) constant returns (string nickname) {...
    PUSH 20		function userName(address Address) constant returns (string nickname) {...
    ADD			function userName(address Address) constant returns (string nickname) {...
    SWAP2			function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
    DUP1			function userName(address Address) constant returns (string nickname) {...
    MLOAD			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    PUSH 20		function userName(address Address) constant returns (string nickname) {...
    ADD			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    DUP1			function userName(address Address) constant returns (string nickname) {...
    DUP4			function userName(address Address) constant returns (string nickname) {...
    DUP4			function userName(address Address) constant returns (string nickname) {...
    DUP3			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    PUSH 0		function userName(address Address) constant returns (string nickname) {...
    PUSH 4		function userName(address Address) constant returns (string nickname) {...
    PUSH 20		function userName(address Address) constant returns (string nickname) {...
    DUP5			function userName(address Address) constant returns (string nickname) {...
    PUSH 1F		function userName(address Address) constant returns (string nickname) {...
    ADD			function userName(address Address) constant returns (string nickname) {...
    DIV			function userName(address Address) constant returns (string nickname) {...
    PUSH F		function userName(address Address) constant returns (string nickname) {...
    MUL			function userName(address Address) constant returns (string nickname) {...
    PUSH 3		function userName(address Address) constant returns (string nickname) {...
    ADD			function userName(address Address) constant returns (string nickname) {...
    CALL			function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    DUP2			function userName(address Address) constant returns (string nickname) {...
    ADD			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    PUSH 1F		function userName(address Address) constant returns (string nickname) {...
    AND			function userName(address Address) constant returns (string nickname) {...
    DUP1			function userName(address Address) constant returns (string nickname) {...
    ISZERO			function userName(address Address) constant returns (string nickname) {...
    PUSH [tag86]		function userName(address Address) constant returns (string nickname) {...
    JUMPI			function userName(address Address) constant returns (string nickname) {...
    DUP1			function userName(address Address) constant returns (string nickname) {...
    DUP3			function userName(address Address) constant returns (string nickname) {...
    SUB			function userName(address Address) constant returns (string nickname) {...
    DUP1			function userName(address Address) constant returns (string nickname) {...
    MLOAD			function userName(address Address) constant returns (string nickname) {...
    PUSH 1		function userName(address Address) constant returns (string nickname) {...
    DUP4			function userName(address Address) constant returns (string nickname) {...
    PUSH 20		function userName(address Address) constant returns (string nickname) {...
    SUB			function userName(address Address) constant returns (string nickname) {...
    PUSH 100		function userName(address Address) constant returns (string nickname) {...
    EXP			function userName(address Address) constant returns (string nickname) {...
    SUB			function userName(address Address) constant returns (string nickname) {...
    NOT			function userName(address Address) constant returns (string nickname) {...
    AND			function userName(address Address) constant returns (string nickname) {...
    DUP2			function userName(address Address) constant returns (string nickname) {...
    MSTORE			function userName(address Address) constant returns (string nickname) {...
    PUSH 20		function userName(address Address) constant returns (string nickname) {...
    ADD			function userName(address Address) constant returns (string nickname) {...
    SWAP2			function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
  tag86: 
    JUMPDEST		function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
    SWAP3			function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
    PUSH 40		function userName(address Address) constant returns (string nickname) {...
    MLOAD			function userName(address Address) constant returns (string nickname) {...
    DUP1			function userName(address Address) constant returns (string nickname) {...
    SWAP2			function userName(address Address) constant returns (string nickname) {...
    SUB			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    RETURN			function userName(address Address) constant returns (string nickname) {...
  tag23: 
    JUMPDEST		function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH [tag87]		function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 4		function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    CALLDATALOAD			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 20		function userTokens(address user) constant returns (uint tokens, string info) {...
    ADD			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH [tag88]		function userTokens(address user) constant returns (uint tokens, string info) {...
    JUMP			function userTokens(address user) constant returns (uint tokens, string info) {...
  tag87: 
    JUMPDEST		function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 40		function userTokens(address user) constant returns (uint tokens, string info) {...
    MLOAD			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP4			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    MSTORE			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 20		function userTokens(address user) constant returns (uint tokens, string info) {...
    ADD			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 20		function userTokens(address user) constant returns (uint tokens, string info) {...
    ADD			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP3			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    SUB			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP3			function userTokens(address user) constant returns (uint tokens, string info) {...
    MSTORE			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP4			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    MLOAD			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    MSTORE			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 20		function userTokens(address user) constant returns (uint tokens, string info) {...
    ADD			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    MLOAD			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 20		function userTokens(address user) constant returns (uint tokens, string info) {...
    ADD			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP4			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP4			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP3			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 0		function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 4		function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 20		function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP5			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 1F		function userTokens(address user) constant returns (uint tokens, string info) {...
    ADD			function userTokens(address user) constant returns (uint tokens, string info) {...
    DIV			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH F		function userTokens(address user) constant returns (uint tokens, string info) {...
    MUL			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 3		function userTokens(address user) constant returns (uint tokens, string info) {...
    ADD			function userTokens(address user) constant returns (uint tokens, string info) {...
    CALL			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    ADD			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 1F		function userTokens(address user) constant returns (uint tokens, string info) {...
    AND			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    ISZERO			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH [tag89]		function userTokens(address user) constant returns (uint tokens, string info) {...
    JUMPI			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP3			function userTokens(address user) constant returns (uint tokens, string info) {...
    SUB			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    MLOAD			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 1		function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP4			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 20		function userTokens(address user) constant returns (uint tokens, string info) {...
    SUB			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 100		function userTokens(address user) constant returns (uint tokens, string info) {...
    EXP			function userTokens(address user) constant returns (uint tokens, string info) {...
    SUB			function userTokens(address user) constant returns (uint tokens, string info) {...
    NOT			function userTokens(address user) constant returns (uint tokens, string info) {...
    AND			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    MSTORE			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 20		function userTokens(address user) constant returns (uint tokens, string info) {...
    ADD			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
  tag89: 
    JUMPDEST		function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP4			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 40		function userTokens(address user) constant returns (uint tokens, string info) {...
    MLOAD			function userTokens(address user) constant returns (uint tokens, string info) {...
    DUP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    SUB			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP1			function userTokens(address user) constant returns (uint tokens, string info) {...
    RETURN			function userTokens(address user) constant returns (uint tokens, string info) {...
  tag24: 
    JUMPDEST		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH [tag90]		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 4		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    CALLDATALOAD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH [tag91]		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    JUMP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
  tag90: 
    JUMPDEST		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 40		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MLOAD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP8			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    AND			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MSTORE			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP7			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MSTORE			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP6			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MSTORE			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP5			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MSTORE			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SUB			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MSTORE			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP9			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MLOAD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MSTORE			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MLOAD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP3			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 0		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 4		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP5			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 1F		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DIV			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH F		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MUL			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 3		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    CALL			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 1F		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    AND			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ISZERO			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH [tag92]		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    JUMPI			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP3			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SUB			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MLOAD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 1		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SUB			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 100		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    EXP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SUB			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    NOT			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    AND			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MSTORE			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
  tag92: 
    JUMPDEST		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SUB			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP3			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MSTORE			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP5			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MLOAD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MSTORE			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MLOAD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP3			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 0		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 4		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP5			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 1F		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DIV			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH F		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MUL			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 3		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    CALL			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 1F		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    AND			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ISZERO			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH [tag93]		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    JUMPI			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP3			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SUB			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MLOAD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 1		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SUB			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 100		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    EXP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SUB			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    NOT			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    AND			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MSTORE			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 20		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    ADD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
  tag93: 
    JUMPDEST		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP9			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 40		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    MLOAD			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    DUP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SUB			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP1			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    RETURN			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
  tag29: 
    JUMPDEST		function init() private{...
    PUSH 16345785D8A0000		100 finney
    CALLVALUE			msg.value
    LT			msg.value < 100 finney
    ISZERO			if (msg.value < 100 finney) {...
    PUSH [tag95]		if (msg.value < 100 finney) {...
    JUMPI			if (msg.value < 100 finney) {...
    PUSH [tag94]		return;
    JUMP			return;
  tag95: 
    JUMPDEST		if (msg.value < 100 finney) {...
    PUSH [tag96]		jumpIn()
    PUSH [tag97]		jumpIn
    JUMP	[in]		jumpIn()
  tag96: 
    JUMPDEST		jumpIn()
    PUSH 5		5
    CALLVALUE			msg.value
    GT			msg.value > 5
    ISZERO			if (msg.value > 5)...
    PUSH [tag98]		if (msg.value > 5)...
    JUMPI			if (msg.value > 5)...
    TIMESTAMP			now
    PUSH B		timeOfLastDeposit
    PUSH 0		timeOfLastDeposit
    POP			timeOfLastDeposit = now
    DUP2			timeOfLastDeposit = now
    SWAP1			timeOfLastDeposit = now
    SSTORE			timeOfLastDeposit = now
    POP			timeOfLastDeposit = now
  tag98: 
    JUMPDEST		if (msg.value > 5)...
  tag94: 
    JUMPDEST		function init() private{...
    JUMP	[out]		function init() private{...
  tag73: 
    JUMPDEST		function collectFees() onlyowner {...
    PUSH 0		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    EQ			msg.sender == owner
    ISZERO			if (msg.sender == owner) _
    PUSH [tag100]		if (msg.sender == owner) _
    JUMPI			if (msg.sender == owner) _
    PUSH 0		0
    PUSH 5		collectedFees
    PUSH 0		collectedFees
    POP			collectedFees
    SLOAD			collectedFees
    EQ			collectedFees == 0
    ISZERO			if (collectedFees == 0) throw
    PUSH [tag101]		if (collectedFees == 0) throw
    JUMPI			if (collectedFees == 0) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag101: 
    JUMPDEST		if (collectedFees == 0) throw
    PUSH 0		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner.send
    AND			owner.send
    PUSH 0		owner.send(collectedFees)
    PUSH 5		collectedFees
    PUSH 0		collectedFees
    POP			collectedFees
    SLOAD			collectedFees
    PUSH 40		owner.send(collectedFees)
    MLOAD			owner.send(collectedFees)
    DUP1			owner.send(collectedFees)
    SWAP1			owner.send(collectedFees)
    POP			owner.send(collectedFees)
    PUSH 0		owner.send(collectedFees)
    PUSH 40		owner.send(collectedFees)
    MLOAD			owner.send(collectedFees)
    DUP1			owner.send(collectedFees)
    DUP4			owner.send(collectedFees)
    SUB			owner.send(collectedFees)
    DUP2			owner.send(collectedFees)
    DUP6			owner.send(collectedFees)
    DUP9			owner.send(collectedFees)
    DUP9			owner.send(collectedFees)
    CALL			owner.send(collectedFees)
    SWAP4			owner.send(collectedFees)
    POP			owner.send(collectedFees)
    POP			owner.send(collectedFees)
    POP			owner.send(collectedFees)
    POP			owner.send(collectedFees)
    POP			owner.send(collectedFees)
    PUSH 0		0
    PUSH 5		collectedFees
    PUSH 0		collectedFees
    POP			collectedFees = 0
    DUP2			collectedFees = 0
    SWAP1			collectedFees = 0
    SSTORE			collectedFees = 0
    POP			collectedFees = 0
  tag100: 
    JUMPDEST		if (msg.sender == owner) _
  tag99: 
    JUMPDEST		function collectFees() onlyowner {...
    JUMP	[out]		function collectFees() onlyowner {...
  tag65: 
    JUMPDEST		function changeOwner(address newOwner) onlyowner {...
    PUSH 0		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    EQ			msg.sender == owner
    ISZERO			if (msg.sender == owner) _
    PUSH [tag103]		if (msg.sender == owner) _
    JUMPI			if (msg.sender == owner) _
    DUP1			newOwner
    PUSH 0		owner
    PUSH 0		owner
    PUSH 100		owner = newOwner
    EXP			owner = newOwner
    DUP2			owner = newOwner
    SLOAD			owner = newOwner
    DUP2			owner = newOwner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner = newOwner
    MUL			owner = newOwner
    NOT			owner = newOwner
    AND			owner = newOwner
    SWAP1			owner = newOwner
    DUP4			owner = newOwner
    MUL			owner = newOwner
    OR			owner = newOwner
    SWAP1			owner = newOwner
    SSTORE			owner = newOwner
    POP			owner = newOwner
  tag103: 
    JUMPDEST		if (msg.sender == owner) _
  tag102: 
    JUMPDEST		function changeOwner(address newOwner) onlyowner {...
    POP			function changeOwner(address newOwner) onlyowner {...
    JUMP	[out]		function changeOwner(address newOwner) onlyowner {...
  tag58: 
    JUMPDEST		function changeBaseMultiplier(uint multi) onlyowner {...
    PUSH 0		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    EQ			msg.sender == owner
    ISZERO			if (msg.sender == owner) _
    PUSH [tag105]		if (msg.sender == owner) _
    JUMPI			if (msg.sender == owner) _
    PUSH 6E		110
    DUP2			multi
    LT			multi < 110
    DUP1			multi < 110 || multi > 150
    PUSH [tag106]		multi < 110 || multi > 150
    JUMPI			multi < 110 || multi > 150
    POP			multi < 110 || multi > 150
    PUSH 96		150
    DUP2			multi
    GT			multi > 150
  tag106: 
    JUMPDEST		multi < 110 || multi > 150
    ISZERO			if (multi < 110 || multi > 150) throw
    PUSH [tag107]		if (multi < 110 || multi > 150) throw
    JUMPI			if (multi < 110 || multi > 150) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag107: 
    JUMPDEST		if (multi < 110 || multi > 150) throw
    DUP1			multi
    PUSH 7		baseMultiplier
    PUSH 0		baseMultiplier
    POP			baseMultiplier = multi
    DUP2			baseMultiplier = multi
    SWAP1			baseMultiplier = multi
    SSTORE			baseMultiplier = multi
    POP			baseMultiplier = multi
  tag105: 
    JUMPDEST		if (msg.sender == owner) _
  tag104: 
    JUMPDEST		function changeBaseMultiplier(uint multi) onlyowner {...
    POP			function changeBaseMultiplier(uint multi) onlyowner {...
    JUMP	[out]		function changeBaseMultiplier(uint multi) onlyowner {...
  tag63: 
    JUMPDEST		function changeMaxMultiplier(uint multi) onlyowner {...
    PUSH 0		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    EQ			msg.sender == owner
    ISZERO			if (msg.sender == owner) _
    PUSH [tag109]		if (msg.sender == owner) _
    JUMPI			if (msg.sender == owner) _
    PUSH C8		200
    DUP2			multi
    LT			multi < 200
    DUP1			multi < 200 || multi > 300
    PUSH [tag110]		multi < 200 || multi > 300
    JUMPI			multi < 200 || multi > 300
    POP			multi < 200 || multi > 300
    PUSH 12C		300
    DUP2			multi
    GT			multi > 300
  tag110: 
    JUMPDEST		multi < 200 || multi > 300
    ISZERO			if (multi < 200 || multi > 300) throw
    PUSH [tag111]		if (multi < 200 || multi > 300) throw
    JUMPI			if (multi < 200 || multi > 300) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag111: 
    JUMPDEST		if (multi < 200 || multi > 300) throw
    DUP1			multi
    PUSH 8		maxMultiplier
    PUSH 0		maxMultiplier
    POP			maxMultiplier = multi
    DUP2			maxMultiplier = multi
    SWAP1			maxMultiplier = multi
    SSTORE			maxMultiplier = multi
    POP			maxMultiplier = multi
  tag109: 
    JUMPDEST		if (msg.sender == owner) _
  tag108: 
    JUMPDEST		function changeMaxMultiplier(uint multi) onlyowner {...
    POP			function changeMaxMultiplier(uint multi) onlyowner {...
    JUMP	[out]		function changeMaxMultiplier(uint multi) onlyowner {...
  tag44: 
    JUMPDEST		function changeFee(uint fee) onlyowner {...
    PUSH 0		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    EQ			msg.sender == owner
    ISZERO			if (msg.sender == owner) _
    PUSH [tag113]		if (msg.sender == owner) _
    JUMPI			if (msg.sender == owner) _
    PUSH 0		0
    DUP2			fee
    LT			fee < 0
    DUP1			fee < 0 || fee > 10
    PUSH [tag114]		fee < 0 || fee > 10
    JUMPI			fee < 0 || fee > 10
    POP			fee < 0 || fee > 10
    PUSH A		10
    DUP2			fee
    GT			fee > 10
  tag114: 
    JUMPDEST		fee < 0 || fee > 10
    ISZERO			if (fee < 0 || fee > 10) throw
    PUSH [tag115]		if (fee < 0 || fee > 10) throw
    JUMPI			if (fee < 0 || fee > 10) throw
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag115: 
    JUMPDEST		if (fee < 0 || fee > 10) throw
    DUP1			fee
    PUSH 6		jumpFee
    PUSH 0		jumpFee
    POP			jumpFee = fee
    DUP2			jumpFee = fee
    SWAP1			jumpFee = fee
    SSTORE			jumpFee = fee
    POP			jumpFee = fee
  tag113: 
    JUMPDEST		if (msg.sender == owner) _
  tag112: 
    JUMPDEST		function changeFee(uint fee) onlyowner {...
    POP			function changeFee(uint fee) onlyowner {...
    JUMP	[out]		function changeFee(uint fee) onlyowner {...
  tag36: 
    JUMPDEST		function setNickname(string name) {...
    PUSH [tag117]		addNewUser(msg.sender)
    CALLER			msg.sender
    PUSH [tag118]		addNewUser
    JUMP	[in]		addNewUser(msg.sender)
  tag117: 
    JUMPDEST		addNewUser(msg.sender)
    PUSH 2		2
    DUP2			name
    MLOAD			bytes(name).length
    LT			bytes(name).length >= 2
    ISZERO			bytes(name).length >= 2
    DUP1			bytes(name).length >= 2 && bytes(name).length <= 16
    ISZERO			bytes(name).length >= 2 && bytes(name).length <= 16
    PUSH [tag119]		bytes(name).length >= 2 && bytes(name).length <= 16
    JUMPI			bytes(name).length >= 2 && bytes(name).length <= 16
    POP			bytes(name).length >= 2 && bytes(name).length <= 16
    PUSH 10		16
    DUP2			name
    MLOAD			bytes(name).length
    GT			bytes(name).length <= 16
    ISZERO			bytes(name).length <= 16
  tag119: 
    JUMPDEST		bytes(name).length >= 2 && bytes(name).length <= 16
    ISZERO			if (bytes(name).length >= 2 && bytes(name).length <= 16)...
    PUSH [tag120]		if (bytes(name).length >= 2 && bytes(name).length <= 16)...
    JUMPI			if (bytes(name).length >= 2 && bytes(name).length <= 16)...
    DUP1			name
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender]
    AND			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    SWAP1			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    PUSH 0		users[msg.sender]
    SHA3			users[msg.sender]
    PUSH 0		users[msg.sender]
    POP			users[msg.sender]
    PUSH 2		users[msg.sender].nickname
    ADD			users[msg.sender].nickname
    PUSH 0		users[msg.sender].nickname
    POP			users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    DUP1			users[msg.sender].nickname = name
    MLOAD			users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    PUSH 20		users[msg.sender].nickname = name
    ADD			users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    DUP3			users[msg.sender].nickname = name
    DUP1			users[msg.sender].nickname = name
    SLOAD			users[msg.sender].nickname = name
    PUSH 1		users[msg.sender].nickname = name
    DUP2			users[msg.sender].nickname = name
    PUSH 1		users[msg.sender].nickname = name
    AND			users[msg.sender].nickname = name
    ISZERO			users[msg.sender].nickname = name
    PUSH 100		users[msg.sender].nickname = name
    MUL			users[msg.sender].nickname = name
    SUB			users[msg.sender].nickname = name
    AND			users[msg.sender].nickname = name
    PUSH 2		users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    DIV			users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    PUSH 0		users[msg.sender].nickname = name
    MSTORE			users[msg.sender].nickname = name
    PUSH 20		users[msg.sender].nickname = name
    PUSH 0		users[msg.sender].nickname = name
    SHA3			users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    PUSH 1F		users[msg.sender].nickname = name
    ADD			users[msg.sender].nickname = name
    PUSH 20		users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    DIV			users[msg.sender].nickname = name
    DUP2			users[msg.sender].nickname = name
    ADD			users[msg.sender].nickname = name
    SWAP3			users[msg.sender].nickname = name
    DUP3			users[msg.sender].nickname = name
    PUSH 1F		users[msg.sender].nickname = name
    LT			users[msg.sender].nickname = name
    PUSH [tag122]		users[msg.sender].nickname = name
    JUMPI			users[msg.sender].nickname = name
    DUP1			users[msg.sender].nickname = name
    MLOAD			users[msg.sender].nickname = name
    PUSH FF		users[msg.sender].nickname = name
    NOT			users[msg.sender].nickname = name
    AND			users[msg.sender].nickname = name
    DUP4			users[msg.sender].nickname = name
    DUP1			users[msg.sender].nickname = name
    ADD			users[msg.sender].nickname = name
    OR			users[msg.sender].nickname = name
    DUP6			users[msg.sender].nickname = name
    SSTORE			users[msg.sender].nickname = name
    PUSH [tag121]		users[msg.sender].nickname = name
    JUMP			users[msg.sender].nickname = name
  tag122: 
    JUMPDEST		users[msg.sender].nickname = name
    DUP3			users[msg.sender].nickname = name
    DUP1			users[msg.sender].nickname = name
    ADD			users[msg.sender].nickname = name
    PUSH 1		users[msg.sender].nickname = name
    ADD			users[msg.sender].nickname = name
    DUP6			users[msg.sender].nickname = name
    SSTORE			users[msg.sender].nickname = name
    DUP3			users[msg.sender].nickname = name
    ISZERO			users[msg.sender].nickname = name
    PUSH [tag121]		users[msg.sender].nickname = name
    JUMPI			users[msg.sender].nickname = name
    SWAP2			users[msg.sender].nickname = name
    DUP3			users[msg.sender].nickname = name
    ADD			users[msg.sender].nickname = name
  tag123: 
    JUMPDEST		users[msg.sender].nickname = name
    DUP3			users[msg.sender].nickname = name
    DUP2			users[msg.sender].nickname = name
    GT			users[msg.sender].nickname = name
    ISZERO			users[msg.sender].nickname = name
    PUSH [tag124]		users[msg.sender].nickname = name
    JUMPI			users[msg.sender].nickname = name
    DUP3			users[msg.sender].nickname = name
    MLOAD			users[msg.sender].nickname = name
    DUP3			users[msg.sender].nickname = name
    PUSH 0		users[msg.sender].nickname = name
    POP			users[msg.sender].nickname = name
    SSTORE			users[msg.sender].nickname = name
    SWAP2			users[msg.sender].nickname = name
    PUSH 20		users[msg.sender].nickname = name
    ADD			users[msg.sender].nickname = name
    SWAP2			users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    PUSH 1		users[msg.sender].nickname = name
    ADD			users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    PUSH [tag123]		users[msg.sender].nickname = name
    JUMP			users[msg.sender].nickname = name
  tag124: 
    JUMPDEST		users[msg.sender].nickname = name
  tag121: 
    JUMPDEST		users[msg.sender].nickname = name
    POP			users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    POP			users[msg.sender].nickname = name
    PUSH [tag125]		users[msg.sender].nickname = name
    SWAP2			users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    PUSH [tag126]		users[msg.sender].nickname = name
    JUMP			users[msg.sender].nickname = name
  tag126: 
    JUMPDEST		users[msg.sender].nickname = name
    DUP1			users[msg.sender].nickname = name
    DUP3			users[msg.sender].nickname = name
    GT			users[msg.sender].nickname = name
    ISZERO			users[msg.sender].nickname = name
    PUSH [tag127]		users[msg.sender].nickname = name
    JUMPI			users[msg.sender].nickname = name
    PUSH 0		users[msg.sender].nickname = name
    DUP2			users[msg.sender].nickname = name
    DUP2			users[msg.sender].nickname = name
    POP			users[msg.sender].nickname = name
    PUSH 0		users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    SSTORE			users[msg.sender].nickname = name
    POP			users[msg.sender].nickname = name
    PUSH 1		users[msg.sender].nickname = name
    ADD			users[msg.sender].nickname = name
    PUSH [tag126]		users[msg.sender].nickname = name
    JUMP			users[msg.sender].nickname = name
  tag127: 
    JUMPDEST		users[msg.sender].nickname = name
    POP			users[msg.sender].nickname = name
    SWAP1			users[msg.sender].nickname = name
    JUMP			users[msg.sender].nickname = name
  tag125: 
    JUMPDEST		users[msg.sender].nickname = name
    POP			users[msg.sender].nickname = name
    POP			users[msg.sender].nickname = name
  tag120: 
    JUMPDEST		if (bytes(name).length >= 2 && bytes(name).length <= 16)...
  tag116: 
    JUMPDEST		function setNickname(string name) {...
    POP			function setNickname(string name) {...
    JUMP	[out]		function setNickname(string name) {...
  tag79: 
    JUMPDEST		function currentBalance() constant returns (uint pitBalance, string info) {...
    PUSH 0		uint pitBalance
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH 38D7EA4C68000		1 finney
    PUSH 1		balance
    PUSH 0		balance
    POP			balance
    SLOAD			balance
    DIV			balance / 1 finney
    SWAP2			pitBalance = balance / 1 finney
    POP			pitBalance = balance / 1 finney
    DUP2			pitBalance = balance / 1 finney
    POP			pitBalance = balance / 1 finney
    PUSH 60		info = 'The balance of the pit in Finneys (contract balance minus fees).'
    PUSH 40		info = 'The balance of the pit in Finneys (contract balance minus fees).'
    MLOAD			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    SWAP1			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    DUP2			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    ADD			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    PUSH 40		info = 'The balance of the pit in Finneys (contract balance minus fees).'
    MSTORE			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    DUP1			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    PUSH 40		info = 'The balance of the pit in Finneys (contract balance minus fees).'
    DUP2			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    MSTORE			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    PUSH 20		info = 'The balance of the pit in Finneys (contract balance minus fees).'
    ADD			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    PUSH 5468652062616C616E6365206F66207468652070697420696E2046696E6E6579		info = 'The balance of the pit in Finneys (contract balance minus fees).'
    DUP2			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    MSTORE			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    PUSH 20		info = 'The balance of the pit in Finneys (contract balance minus fees).'
    ADD			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    PUSH 732028636F6E74726163742062616C616E6365206D696E75732066656573292E		info = 'The balance of the pit in Finneys (contract balance minus fees).'
    DUP2			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    MSTORE			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    PUSH 20		info = 'The balance of the pit in Finneys (contract balance minus fees).'
    ADD			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    POP			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    SWAP1			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    POP			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    DUP1			info = 'The balance of the pit in Finneys (contract balance minus fees).'
    POP			info = 'The balance of the pit in Finneys (contract balance minus fees).'
  tag128: 
    JUMPDEST		function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP1			function currentBalance() constant returns (uint pitBalance, string info) {...
    SWAP2			function currentBalance() constant returns (uint pitBalance, string info) {...
    JUMP	[out]		function currentBalance() constant returns (uint pitBalance, string info) {...
  tag75: 
    JUMPDEST		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    PUSH 0		address theHero
    PUSH 20		string nickname
    PUSH 40		string nickname
    MLOAD			string nickname
    SWAP1			string nickname
    DUP2			string nickname
    ADD			string nickname
    PUSH 40		string nickname
    MSTORE			string nickname
    DUP1			string nickname
    PUSH 0		string nickname
    DUP2			string nickname
    MSTORE			string nickname
    PUSH 20		string nickname
    ADD			string nickname
    POP			string nickname
    PUSH 0		uint peopleSaved
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH C		hero
    PUSH 0		hero
    SWAP1			hero
    SLOAD			hero
    SWAP1			hero
    PUSH 100		hero
    EXP			hero
    SWAP1			hero
    DIV			hero
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		hero
    AND			hero
    SWAP4			theHero = hero
    POP			theHero = hero
    DUP4			theHero = hero
    POP			theHero = hero
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[theHero]
    DUP6			theHero
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[theHero]
    AND			users[theHero]
    DUP2			users[theHero]
    MSTORE			users[theHero]
    PUSH 20		users[theHero]
    ADD			users[theHero]
    SWAP1			users[theHero]
    DUP2			users[theHero]
    MSTORE			users[theHero]
    PUSH 20		users[theHero]
    ADD			users[theHero]
    PUSH 0		users[theHero]
    SHA3			users[theHero]
    PUSH 0		users[theHero]
    POP			users[theHero]
    PUSH 2		users[theHero].nickname
    ADD			users[theHero].nickname
    PUSH 0		users[theHero].nickname
    POP			users[theHero].nickname
    DUP1			nickname = users[theHero].nickname
    SLOAD			nickname = users[theHero].nickname
    PUSH 1		nickname = users[theHero].nickname
    DUP2			nickname = users[theHero].nickname
    PUSH 1		nickname = users[theHero].nickname
    AND			nickname = users[theHero].nickname
    ISZERO			nickname = users[theHero].nickname
    PUSH 100		nickname = users[theHero].nickname
    MUL			nickname = users[theHero].nickname
    SUB			nickname = users[theHero].nickname
    AND			nickname = users[theHero].nickname
    PUSH 2		nickname = users[theHero].nickname
    SWAP1			nickname = users[theHero].nickname
    DIV			nickname = users[theHero].nickname
    DUP1			nickname = users[theHero].nickname
    PUSH 1F		nickname = users[theHero].nickname
    ADD			nickname = users[theHero].nickname
    PUSH 20		nickname = users[theHero].nickname
    DUP1			nickname = users[theHero].nickname
    SWAP2			nickname = users[theHero].nickname
    DIV			nickname = users[theHero].nickname
    MUL			nickname = users[theHero].nickname
    PUSH 20		nickname = users[theHero].nickname
    ADD			nickname = users[theHero].nickname
    PUSH 40		nickname = users[theHero].nickname
    MLOAD			nickname = users[theHero].nickname
    SWAP1			nickname = users[theHero].nickname
    DUP2			nickname = users[theHero].nickname
    ADD			nickname = users[theHero].nickname
    PUSH 40		nickname = users[theHero].nickname
    MSTORE			nickname = users[theHero].nickname
    DUP1			nickname = users[theHero].nickname
    SWAP3			nickname = users[theHero].nickname
    SWAP2			nickname = users[theHero].nickname
    SWAP1			nickname = users[theHero].nickname
    DUP2			nickname = users[theHero].nickname
    DUP2			nickname = users[theHero].nickname
    MSTORE			nickname = users[theHero].nickname
    PUSH 20		nickname = users[theHero].nickname
    ADD			nickname = users[theHero].nickname
    DUP3			nickname = users[theHero].nickname
    DUP1			nickname = users[theHero].nickname
    SLOAD			nickname = users[theHero].nickname
    PUSH 1		nickname = users[theHero].nickname
    DUP2			nickname = users[theHero].nickname
    PUSH 1		nickname = users[theHero].nickname
    AND			nickname = users[theHero].nickname
    ISZERO			nickname = users[theHero].nickname
    PUSH 100		nickname = users[theHero].nickname
    MUL			nickname = users[theHero].nickname
    SUB			nickname = users[theHero].nickname
    AND			nickname = users[theHero].nickname
    PUSH 2		nickname = users[theHero].nickname
    SWAP1			nickname = users[theHero].nickname
    DIV			nickname = users[theHero].nickname
    DUP1			nickname = users[theHero].nickname
    ISZERO			nickname = users[theHero].nickname
    PUSH [tag130]		nickname = users[theHero].nickname
    JUMPI			nickname = users[theHero].nickname
    DUP1			nickname = users[theHero].nickname
    PUSH 1F		nickname = users[theHero].nickname
    LT			nickname = users[theHero].nickname
    PUSH [tag131]		nickname = users[theHero].nickname
    JUMPI			nickname = users[theHero].nickname
    PUSH 100		nickname = users[theHero].nickname
    DUP1			nickname = users[theHero].nickname
    DUP4			nickname = users[theHero].nickname
    SLOAD			nickname = users[theHero].nickname
    DIV			nickname = users[theHero].nickname
    MUL			nickname = users[theHero].nickname
    DUP4			nickname = users[theHero].nickname
    MSTORE			nickname = users[theHero].nickname
    SWAP2			nickname = users[theHero].nickname
    PUSH 20		nickname = users[theHero].nickname
    ADD			nickname = users[theHero].nickname
    SWAP2			nickname = users[theHero].nickname
    PUSH [tag130]		nickname = users[theHero].nickname
    JUMP			nickname = users[theHero].nickname
  tag131: 
    JUMPDEST		nickname = users[theHero].nickname
    DUP3			nickname = users[theHero].nickname
    ADD			nickname = users[theHero].nickname
    SWAP2			nickname = users[theHero].nickname
    SWAP1			nickname = users[theHero].nickname
    PUSH 0		nickname = users[theHero].nickname
    MSTORE			nickname = users[theHero].nickname
    PUSH 20		nickname = users[theHero].nickname
    PUSH 0		nickname = users[theHero].nickname
    SHA3			nickname = users[theHero].nickname
    SWAP1			nickname = users[theHero].nickname
  tag132: 
    JUMPDEST		nickname = users[theHero].nickname
    DUP2			nickname = users[theHero].nickname
    SLOAD			nickname = users[theHero].nickname
    DUP2			nickname = users[theHero].nickname
    MSTORE			nickname = users[theHero].nickname
    SWAP1			nickname = users[theHero].nickname
    PUSH 1		nickname = users[theHero].nickname
    ADD			nickname = users[theHero].nickname
    SWAP1			nickname = users[theHero].nickname
    PUSH 20		nickname = users[theHero].nickname
    ADD			nickname = users[theHero].nickname
    DUP1			nickname = users[theHero].nickname
    DUP4			nickname = users[theHero].nickname
    GT			nickname = users[theHero].nickname
    PUSH [tag132]		nickname = users[theHero].nickname
    JUMPI			nickname = users[theHero].nickname
    DUP3			nickname = users[theHero].nickname
    SWAP1			nickname = users[theHero].nickname
    SUB			nickname = users[theHero].nickname
    PUSH 1F		nickname = users[theHero].nickname
    AND			nickname = users[theHero].nickname
    DUP3			nickname = users[theHero].nickname
    ADD			nickname = users[theHero].nickname
    SWAP2			nickname = users[theHero].nickname
  tag130: 
    JUMPDEST		nickname = users[theHero].nickname
    POP			nickname = users[theHero].nickname
    POP			nickname = users[theHero].nickname
    POP			nickname = users[theHero].nickname
    POP			nickname = users[theHero].nickname
    POP			nickname = users[theHero].nickname
    SWAP3			nickname = users[theHero].nickname
    POP			nickname = users[theHero].nickname
    DUP3			nickname = users[theHero].nickname
    POP			nickname = users[theHero].nickname
    PUSH A		rescueRecord
    PUSH 0		rescueRecord
    POP			rescueRecord
    SLOAD			rescueRecord
    SWAP2			peopleSaved = rescueRecord
    POP			peopleSaved = rescueRecord
    DUP2			peopleSaved = rescueRecord
    POP			peopleSaved = rescueRecord
    PUSH 60		info = 'The current rescue record holder. All hail!'
    PUSH 40		info = 'The current rescue record holder. All hail!'
    MLOAD			info = 'The current rescue record holder. All hail!'
    SWAP1			info = 'The current rescue record holder. All hail!'
    DUP2			info = 'The current rescue record holder. All hail!'
    ADD			info = 'The current rescue record holder. All hail!'
    PUSH 40		info = 'The current rescue record holder. All hail!'
    MSTORE			info = 'The current rescue record holder. All hail!'
    DUP1			info = 'The current rescue record holder. All hail!'
    PUSH 2B		info = 'The current rescue record holder. All hail!'
    DUP2			info = 'The current rescue record holder. All hail!'
    MSTORE			info = 'The current rescue record holder. All hail!'
    PUSH 20		info = 'The current rescue record holder. All hail!'
    ADD			info = 'The current rescue record holder. All hail!'
    PUSH 5468652063757272656E7420726573637565207265636F726420686F6C646572		info = 'The current rescue record holder. All hail!'
    DUP2			info = 'The current rescue record holder. All hail!'
    MSTORE			info = 'The current rescue record holder. All hail!'
    PUSH 20		info = 'The current rescue record holder. All hail!'
    ADD			info = 'The current rescue record holder. All hail!'
    PUSH 2E20416C6C206861696C21000000000000000000000000000000000000000000		info = 'The current rescue record holder. All hail!'
    DUP2			info = 'The current rescue record holder. All hail!'
    MSTORE			info = 'The current rescue record holder. All hail!'
    PUSH 20		info = 'The current rescue record holder. All hail!'
    ADD			info = 'The current rescue record holder. All hail!'
    POP			info = 'The current rescue record holder. All hail!'
    SWAP1			info = 'The current rescue record holder. All hail!'
    POP			info = 'The current rescue record holder. All hail!'
    DUP1			info = 'The current rescue record holder. All hail!'
    POP			info = 'The current rescue record holder. All hail!'
  tag129: 
    JUMPDEST		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP1			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP2			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP3			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    SWAP4			function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
    JUMP	[out]		function heroOfThePit() constant returns (address theHero, string nickname, uint peopleSaved, string info) {...
  tag85: 
    JUMPDEST		function userName(address Address) constant returns (string nickname) {...
    PUSH 20		string nickname
    PUSH 40		string nickname
    MLOAD			string nickname
    SWAP1			string nickname
    DUP2			string nickname
    ADD			string nickname
    PUSH 40		string nickname
    MSTORE			string nickname
    DUP1			string nickname
    PUSH 0		string nickname
    DUP2			string nickname
    MSTORE			string nickname
    PUSH 20		string nickname
    ADD			string nickname
    POP			string nickname
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[Address]
    DUP4			Address
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address]
    AND			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    SWAP1			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    PUSH 0		users[Address]
    SHA3			users[Address]
    PUSH 0		users[Address]
    POP			users[Address]
    PUSH 2		users[Address].nickname
    ADD			users[Address].nickname
    PUSH 0		users[Address].nickname
    POP			users[Address].nickname
    DUP1			nickname = users[Address].nickname
    SLOAD			nickname = users[Address].nickname
    PUSH 1		nickname = users[Address].nickname
    DUP2			nickname = users[Address].nickname
    PUSH 1		nickname = users[Address].nickname
    AND			nickname = users[Address].nickname
    ISZERO			nickname = users[Address].nickname
    PUSH 100		nickname = users[Address].nickname
    MUL			nickname = users[Address].nickname
    SUB			nickname = users[Address].nickname
    AND			nickname = users[Address].nickname
    PUSH 2		nickname = users[Address].nickname
    SWAP1			nickname = users[Address].nickname
    DIV			nickname = users[Address].nickname
    DUP1			nickname = users[Address].nickname
    PUSH 1F		nickname = users[Address].nickname
    ADD			nickname = users[Address].nickname
    PUSH 20		nickname = users[Address].nickname
    DUP1			nickname = users[Address].nickname
    SWAP2			nickname = users[Address].nickname
    DIV			nickname = users[Address].nickname
    MUL			nickname = users[Address].nickname
    PUSH 20		nickname = users[Address].nickname
    ADD			nickname = users[Address].nickname
    PUSH 40		nickname = users[Address].nickname
    MLOAD			nickname = users[Address].nickname
    SWAP1			nickname = users[Address].nickname
    DUP2			nickname = users[Address].nickname
    ADD			nickname = users[Address].nickname
    PUSH 40		nickname = users[Address].nickname
    MSTORE			nickname = users[Address].nickname
    DUP1			nickname = users[Address].nickname
    SWAP3			nickname = users[Address].nickname
    SWAP2			nickname = users[Address].nickname
    SWAP1			nickname = users[Address].nickname
    DUP2			nickname = users[Address].nickname
    DUP2			nickname = users[Address].nickname
    MSTORE			nickname = users[Address].nickname
    PUSH 20		nickname = users[Address].nickname
    ADD			nickname = users[Address].nickname
    DUP3			nickname = users[Address].nickname
    DUP1			nickname = users[Address].nickname
    SLOAD			nickname = users[Address].nickname
    PUSH 1		nickname = users[Address].nickname
    DUP2			nickname = users[Address].nickname
    PUSH 1		nickname = users[Address].nickname
    AND			nickname = users[Address].nickname
    ISZERO			nickname = users[Address].nickname
    PUSH 100		nickname = users[Address].nickname
    MUL			nickname = users[Address].nickname
    SUB			nickname = users[Address].nickname
    AND			nickname = users[Address].nickname
    PUSH 2		nickname = users[Address].nickname
    SWAP1			nickname = users[Address].nickname
    DIV			nickname = users[Address].nickname
    DUP1			nickname = users[Address].nickname
    ISZERO			nickname = users[Address].nickname
    PUSH [tag134]		nickname = users[Address].nickname
    JUMPI			nickname = users[Address].nickname
    DUP1			nickname = users[Address].nickname
    PUSH 1F		nickname = users[Address].nickname
    LT			nickname = users[Address].nickname
    PUSH [tag135]		nickname = users[Address].nickname
    JUMPI			nickname = users[Address].nickname
    PUSH 100		nickname = users[Address].nickname
    DUP1			nickname = users[Address].nickname
    DUP4			nickname = users[Address].nickname
    SLOAD			nickname = users[Address].nickname
    DIV			nickname = users[Address].nickname
    MUL			nickname = users[Address].nickname
    DUP4			nickname = users[Address].nickname
    MSTORE			nickname = users[Address].nickname
    SWAP2			nickname = users[Address].nickname
    PUSH 20		nickname = users[Address].nickname
    ADD			nickname = users[Address].nickname
    SWAP2			nickname = users[Address].nickname
    PUSH [tag134]		nickname = users[Address].nickname
    JUMP			nickname = users[Address].nickname
  tag135: 
    JUMPDEST		nickname = users[Address].nickname
    DUP3			nickname = users[Address].nickname
    ADD			nickname = users[Address].nickname
    SWAP2			nickname = users[Address].nickname
    SWAP1			nickname = users[Address].nickname
    PUSH 0		nickname = users[Address].nickname
    MSTORE			nickname = users[Address].nickname
    PUSH 20		nickname = users[Address].nickname
    PUSH 0		nickname = users[Address].nickname
    SHA3			nickname = users[Address].nickname
    SWAP1			nickname = users[Address].nickname
  tag136: 
    JUMPDEST		nickname = users[Address].nickname
    DUP2			nickname = users[Address].nickname
    SLOAD			nickname = users[Address].nickname
    DUP2			nickname = users[Address].nickname
    MSTORE			nickname = users[Address].nickname
    SWAP1			nickname = users[Address].nickname
    PUSH 1		nickname = users[Address].nickname
    ADD			nickname = users[Address].nickname
    SWAP1			nickname = users[Address].nickname
    PUSH 20		nickname = users[Address].nickname
    ADD			nickname = users[Address].nickname
    DUP1			nickname = users[Address].nickname
    DUP4			nickname = users[Address].nickname
    GT			nickname = users[Address].nickname
    PUSH [tag136]		nickname = users[Address].nickname
    JUMPI			nickname = users[Address].nickname
    DUP3			nickname = users[Address].nickname
    SWAP1			nickname = users[Address].nickname
    SUB			nickname = users[Address].nickname
    PUSH 1F		nickname = users[Address].nickname
    AND			nickname = users[Address].nickname
    DUP3			nickname = users[Address].nickname
    ADD			nickname = users[Address].nickname
    SWAP2			nickname = users[Address].nickname
  tag134: 
    JUMPDEST		nickname = users[Address].nickname
    POP			nickname = users[Address].nickname
    POP			nickname = users[Address].nickname
    POP			nickname = users[Address].nickname
    POP			nickname = users[Address].nickname
    POP			nickname = users[Address].nickname
    SWAP1			nickname = users[Address].nickname
    POP			nickname = users[Address].nickname
    DUP1			nickname = users[Address].nickname
    POP			nickname = users[Address].nickname
  tag133: 
    JUMPDEST		function userName(address Address) constant returns (string nickname) {...
    SWAP2			function userName(address Address) constant returns (string nickname) {...
    SWAP1			function userName(address Address) constant returns (string nickname) {...
    POP			function userName(address Address) constant returns (string nickname) {...
    JUMP	[out]		function userName(address Address) constant returns (string nickname) {...
  tag46: 
    JUMPDEST		function totalRescues() constant returns (uint rescueCount, string info) {...
    PUSH 0		uint rescueCount
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH 4		rescues
    PUSH 0		rescues
    POP			rescues
    SLOAD			rescues
    SWAP2			rescueCount = rescues
    POP			rescueCount = rescues
    DUP2			rescueCount = rescues
    POP			rescueCount = rescues
    PUSH A0		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 40		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    MLOAD			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    SWAP1			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    DUP2			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    ADD			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 40		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    MSTORE			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    DUP1			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 6E		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    DUP2			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    MSTORE			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 20		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    ADD			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 546865206E756D626572206F662074696D657320746861742070656F706C6520		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    DUP2			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    MSTORE			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 20		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    ADD			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 68617665206265656E20726573637565642066726F6D20746865207069742028		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    DUP2			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    MSTORE			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 20		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    ADD			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 616B6120746865206E756D626572206F662074696D65732070656F706C65206D		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    DUP2			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    MSTORE			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 20		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    ADD			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 61646520612070726F666974292E000000000000000000000000000000000000		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    DUP2			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    MSTORE			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    PUSH 20		info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    ADD			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    POP			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    SWAP1			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    POP			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    DUP1			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
    POP			info = 'The number of times that people have been rescued from the pit (aka the number of times people made a profit).'
  tag137: 
    JUMPDEST		function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP1			function totalRescues() constant returns (uint rescueCount, string info) {...
    SWAP2			function totalRescues() constant returns (uint rescueCount, string info) {...
    JUMP	[out]		function totalRescues() constant returns (uint rescueCount, string info) {...
  tag60: 
    JUMPDEST		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    PUSH 0		uint BaseMultiplier
    PUSH 0		uint MaxMultiplier
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH 7		baseMultiplier
    PUSH 0		baseMultiplier
    POP			baseMultiplier
    SLOAD			baseMultiplier
    SWAP3			BaseMultiplier = baseMultiplier
    POP			BaseMultiplier = baseMultiplier
    DUP3			BaseMultiplier = baseMultiplier
    POP			BaseMultiplier = baseMultiplier
    PUSH 8		maxMultiplier
    PUSH 0		maxMultiplier
    POP			maxMultiplier
    SLOAD			maxMultiplier
    SWAP2			MaxMultiplier = maxMultiplier
    POP			MaxMultiplier = maxMultiplier
    DUP2			MaxMultiplier = maxMultiplier
    POP			MaxMultiplier = maxMultiplier
    PUSH 160		info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    PUSH 40		info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    MLOAD			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    SWAP1			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    DUP2			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    ADD			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    PUSH 40		info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    MSTORE			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    DUP1			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    PUSH 132		info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    DUP2			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    MSTORE			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    PUSH 20		info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    ADD			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    PUSH [dcd5b0d5]		info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    PUSH 132		info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    SWAP2			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    CODECOPY			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    SWAP1			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    POP			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    DUP1			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
    POP			info = 'The multipliers applied to all deposits: the final multiplier is a random number between the multpliers shown divided by 100. By default x1.1~x1.5 (up to x2 if rescue tokens are used, granting +0.1 per token). It determines the amount of money you will get when rescued (a saviour share might be deducted).'
  tag138: 
    JUMPDEST		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP1			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP2			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    SWAP3			function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
    JUMP	[out]		function multipliers() constant returns (uint BaseMultiplier, uint MaxMultiplier, string info) {...
  tag67: 
    JUMPDEST		function pitFee() constant returns (uint feePercentage, string info) {...
    PUSH 0		uint feePercentage
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH 6		jumpFee
    PUSH 0		jumpFee
    POP			jumpFee
    SLOAD			jumpFee
    SWAP2			feePercentage = jumpFee
    POP			feePercentage = jumpFee
    DUP2			feePercentage = jumpFee
    POP			feePercentage = jumpFee
    PUSH 80		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    PUSH 40		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    MLOAD			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    SWAP1			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    DUP2			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    ADD			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    PUSH 40		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    MSTORE			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    DUP1			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    PUSH 55		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    DUP2			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    MSTORE			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    PUSH 20		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    ADD			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    PUSH 546865206665652070657263656E74616765206170706C69656420746F20616C		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    DUP2			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    MSTORE			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    PUSH 20		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    ADD			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    PUSH 6C206465706F736974732E2049742063616E206368616E676520746F20737065		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    DUP2			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    MSTORE			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    PUSH 20		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    ADD			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    PUSH 6564207061796F75747320286D617820313025292E0000000000000000000000		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    DUP2			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    MSTORE			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    PUSH 20		info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    ADD			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    POP			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    SWAP1			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    POP			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    DUP1			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
    POP			info = 'The fee percentage applied to all deposits. It can change to speed payouts (max 10%).'
  tag139: 
    JUMPDEST		function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP1			function pitFee() constant returns (uint feePercentage, string info) {...
    SWAP2			function pitFee() constant returns (uint feePercentage, string info) {...
    JUMP	[out]		function pitFee() constant returns (uint feePercentage, string info) {...
  tag38: 
    JUMPDEST		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    PUSH 0		uint finneys
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH 38D7EA4C68000		1 finney
    PUSH 1		balance
    PUSH 0		balance
    POP			balance
    SLOAD			balance
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    POP			payoutOrder
    SLOAD			payoutOrder
    DUP2			entries[payoutOrder]
    SLOAD			entries[payoutOrder]
    DUP2			entries[payoutOrder]
    LT			entries[payoutOrder]
    ISZERO			entries[payoutOrder]
    PUSH [ErrorTag]		entries[payoutOrder]
    JUMPI			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    MSTORE			entries[payoutOrder]
    PUSH 20		entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    SHA3			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 4		entries[payoutOrder]
    MUL			entries[payoutOrder]
    ADD			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
  tag141: 
    JUMPDEST		entries[payoutOrder]
    POP			entries[payoutOrder]
    PUSH 2		entries[payoutOrder].payout
    ADD			entries[payoutOrder].payout
    PUSH 0		entries[payoutOrder].payout
    POP			entries[payoutOrder].payout
    SLOAD			entries[payoutOrder].payout
    SUB			entries[payoutOrder].payout - balance
    DIV			(entries[payoutOrder].payout - balance) / 1 finney
    SWAP2			finneys = (entries[payoutOrder].payout - balance) / 1 finney
    POP			finneys = (entries[payoutOrder].payout - balance) / 1 finney
    DUP2			finneys = (entries[payoutOrder].payout - balance) / 1 finney
    POP			finneys = (entries[payoutOrder].payout - balance) / 1 finney
    PUSH A0		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 40		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    MLOAD			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    SWAP1			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    DUP2			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    ADD			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 40		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    MSTORE			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    DUP1			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 63		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    DUP2			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    MSTORE			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 20		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    ADD			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 54686520616D6F756E74206F662046696E6E6579732028457468657273202A20		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    DUP2			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    MSTORE			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 20		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    ADD			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 31303030292074686174206E65656420746F206265206465706F736974656420		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    DUP2			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    MSTORE			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 20		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    ADD			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 666F7220746865206E657874207061796F757420746F20626520657865637574		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    DUP2			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    MSTORE			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 20		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    ADD			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 65642E0000000000000000000000000000000000000000000000000000000000		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    DUP2			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    MSTORE			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    PUSH 20		info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    ADD			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    POP			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    SWAP1			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    POP			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    DUP1			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
    POP			info = 'The amount of Finneys (Ethers * 1000) that need to be deposited for the next payout to be executed.'
  tag140: 
    JUMPDEST		function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP1			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    SWAP2			function nextPayoutGoal() constant returns (uint finneys, string info) {...
    JUMP	[out]		function nextPayoutGoal() constant returns (uint finneys, string info) {...
  tag49: 
    JUMPDEST		function unclaimedFees() constant returns (uint ethers, string info) {...
    PUSH 0		uint ethers
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH DE0B6B3A7640000		1 ether
    PUSH 5		collectedFees
    PUSH 0		collectedFees
    POP			collectedFees
    SLOAD			collectedFees
    DIV			collectedFees / 1 ether
    SWAP2			ethers = collectedFees / 1 ether
    POP			ethers = collectedFees / 1 ether
    DUP2			ethers = collectedFees / 1 ether
    POP			ethers = collectedFees / 1 ether
    PUSH 80		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    PUSH 40		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    MLOAD			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    SWAP1			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    DUP2			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    ADD			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    PUSH 40		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    MSTORE			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    DUP1			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    PUSH 59		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    DUP2			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    MSTORE			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    PUSH 20		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    ADD			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    PUSH 54686520616D6F756E74206F6620457468657273206F627461696E6564207468		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    DUP2			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    MSTORE			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    PUSH 20		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    ADD			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    PUSH 726F756768206665657320746861742068617665206E6F742079657420626565		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    DUP2			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    MSTORE			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    PUSH 20		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    ADD			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    PUSH 6E20636F6C6C656374656420627920746865206F776E65722E00000000000000		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    DUP2			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    MSTORE			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    PUSH 20		info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    ADD			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    POP			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    SWAP1			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    POP			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    DUP1			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
    POP			info = 'The amount of Ethers obtained through fees that have not yet been collected by the owner.'
  tag142: 
    JUMPDEST		function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP1			function unclaimedFees() constant returns (uint ethers, string info) {...
    SWAP2			function unclaimedFees() constant returns (uint ethers, string info) {...
    JUMP	[out]		function unclaimedFees() constant returns (uint ethers, string info) {...
  tag55: 
    JUMPDEST		function totalEntries() constant returns (uint count, string info) {...
    PUSH 0		uint count
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP1			entries.length
    SLOAD			entries.length
    SWAP1			entries.length
    POP			entries.length
    SWAP2			count = entries.length
    POP			count = entries.length
    DUP2			count = entries.length
    POP			count = entries.length
    PUSH 60		info = 'The number of times that people have jumped into the pit.'
    PUSH 40		info = 'The number of times that people have jumped into the pit.'
    MLOAD			info = 'The number of times that people have jumped into the pit.'
    SWAP1			info = 'The number of times that people have jumped into the pit.'
    DUP2			info = 'The number of times that people have jumped into the pit.'
    ADD			info = 'The number of times that people have jumped into the pit.'
    PUSH 40		info = 'The number of times that people have jumped into the pit.'
    MSTORE			info = 'The number of times that people have jumped into the pit.'
    DUP1			info = 'The number of times that people have jumped into the pit.'
    PUSH 39		info = 'The number of times that people have jumped into the pit.'
    DUP2			info = 'The number of times that people have jumped into the pit.'
    MSTORE			info = 'The number of times that people have jumped into the pit.'
    PUSH 20		info = 'The number of times that people have jumped into the pit.'
    ADD			info = 'The number of times that people have jumped into the pit.'
    PUSH 546865206E756D626572206F662074696D657320746861742070656F706C6520		info = 'The number of times that people have jumped into the pit.'
    DUP2			info = 'The number of times that people have jumped into the pit.'
    MSTORE			info = 'The number of times that people have jumped into the pit.'
    PUSH 20		info = 'The number of times that people have jumped into the pit.'
    ADD			info = 'The number of times that people have jumped into the pit.'
    PUSH 68617665206A756D70656420696E746F20746865207069742E00000000000000		info = 'The number of times that people have jumped into the pit.'
    DUP2			info = 'The number of times that people have jumped into the pit.'
    MSTORE			info = 'The number of times that people have jumped into the pit.'
    PUSH 20		info = 'The number of times that people have jumped into the pit.'
    ADD			info = 'The number of times that people have jumped into the pit.'
    POP			info = 'The number of times that people have jumped into the pit.'
    SWAP1			info = 'The number of times that people have jumped into the pit.'
    POP			info = 'The number of times that people have jumped into the pit.'
    DUP1			info = 'The number of times that people have jumped into the pit.'
    POP			info = 'The number of times that people have jumped into the pit.'
  tag143: 
    JUMPDEST		function totalEntries() constant returns (uint count, string info) {...
    SWAP1			function totalEntries() constant returns (uint count, string info) {...
    SWAP2			function totalEntries() constant returns (uint count, string info) {...
    JUMP	[out]		function totalEntries() constant returns (uint count, string info) {...
  tag70: 
    JUMPDEST		function totalUsers() constant returns (uint users, string info) {...
    PUSH 0		uint users
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH 2		uniqueUsers
    PUSH 0		uniqueUsers
    POP			uniqueUsers
    SLOAD			uniqueUsers
    SWAP2			users = uniqueUsers
    POP			users = uniqueUsers
    DUP2			users = uniqueUsers
    POP			users = uniqueUsers
    PUSH 60		info = 'The number of unique users that have joined the pit.'
    PUSH 40		info = 'The number of unique users that have joined the pit.'
    MLOAD			info = 'The number of unique users that have joined the pit.'
    SWAP1			info = 'The number of unique users that have joined the pit.'
    DUP2			info = 'The number of unique users that have joined the pit.'
    ADD			info = 'The number of unique users that have joined the pit.'
    PUSH 40		info = 'The number of unique users that have joined the pit.'
    MSTORE			info = 'The number of unique users that have joined the pit.'
    DUP1			info = 'The number of unique users that have joined the pit.'
    PUSH 34		info = 'The number of unique users that have joined the pit.'
    DUP2			info = 'The number of unique users that have joined the pit.'
    MSTORE			info = 'The number of unique users that have joined the pit.'
    PUSH 20		info = 'The number of unique users that have joined the pit.'
    ADD			info = 'The number of unique users that have joined the pit.'
    PUSH 546865206E756D626572206F6620756E69717565207573657273207468617420		info = 'The number of unique users that have joined the pit.'
    DUP2			info = 'The number of unique users that have joined the pit.'
    MSTORE			info = 'The number of unique users that have joined the pit.'
    PUSH 20		info = 'The number of unique users that have joined the pit.'
    ADD			info = 'The number of unique users that have joined the pit.'
    PUSH 68617665206A6F696E656420746865207069742E000000000000000000000000		info = 'The number of unique users that have joined the pit.'
    DUP2			info = 'The number of unique users that have joined the pit.'
    MSTORE			info = 'The number of unique users that have joined the pit.'
    PUSH 20		info = 'The number of unique users that have joined the pit.'
    ADD			info = 'The number of unique users that have joined the pit.'
    POP			info = 'The number of unique users that have joined the pit.'
    SWAP1			info = 'The number of unique users that have joined the pit.'
    POP			info = 'The number of unique users that have joined the pit.'
    DUP1			info = 'The number of unique users that have joined the pit.'
    POP			info = 'The number of unique users that have joined the pit.'
  tag144: 
    JUMPDEST		function totalUsers() constant returns (uint users, string info) {...
    SWAP1			function totalUsers() constant returns (uint users, string info) {...
    SWAP2			function totalUsers() constant returns (uint users, string info) {...
    JUMP	[out]		function totalUsers() constant returns (uint users, string info) {...
  tag33: 
    JUMPDEST		function awaitingPayout() constant returns (uint count, string info) {...
    PUSH 0		uint count
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    POP			payoutOrder
    SLOAD			payoutOrder
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP1			entries.length
    SLOAD			entries.length
    SWAP1			entries.length
    POP			entries.length
    SUB			entries.length - payoutOrder
    SWAP2			count = entries.length - payoutOrder
    POP			count = entries.length - payoutOrder
    DUP2			count = entries.length - payoutOrder
    POP			count = entries.length - payoutOrder
    PUSH 60		info = 'The number of people waiting to be saved.'
    PUSH 40		info = 'The number of people waiting to be saved.'
    MLOAD			info = 'The number of people waiting to be saved.'
    SWAP1			info = 'The number of people waiting to be saved.'
    DUP2			info = 'The number of people waiting to be saved.'
    ADD			info = 'The number of people waiting to be saved.'
    PUSH 40		info = 'The number of people waiting to be saved.'
    MSTORE			info = 'The number of people waiting to be saved.'
    DUP1			info = 'The number of people waiting to be saved.'
    PUSH 29		info = 'The number of people waiting to be saved.'
    DUP2			info = 'The number of people waiting to be saved.'
    MSTORE			info = 'The number of people waiting to be saved.'
    PUSH 20		info = 'The number of people waiting to be saved.'
    ADD			info = 'The number of people waiting to be saved.'
    PUSH 546865206E756D626572206F662070656F706C652077616974696E6720746F20		info = 'The number of people waiting to be saved.'
    DUP2			info = 'The number of people waiting to be saved.'
    MSTORE			info = 'The number of people waiting to be saved.'
    PUSH 20		info = 'The number of people waiting to be saved.'
    ADD			info = 'The number of people waiting to be saved.'
    PUSH 62652073617665642E0000000000000000000000000000000000000000000000		info = 'The number of people waiting to be saved.'
    DUP2			info = 'The number of people waiting to be saved.'
    MSTORE			info = 'The number of people waiting to be saved.'
    PUSH 20		info = 'The number of people waiting to be saved.'
    ADD			info = 'The number of people waiting to be saved.'
    POP			info = 'The number of people waiting to be saved.'
    SWAP1			info = 'The number of people waiting to be saved.'
    POP			info = 'The number of people waiting to be saved.'
    DUP1			info = 'The number of people waiting to be saved.'
    POP			info = 'The number of people waiting to be saved.'
  tag145: 
    JUMPDEST		function awaitingPayout() constant returns (uint count, string info) {...
    SWAP1			function awaitingPayout() constant returns (uint count, string info) {...
    SWAP2			function awaitingPayout() constant returns (uint count, string info) {...
    JUMP	[out]		function awaitingPayout() constant returns (uint count, string info) {...
  tag91: 
    JUMPDEST		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    PUSH 0		address user
    PUSH 20		string nickName
    PUSH 40		string nickName
    MLOAD			string nickName
    SWAP1			string nickName
    DUP2			string nickName
    ADD			string nickName
    PUSH 40		string nickName
    MSTORE			string nickName
    DUP1			string nickName
    PUSH 0		string nickName
    DUP2			string nickName
    MSTORE			string nickName
    PUSH 20		string nickName
    ADD			string nickName
    POP			string nickName
    PUSH 0		uint deposit
    PUSH 0		uint payout
    PUSH 0		uint tokensUsed
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP1			entries.length
    SLOAD			entries.length
    SWAP1			entries.length
    POP			entries.length
    DUP8			index
    GT			index <= entries.length
    ISZERO			index <= entries.length
    ISZERO			if (index <= entries.length) {...
    PUSH [tag147]		if (index <= entries.length) {...
    JUMPI			if (index <= entries.length) {...
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP8			index
    DUP2			entries[index]
    SLOAD			entries[index]
    DUP2			entries[index]
    LT			entries[index]
    ISZERO			entries[index]
    PUSH [ErrorTag]		entries[index]
    JUMPI			entries[index]
    SWAP1			entries[index]
    PUSH 0		entries[index]
    MSTORE			entries[index]
    PUSH 20		entries[index]
    PUSH 0		entries[index]
    SHA3			entries[index]
    SWAP1			entries[index]
    PUSH 4		entries[index]
    MUL			entries[index]
    ADD			entries[index]
    PUSH 0		entries[index]
  tag148: 
    JUMPDEST		entries[index]
    POP			entries[index]
    PUSH 0		entries[index].entryAddress
    ADD			entries[index].entryAddress
    PUSH 0		entries[index].entryAddress
    SWAP1			entries[index].entryAddress
    SLOAD			entries[index].entryAddress
    SWAP1			entries[index].entryAddress
    PUSH 100		entries[index].entryAddress
    EXP			entries[index].entryAddress
    SWAP1			entries[index].entryAddress
    DIV			entries[index].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[index].entryAddress
    AND			entries[index].entryAddress
    SWAP6			user = entries[index].entryAddress
    POP			user = entries[index].entryAddress
    DUP6			user = entries[index].entryAddress
    POP			user = entries[index].entryAddress
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[entries[index].entryAddress]
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP10			index
    DUP2			entries[index]
    SLOAD			entries[index]
    DUP2			entries[index]
    LT			entries[index]
    ISZERO			entries[index]
    PUSH [ErrorTag]		entries[index]
    JUMPI			entries[index]
    SWAP1			entries[index]
    PUSH 0		entries[index]
    MSTORE			entries[index]
    PUSH 20		entries[index]
    PUSH 0		entries[index]
    SHA3			entries[index]
    SWAP1			entries[index]
    PUSH 4		entries[index]
    MUL			entries[index]
    ADD			entries[index]
    PUSH 0		entries[index]
  tag149: 
    JUMPDEST		entries[index]
    POP			entries[index]
    PUSH 0		entries[index].entryAddress
    ADD			entries[index].entryAddress
    PUSH 0		entries[index].entryAddress
    SWAP1			entries[index].entryAddress
    SLOAD			entries[index].entryAddress
    SWAP1			entries[index].entryAddress
    PUSH 100		entries[index].entryAddress
    EXP			entries[index].entryAddress
    SWAP1			entries[index].entryAddress
    DIV			entries[index].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[index].entryAddress
    AND			entries[index].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[entries[index].entryAddress]
    AND			users[entries[index].entryAddress]
    DUP2			users[entries[index].entryAddress]
    MSTORE			users[entries[index].entryAddress]
    PUSH 20		users[entries[index].entryAddress]
    ADD			users[entries[index].entryAddress]
    SWAP1			users[entries[index].entryAddress]
    DUP2			users[entries[index].entryAddress]
    MSTORE			users[entries[index].entryAddress]
    PUSH 20		users[entries[index].entryAddress]
    ADD			users[entries[index].entryAddress]
    PUSH 0		users[entries[index].entryAddress]
    SHA3			users[entries[index].entryAddress]
    PUSH 0		users[entries[index].entryAddress]
    POP			users[entries[index].entryAddress]
    PUSH 2		users[entries[index].entryAddress].nickname
    ADD			users[entries[index].entryAddress].nickname
    PUSH 0		users[entries[index].entryAddress].nickname
    POP			users[entries[index].entryAddress].nickname
    DUP1			nickName = users[entries[index].entryAddress].nickname
    SLOAD			nickName = users[entries[index].entryAddress].nickname
    PUSH 1		nickName = users[entries[index].entryAddress].nickname
    DUP2			nickName = users[entries[index].entryAddress].nickname
    PUSH 1		nickName = users[entries[index].entryAddress].nickname
    AND			nickName = users[entries[index].entryAddress].nickname
    ISZERO			nickName = users[entries[index].entryAddress].nickname
    PUSH 100		nickName = users[entries[index].entryAddress].nickname
    MUL			nickName = users[entries[index].entryAddress].nickname
    SUB			nickName = users[entries[index].entryAddress].nickname
    AND			nickName = users[entries[index].entryAddress].nickname
    PUSH 2		nickName = users[entries[index].entryAddress].nickname
    SWAP1			nickName = users[entries[index].entryAddress].nickname
    DIV			nickName = users[entries[index].entryAddress].nickname
    DUP1			nickName = users[entries[index].entryAddress].nickname
    PUSH 1F		nickName = users[entries[index].entryAddress].nickname
    ADD			nickName = users[entries[index].entryAddress].nickname
    PUSH 20		nickName = users[entries[index].entryAddress].nickname
    DUP1			nickName = users[entries[index].entryAddress].nickname
    SWAP2			nickName = users[entries[index].entryAddress].nickname
    DIV			nickName = users[entries[index].entryAddress].nickname
    MUL			nickName = users[entries[index].entryAddress].nickname
    PUSH 20		nickName = users[entries[index].entryAddress].nickname
    ADD			nickName = users[entries[index].entryAddress].nickname
    PUSH 40		nickName = users[entries[index].entryAddress].nickname
    MLOAD			nickName = users[entries[index].entryAddress].nickname
    SWAP1			nickName = users[entries[index].entryAddress].nickname
    DUP2			nickName = users[entries[index].entryAddress].nickname
    ADD			nickName = users[entries[index].entryAddress].nickname
    PUSH 40		nickName = users[entries[index].entryAddress].nickname
    MSTORE			nickName = users[entries[index].entryAddress].nickname
    DUP1			nickName = users[entries[index].entryAddress].nickname
    SWAP3			nickName = users[entries[index].entryAddress].nickname
    SWAP2			nickName = users[entries[index].entryAddress].nickname
    SWAP1			nickName = users[entries[index].entryAddress].nickname
    DUP2			nickName = users[entries[index].entryAddress].nickname
    DUP2			nickName = users[entries[index].entryAddress].nickname
    MSTORE			nickName = users[entries[index].entryAddress].nickname
    PUSH 20		nickName = users[entries[index].entryAddress].nickname
    ADD			nickName = users[entries[index].entryAddress].nickname
    DUP3			nickName = users[entries[index].entryAddress].nickname
    DUP1			nickName = users[entries[index].entryAddress].nickname
    SLOAD			nickName = users[entries[index].entryAddress].nickname
    PUSH 1		nickName = users[entries[index].entryAddress].nickname
    DUP2			nickName = users[entries[index].entryAddress].nickname
    PUSH 1		nickName = users[entries[index].entryAddress].nickname
    AND			nickName = users[entries[index].entryAddress].nickname
    ISZERO			nickName = users[entries[index].entryAddress].nickname
    PUSH 100		nickName = users[entries[index].entryAddress].nickname
    MUL			nickName = users[entries[index].entryAddress].nickname
    SUB			nickName = users[entries[index].entryAddress].nickname
    AND			nickName = users[entries[index].entryAddress].nickname
    PUSH 2		nickName = users[entries[index].entryAddress].nickname
    SWAP1			nickName = users[entries[index].entryAddress].nickname
    DIV			nickName = users[entries[index].entryAddress].nickname
    DUP1			nickName = users[entries[index].entryAddress].nickname
    ISZERO			nickName = users[entries[index].entryAddress].nickname
    PUSH [tag150]		nickName = users[entries[index].entryAddress].nickname
    JUMPI			nickName = users[entries[index].entryAddress].nickname
    DUP1			nickName = users[entries[index].entryAddress].nickname
    PUSH 1F		nickName = users[entries[index].entryAddress].nickname
    LT			nickName = users[entries[index].entryAddress].nickname
    PUSH [tag151]		nickName = users[entries[index].entryAddress].nickname
    JUMPI			nickName = users[entries[index].entryAddress].nickname
    PUSH 100		nickName = users[entries[index].entryAddress].nickname
    DUP1			nickName = users[entries[index].entryAddress].nickname
    DUP4			nickName = users[entries[index].entryAddress].nickname
    SLOAD			nickName = users[entries[index].entryAddress].nickname
    DIV			nickName = users[entries[index].entryAddress].nickname
    MUL			nickName = users[entries[index].entryAddress].nickname
    DUP4			nickName = users[entries[index].entryAddress].nickname
    MSTORE			nickName = users[entries[index].entryAddress].nickname
    SWAP2			nickName = users[entries[index].entryAddress].nickname
    PUSH 20		nickName = users[entries[index].entryAddress].nickname
    ADD			nickName = users[entries[index].entryAddress].nickname
    SWAP2			nickName = users[entries[index].entryAddress].nickname
    PUSH [tag150]		nickName = users[entries[index].entryAddress].nickname
    JUMP			nickName = users[entries[index].entryAddress].nickname
  tag151: 
    JUMPDEST		nickName = users[entries[index].entryAddress].nickname
    DUP3			nickName = users[entries[index].entryAddress].nickname
    ADD			nickName = users[entries[index].entryAddress].nickname
    SWAP2			nickName = users[entries[index].entryAddress].nickname
    SWAP1			nickName = users[entries[index].entryAddress].nickname
    PUSH 0		nickName = users[entries[index].entryAddress].nickname
    MSTORE			nickName = users[entries[index].entryAddress].nickname
    PUSH 20		nickName = users[entries[index].entryAddress].nickname
    PUSH 0		nickName = users[entries[index].entryAddress].nickname
    SHA3			nickName = users[entries[index].entryAddress].nickname
    SWAP1			nickName = users[entries[index].entryAddress].nickname
  tag152: 
    JUMPDEST		nickName = users[entries[index].entryAddress].nickname
    DUP2			nickName = users[entries[index].entryAddress].nickname
    SLOAD			nickName = users[entries[index].entryAddress].nickname
    DUP2			nickName = users[entries[index].entryAddress].nickname
    MSTORE			nickName = users[entries[index].entryAddress].nickname
    SWAP1			nickName = users[entries[index].entryAddress].nickname
    PUSH 1		nickName = users[entries[index].entryAddress].nickname
    ADD			nickName = users[entries[index].entryAddress].nickname
    SWAP1			nickName = users[entries[index].entryAddress].nickname
    PUSH 20		nickName = users[entries[index].entryAddress].nickname
    ADD			nickName = users[entries[index].entryAddress].nickname
    DUP1			nickName = users[entries[index].entryAddress].nickname
    DUP4			nickName = users[entries[index].entryAddress].nickname
    GT			nickName = users[entries[index].entryAddress].nickname
    PUSH [tag152]		nickName = users[entries[index].entryAddress].nickname
    JUMPI			nickName = users[entries[index].entryAddress].nickname
    DUP3			nickName = users[entries[index].entryAddress].nickname
    SWAP1			nickName = users[entries[index].entryAddress].nickname
    SUB			nickName = users[entries[index].entryAddress].nickname
    PUSH 1F		nickName = users[entries[index].entryAddress].nickname
    AND			nickName = users[entries[index].entryAddress].nickname
    DUP3			nickName = users[entries[index].entryAddress].nickname
    ADD			nickName = users[entries[index].entryAddress].nickname
    SWAP2			nickName = users[entries[index].entryAddress].nickname
  tag150: 
    JUMPDEST		nickName = users[entries[index].entryAddress].nickname
    POP			nickName = users[entries[index].entryAddress].nickname
    POP			nickName = users[entries[index].entryAddress].nickname
    POP			nickName = users[entries[index].entryAddress].nickname
    POP			nickName = users[entries[index].entryAddress].nickname
    POP			nickName = users[entries[index].entryAddress].nickname
    SWAP5			nickName = users[entries[index].entryAddress].nickname
    POP			nickName = users[entries[index].entryAddress].nickname
    DUP5			nickName = users[entries[index].entryAddress].nickname
    POP			nickName = users[entries[index].entryAddress].nickname
    PUSH 38D7EA4C68000		1 finney
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP9			index
    DUP2			entries[index]
    SLOAD			entries[index]
    DUP2			entries[index]
    LT			entries[index]
    ISZERO			entries[index]
    PUSH [ErrorTag]		entries[index]
    JUMPI			entries[index]
    SWAP1			entries[index]
    PUSH 0		entries[index]
    MSTORE			entries[index]
    PUSH 20		entries[index]
    PUSH 0		entries[index]
    SHA3			entries[index]
    SWAP1			entries[index]
    PUSH 4		entries[index]
    MUL			entries[index]
    ADD			entries[index]
    PUSH 0		entries[index]
  tag153: 
    JUMPDEST		entries[index]
    POP			entries[index]
    PUSH 1		entries[index].deposit
    ADD			entries[index].deposit
    PUSH 0		entries[index].deposit
    POP			entries[index].deposit
    SLOAD			entries[index].deposit
    DIV			entries[index].deposit / 1 finney
    SWAP4			deposit = entries[index].deposit / 1 finney
    POP			deposit = entries[index].deposit / 1 finney
    DUP4			deposit = entries[index].deposit / 1 finney
    POP			deposit = entries[index].deposit / 1 finney
    PUSH 38D7EA4C68000		1 finney
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP9			index
    DUP2			entries[index]
    SLOAD			entries[index]
    DUP2			entries[index]
    LT			entries[index]
    ISZERO			entries[index]
    PUSH [ErrorTag]		entries[index]
    JUMPI			entries[index]
    SWAP1			entries[index]
    PUSH 0		entries[index]
    MSTORE			entries[index]
    PUSH 20		entries[index]
    PUSH 0		entries[index]
    SHA3			entries[index]
    SWAP1			entries[index]
    PUSH 4		entries[index]
    MUL			entries[index]
    ADD			entries[index]
    PUSH 0		entries[index]
  tag154: 
    JUMPDEST		entries[index]
    POP			entries[index]
    PUSH 2		entries[index].payout
    ADD			entries[index].payout
    PUSH 0		entries[index].payout
    POP			entries[index].payout
    SLOAD			entries[index].payout
    DIV			entries[index].payout / 1 finney
    SWAP3			payout = entries[index].payout / 1 finney
    POP			payout = entries[index].payout / 1 finney
    DUP3			payout = entries[index].payout / 1 finney
    POP			payout = entries[index].payout / 1 finney
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP8			index
    DUP2			entries[index]
    SLOAD			entries[index]
    DUP2			entries[index]
    LT			entries[index]
    ISZERO			entries[index]
    PUSH [ErrorTag]		entries[index]
    JUMPI			entries[index]
    SWAP1			entries[index]
    PUSH 0		entries[index]
    MSTORE			entries[index]
    PUSH 20		entries[index]
    PUSH 0		entries[index]
    SHA3			entries[index]
    SWAP1			entries[index]
    PUSH 4		entries[index]
    MUL			entries[index]
    ADD			entries[index]
    PUSH 0		entries[index]
  tag155: 
    JUMPDEST		entries[index]
    POP			entries[index]
    PUSH 3		entries[index].tokens
    ADD			entries[index].tokens
    PUSH 0		entries[index].tokens
    POP			entries[index].tokens
    SLOAD			entries[index].tokens
    SWAP2			tokensUsed = entries[index].tokens
    POP			tokensUsed = entries[index].tokens
    DUP2			tokensUsed = entries[index].tokens
    POP			tokensUsed = entries[index].tokens
    PUSH 80		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    PUSH 40		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    MLOAD			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    SWAP1			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    DUP2			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    ADD			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    PUSH 40		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    MSTORE			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    DUP1			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    PUSH 5D		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    DUP2			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    MSTORE			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    PUSH 20		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    ADD			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    PUSH 456E74727920696E666F3A207573657220616464726573732C206E616D652C20		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    DUP2			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    MSTORE			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    PUSH 20		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    ADD			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    PUSH 6578706563746564207061796F757420696E2046696E6E657973202861707072		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    DUP2			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    MSTORE			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    PUSH 20		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    ADD			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    PUSH 6F78696D617465292C2072657363756520746F6B656E7320757365642E000000		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    DUP2			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    MSTORE			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    PUSH 20		info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    ADD			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    POP			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    SWAP1			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    POP			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    DUP1			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
    POP			info = 'Entry info: user address, name, expected payout in Finneys (approximate), rescue tokens used.'
  tag147: 
    JUMPDEST		if (index <= entries.length) {...
  tag146: 
    JUMPDEST		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP6			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    POP			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP2			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP4			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    SWAP6			function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
    JUMP	[out]		function entryDetails(uint index) constant returns (address user, string nickName, uint deposit, uint payout, uint tokensUsed, string info)...
  tag41: 
    JUMPDEST		function userId(address user) constant returns (uint id, string info) {...
    PUSH 0		uint id
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[user]
    DUP5			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user]
    AND			users[user]
    DUP2			users[user]
    MSTORE			users[user]
    PUSH 20		users[user]
    ADD			users[user]
    SWAP1			users[user]
    DUP2			users[user]
    MSTORE			users[user]
    PUSH 20		users[user]
    ADD			users[user]
    PUSH 0		users[user]
    SHA3			users[user]
    PUSH 0		users[user]
    POP			users[user]
    PUSH 0		users[user].id
    ADD			users[user].id
    PUSH 0		users[user].id
    POP			users[user].id
    SLOAD			users[user].id
    SWAP2			id = users[user].id
    POP			id = users[user].id
    DUP2			id = users[user].id
    POP			id = users[user].id
    PUSH 80		info = 'The id of the user, represents the order in which he first joined the pit.'
    PUSH 40		info = 'The id of the user, represents the order in which he first joined the pit.'
    MLOAD			info = 'The id of the user, represents the order in which he first joined the pit.'
    SWAP1			info = 'The id of the user, represents the order in which he first joined the pit.'
    DUP2			info = 'The id of the user, represents the order in which he first joined the pit.'
    ADD			info = 'The id of the user, represents the order in which he first joined the pit.'
    PUSH 40		info = 'The id of the user, represents the order in which he first joined the pit.'
    MSTORE			info = 'The id of the user, represents the order in which he first joined the pit.'
    DUP1			info = 'The id of the user, represents the order in which he first joined the pit.'
    PUSH 4A		info = 'The id of the user, represents the order in which he first joined the pit.'
    DUP2			info = 'The id of the user, represents the order in which he first joined the pit.'
    MSTORE			info = 'The id of the user, represents the order in which he first joined the pit.'
    PUSH 20		info = 'The id of the user, represents the order in which he first joined the pit.'
    ADD			info = 'The id of the user, represents the order in which he first joined the pit.'
    PUSH 546865206964206F662074686520757365722C20726570726573656E74732074		info = 'The id of the user, represents the order in which he first joined the pit.'
    DUP2			info = 'The id of the user, represents the order in which he first joined the pit.'
    MSTORE			info = 'The id of the user, represents the order in which he first joined the pit.'
    PUSH 20		info = 'The id of the user, represents the order in which he first joined the pit.'
    ADD			info = 'The id of the user, represents the order in which he first joined the pit.'
    PUSH 6865206F7264657220696E207768696368206865206669727374206A6F696E65		info = 'The id of the user, represents the order in which he first joined the pit.'
    DUP2			info = 'The id of the user, represents the order in which he first joined the pit.'
    MSTORE			info = 'The id of the user, represents the order in which he first joined the pit.'
    PUSH 20		info = 'The id of the user, represents the order in which he first joined the pit.'
    ADD			info = 'The id of the user, represents the order in which he first joined the pit.'
    PUSH 6420746865207069742E00000000000000000000000000000000000000000000		info = 'The id of the user, represents the order in which he first joined the pit.'
    DUP2			info = 'The id of the user, represents the order in which he first joined the pit.'
    MSTORE			info = 'The id of the user, represents the order in which he first joined the pit.'
    PUSH 20		info = 'The id of the user, represents the order in which he first joined the pit.'
    ADD			info = 'The id of the user, represents the order in which he first joined the pit.'
    POP			info = 'The id of the user, represents the order in which he first joined the pit.'
    SWAP1			info = 'The id of the user, represents the order in which he first joined the pit.'
    POP			info = 'The id of the user, represents the order in which he first joined the pit.'
    DUP1			info = 'The id of the user, represents the order in which he first joined the pit.'
    POP			info = 'The id of the user, represents the order in which he first joined the pit.'
  tag156: 
    JUMPDEST		function userId(address user) constant returns (uint id, string info) {...
    SWAP2			function userId(address user) constant returns (uint id, string info) {...
    POP			function userId(address user) constant returns (uint id, string info) {...
    SWAP2			function userId(address user) constant returns (uint id, string info) {...
    JUMP	[out]		function userId(address user) constant returns (uint id, string info) {...
  tag88: 
    JUMPDEST		function userTokens(address user) constant returns (uint tokens, string info) {...
    PUSH 0		uint tokens
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH 0		0x0
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user].addr != address(0x0)
    AND			users[user].addr != address(0x0)
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[user]
    DUP6			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user]
    AND			users[user]
    DUP2			users[user]
    MSTORE			users[user]
    PUSH 20		users[user]
    ADD			users[user]
    SWAP1			users[user]
    DUP2			users[user]
    MSTORE			users[user]
    PUSH 20		users[user]
    ADD			users[user]
    PUSH 0		users[user]
    SHA3			users[user]
    PUSH 0		users[user]
    POP			users[user]
    PUSH 1		users[user].addr
    ADD			users[user].addr
    PUSH 0		users[user].addr
    SWAP1			users[user].addr
    SLOAD			users[user].addr
    SWAP1			users[user].addr
    PUSH 100		users[user].addr
    EXP			users[user].addr
    SWAP1			users[user].addr
    DIV			users[user].addr
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user].addr
    AND			users[user].addr
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user].addr != address(0x0)
    AND			users[user].addr != address(0x0)
    EQ			users[user].addr != address(0x0)
    ISZERO			users[user].addr != address(0x0)
    PUSH [tag158]		users[user].addr != address(0x0) ? users[user].rescueTokens : 0
    JUMPI			users[user].addr != address(0x0) ? users[user].rescueTokens : 0
    PUSH 0		0
    PUSH [tag159]		users[user].addr != address(0x0) ? users[user].rescueTokens : 0
    JUMP			users[user].addr != address(0x0) ? users[user].rescueTokens : 0
  tag158: 
    JUMPDEST		users[user].addr != address(0x0) ? users[user].rescueTokens : 0
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[user]
    DUP5			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user]
    AND			users[user]
    DUP2			users[user]
    MSTORE			users[user]
    PUSH 20		users[user]
    ADD			users[user]
    SWAP1			users[user]
    DUP2			users[user]
    MSTORE			users[user]
    PUSH 20		users[user]
    ADD			users[user]
    PUSH 0		users[user]
    SHA3			users[user]
    PUSH 0		users[user]
    POP			users[user]
    PUSH 4		users[user].rescueTokens
    ADD			users[user].rescueTokens
    PUSH 0		users[user].rescueTokens
    POP			users[user].rescueTokens
    SLOAD			users[user].rescueTokens
  tag159: 
    JUMPDEST		users[user].addr != address(0x0) ? users[user].rescueTokens : 0
    SWAP2			tokens = users[user].addr != address(0x0) ? users[user].rescueTokens : 0
    POP			tokens = users[user].addr != address(0x0) ? users[user].rescueTokens : 0
    DUP2			tokens = users[user].addr != address(0x0) ? users[user].rescueTokens : 0
    POP			tokens = users[user].addr != address(0x0) ? users[user].rescueTokens : 0
    PUSH 100		info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    PUSH 40		info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    MLOAD			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    SWAP1			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    DUP2			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    ADD			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    PUSH 40		info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    MSTORE			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    DUP1			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    PUSH C6		info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    DUP2			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    MSTORE			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    PUSH 20		info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    ADD			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    PUSH [f0a35cb4]		info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    PUSH C6		info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    SWAP2			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    CODECOPY			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    SWAP1			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    POP			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    DUP1			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
    POP			info = 'The number of Rescue Tokens the user has. Tokens are awarded when your deposits save people, and used automatically on your next deposit. They provide a 0.1 multiplier increase per token. (+0.5 max)'
  tag157: 
    JUMPDEST		function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    POP			function userTokens(address user) constant returns (uint tokens, string info) {...
    SWAP2			function userTokens(address user) constant returns (uint tokens, string info) {...
    JUMP	[out]		function userTokens(address user) constant returns (uint tokens, string info) {...
  tag82: 
    JUMPDEST		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    PUSH 0		uint rescueCount
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH 0		0x0
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user].addr != address(0x0)
    AND			users[user].addr != address(0x0)
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[user]
    DUP6			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user]
    AND			users[user]
    DUP2			users[user]
    MSTORE			users[user]
    PUSH 20		users[user]
    ADD			users[user]
    SWAP1			users[user]
    DUP2			users[user]
    MSTORE			users[user]
    PUSH 20		users[user]
    ADD			users[user]
    PUSH 0		users[user]
    SHA3			users[user]
    PUSH 0		users[user]
    POP			users[user]
    PUSH 1		users[user].addr
    ADD			users[user].addr
    PUSH 0		users[user].addr
    SWAP1			users[user].addr
    SLOAD			users[user].addr
    SWAP1			users[user].addr
    PUSH 100		users[user].addr
    EXP			users[user].addr
    SWAP1			users[user].addr
    DIV			users[user].addr
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user].addr
    AND			users[user].addr
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user].addr != address(0x0)
    AND			users[user].addr != address(0x0)
    EQ			users[user].addr != address(0x0)
    ISZERO			users[user].addr != address(0x0)
    PUSH [tag161]		users[user].addr != address(0x0) ? users[user].rescueCount : 0
    JUMPI			users[user].addr != address(0x0) ? users[user].rescueCount : 0
    PUSH 0		0
    PUSH [tag162]		users[user].addr != address(0x0) ? users[user].rescueCount : 0
    JUMP			users[user].addr != address(0x0) ? users[user].rescueCount : 0
  tag161: 
    JUMPDEST		users[user].addr != address(0x0) ? users[user].rescueCount : 0
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[user]
    DUP5			user
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[user]
    AND			users[user]
    DUP2			users[user]
    MSTORE			users[user]
    PUSH 20		users[user]
    ADD			users[user]
    SWAP1			users[user]
    DUP2			users[user]
    MSTORE			users[user]
    PUSH 20		users[user]
    ADD			users[user]
    PUSH 0		users[user]
    SHA3			users[user]
    PUSH 0		users[user]
    POP			users[user]
    PUSH 3		users[user].rescueCount
    ADD			users[user].rescueCount
    PUSH 0		users[user].rescueCount
    POP			users[user].rescueCount
    SLOAD			users[user].rescueCount
  tag162: 
    JUMPDEST		users[user].addr != address(0x0) ? users[user].rescueCount : 0
    SWAP2			rescueCount = users[user].addr != address(0x0) ? users[user].rescueCount : 0
    POP			rescueCount = users[user].addr != address(0x0) ? users[user].rescueCount : 0
    DUP2			rescueCount = users[user].addr != address(0x0) ? users[user].rescueCount : 0
    POP			rescueCount = users[user].addr != address(0x0) ? users[user].rescueCount : 0
    PUSH 60		info = 'The number of times the user has rescued someone from the pit.'
    PUSH 40		info = 'The number of times the user has rescued someone from the pit.'
    MLOAD			info = 'The number of times the user has rescued someone from the pit.'
    SWAP1			info = 'The number of times the user has rescued someone from the pit.'
    DUP2			info = 'The number of times the user has rescued someone from the pit.'
    ADD			info = 'The number of times the user has rescued someone from the pit.'
    PUSH 40		info = 'The number of times the user has rescued someone from the pit.'
    MSTORE			info = 'The number of times the user has rescued someone from the pit.'
    DUP1			info = 'The number of times the user has rescued someone from the pit.'
    PUSH 3E		info = 'The number of times the user has rescued someone from the pit.'
    DUP2			info = 'The number of times the user has rescued someone from the pit.'
    MSTORE			info = 'The number of times the user has rescued someone from the pit.'
    PUSH 20		info = 'The number of times the user has rescued someone from the pit.'
    ADD			info = 'The number of times the user has rescued someone from the pit.'
    PUSH 546865206E756D626572206F662074696D657320746865207573657220686173		info = 'The number of times the user has rescued someone from the pit.'
    DUP2			info = 'The number of times the user has rescued someone from the pit.'
    MSTORE			info = 'The number of times the user has rescued someone from the pit.'
    PUSH 20		info = 'The number of times the user has rescued someone from the pit.'
    ADD			info = 'The number of times the user has rescued someone from the pit.'
    PUSH 207265736375656420736F6D656F6E652066726F6D20746865207069742E0000		info = 'The number of times the user has rescued someone from the pit.'
    DUP2			info = 'The number of times the user has rescued someone from the pit.'
    MSTORE			info = 'The number of times the user has rescued someone from the pit.'
    PUSH 20		info = 'The number of times the user has rescued someone from the pit.'
    ADD			info = 'The number of times the user has rescued someone from the pit.'
    POP			info = 'The number of times the user has rescued someone from the pit.'
    SWAP1			info = 'The number of times the user has rescued someone from the pit.'
    POP			info = 'The number of times the user has rescued someone from the pit.'
    DUP1			info = 'The number of times the user has rescued someone from the pit.'
    POP			info = 'The number of times the user has rescued someone from the pit.'
  tag160: 
    JUMPDEST		function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    POP			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    SWAP2			function userRescues(address user) constant returns(uint rescueCount, string info) {...
    JUMP	[out]		function userRescues(address user) constant returns(uint rescueCount, string info) {...
  tag52: 
    JUMPDEST		function userProfits() constant returns(uint profits, string info) {...
    PUSH 0		uint profits
    PUSH 20		string info
    PUSH 40		string info
    MLOAD			string info
    SWAP1			string info
    DUP2			string info
    ADD			string info
    PUSH 40		string info
    MSTORE			string info
    DUP1			string info
    PUSH 0		string info
    DUP2			string info
    MSTORE			string info
    PUSH 20		string info
    ADD			string info
    POP			string info
    PUSH 38D7EA4C68000		1 finney
    PUSH 3		usersProfits
    PUSH 0		usersProfits
    POP			usersProfits
    SLOAD			usersProfits
    DIV			usersProfits / 1 finney
    SWAP2			profits = usersProfits / 1 finney
    POP			profits = usersProfits / 1 finney
    DUP2			profits = usersProfits / 1 finney
    POP			profits = usersProfits / 1 finney
    PUSH 60		info = 'The combined earnings of all users in Finney.'
    PUSH 40		info = 'The combined earnings of all users in Finney.'
    MLOAD			info = 'The combined earnings of all users in Finney.'
    SWAP1			info = 'The combined earnings of all users in Finney.'
    DUP2			info = 'The combined earnings of all users in Finney.'
    ADD			info = 'The combined earnings of all users in Finney.'
    PUSH 40		info = 'The combined earnings of all users in Finney.'
    MSTORE			info = 'The combined earnings of all users in Finney.'
    DUP1			info = 'The combined earnings of all users in Finney.'
    PUSH 2D		info = 'The combined earnings of all users in Finney.'
    DUP2			info = 'The combined earnings of all users in Finney.'
    MSTORE			info = 'The combined earnings of all users in Finney.'
    PUSH 20		info = 'The combined earnings of all users in Finney.'
    ADD			info = 'The combined earnings of all users in Finney.'
    PUSH 54686520636F6D62696E6564206561726E696E6773206F6620616C6C20757365		info = 'The combined earnings of all users in Finney.'
    DUP2			info = 'The combined earnings of all users in Finney.'
    MSTORE			info = 'The combined earnings of all users in Finney.'
    PUSH 20		info = 'The combined earnings of all users in Finney.'
    ADD			info = 'The combined earnings of all users in Finney.'
    PUSH 727320696E2046696E6E65792E00000000000000000000000000000000000000		info = 'The combined earnings of all users in Finney.'
    DUP2			info = 'The combined earnings of all users in Finney.'
    MSTORE			info = 'The combined earnings of all users in Finney.'
    PUSH 20		info = 'The combined earnings of all users in Finney.'
    ADD			info = 'The combined earnings of all users in Finney.'
    POP			info = 'The combined earnings of all users in Finney.'
    SWAP1			info = 'The combined earnings of all users in Finney.'
    POP			info = 'The combined earnings of all users in Finney.'
    DUP1			info = 'The combined earnings of all users in Finney.'
    POP			info = 'The combined earnings of all users in Finney.'
  tag163: 
    JUMPDEST		function userProfits() constant returns(uint profits, string info) {...
    SWAP1			function userProfits() constant returns(uint profits, string info) {...
    SWAP2			function userProfits() constant returns(uint profits, string info) {...
    JUMP	[out]		function userProfits() constant returns(uint profits, string info) {...
  tag31: 
    JUMPDEST		function recycle() onlyowner...
    PUSH 0		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender == owner
    AND			msg.sender == owner
    EQ			msg.sender == owner
    ISZERO			if (msg.sender == owner) _
    PUSH [tag165]		if (msg.sender == owner) _
    JUMPI			if (msg.sender == owner) _
    PUSH 5C4900		10 weeks
    PUSH B		timeOfLastDeposit
    PUSH 0		timeOfLastDeposit
    POP			timeOfLastDeposit
    SLOAD			timeOfLastDeposit
    ADD			timeOfLastDeposit + 10 weeks
    TIMESTAMP			now
    LT			now >= timeOfLastDeposit + 10 weeks
    ISZERO			now >= timeOfLastDeposit + 10 weeks
    ISZERO			if (now >= timeOfLastDeposit + 10 weeks) ...
    PUSH [tag166]		if (now >= timeOfLastDeposit + 10 weeks) ...
    JUMPI			if (now >= timeOfLastDeposit + 10 weeks) ...
    PUSH 0		0
    PUSH 1		balance
    PUSH 0		balance
    POP			balance
    SLOAD			balance
    GT			balance > 0
    ISZERO			if (balance > 0) ...
    PUSH [tag167]		if (balance > 0) ...
    JUMPI			if (balance > 0) ...
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    PUSH 0		0
    DUP2			entries[0]
    SLOAD			entries[0]
    DUP2			entries[0]
    LT			entries[0]
    ISZERO			entries[0]
    PUSH [ErrorTag]		entries[0]
    JUMPI			entries[0]
    SWAP1			entries[0]
    PUSH 0		entries[0]
    MSTORE			entries[0]
    PUSH 20		entries[0]
    PUSH 0		entries[0]
    SHA3			entries[0]
    SWAP1			entries[0]
    PUSH 4		entries[0]
    MUL			entries[0]
    ADD			entries[0]
    PUSH 0		entries[0]
  tag168: 
    JUMPDEST		entries[0]
    POP			entries[0]
    PUSH 0		entries[0].entryAddress
    ADD			entries[0].entryAddress
    PUSH 0		entries[0].entryAddress
    SWAP1			entries[0].entryAddress
    SLOAD			entries[0].entryAddress
    SWAP1			entries[0].entryAddress
    PUSH 100		entries[0].entryAddress
    EXP			entries[0].entryAddress
    SWAP1			entries[0].entryAddress
    DIV			entries[0].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[0].entryAddress
    AND			entries[0].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[0].entryAddress.send
    AND			entries[0].entryAddress.send
    PUSH 0		entries[0].entryAddress.send(balance)
    PUSH 1		balance
    PUSH 0		balance
    POP			balance
    SLOAD			balance
    PUSH 40		entries[0].entryAddress.send(balance)
    MLOAD			entries[0].entryAddress.send(balance)
    DUP1			entries[0].entryAddress.send(balance)
    SWAP1			entries[0].entryAddress.send(balance)
    POP			entries[0].entryAddress.send(balance)
    PUSH 0		entries[0].entryAddress.send(balance)
    PUSH 40		entries[0].entryAddress.send(balance)
    MLOAD			entries[0].entryAddress.send(balance)
    DUP1			entries[0].entryAddress.send(balance)
    DUP4			entries[0].entryAddress.send(balance)
    SUB			entries[0].entryAddress.send(balance)
    DUP2			entries[0].entryAddress.send(balance)
    DUP6			entries[0].entryAddress.send(balance)
    DUP9			entries[0].entryAddress.send(balance)
    DUP9			entries[0].entryAddress.send(balance)
    CALL			entries[0].entryAddress.send(balance)
    SWAP4			entries[0].entryAddress.send(balance)
    POP			entries[0].entryAddress.send(balance)
    POP			entries[0].entryAddress.send(balance)
    POP			entries[0].entryAddress.send(balance)
    POP			entries[0].entryAddress.send(balance)
    POP			entries[0].entryAddress.send(balance)
  tag167: 
    JUMPDEST		if (balance > 0) ...
    PUSH 0		owner
    PUSH 0		owner
    SWAP1			owner
    SLOAD			owner
    SWAP1			owner
    PUSH 100		owner
    EXP			owner
    SWAP1			owner
    DIV			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		owner
    AND			owner
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		selfdestruct(owner)
    AND			selfdestruct(owner)
    SUICIDE			selfdestruct(owner)
  tag166: 
    JUMPDEST		if (now >= timeOfLastDeposit + 10 weeks) ...
  tag165: 
    JUMPDEST		if (msg.sender == owner) _
  tag164: 
    JUMPDEST		function recycle() onlyowner...
    JUMP	[out]		function recycle() onlyowner...
  tag97: 
    JUMPDEST		function jumpIn() private {...
    PUSH 0		uint dValue
    PUSH 0		uint tokensToUse
    PUSH 0		uint tokensUsed
    PUSH 0		uint randMultiplier
    PUSH 0		uint currentEntries
    PUSH 0		uint finalMultiplier
    PUSH 0		bool saviour
    PUSH 0		uint entryPayout
    PUSH 0		uint entryDeposit
    PUSH 0		uint profit
    PUSH 0		uint saviourShare
    PUSH 0		bool isHero
    PUSH 0		uint payout
    PUSH 16345785D8A0000		100 finney
    SWAP13			uint dValue = 100 finney
    POP			uint dValue = 100 finney
    PUSH 2B5E3AF16B1880000		50 ether
    CALLVALUE			msg.value
    GT			msg.value > 50 ether
    ISZERO			if (msg.value > 50 ether) {...
    PUSH [tag170]		if (msg.value > 50 ether) {...
    JUMPI			if (msg.value > 50 ether) {...
    CALLVALUE			msg.value
    PUSH 5		collectedFees
    PUSH 0		collectedFees
    POP			collectedFees
    SLOAD			collectedFees
    PUSH 1		balance
    PUSH 0		balance
    POP			balance
    SLOAD			balance
    ADD			balance + collectedFees
    ADD			balance + collectedFees + msg.value
    ADDRESS			this
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		this.balance
    AND			this.balance
    BALANCE			this.balance
    LT			this.balance >= balance + collectedFees + msg.value
    ISZERO			this.balance >= balance + collectedFees + msg.value
    ISZERO			if (this.balance >= balance + collectedFees + msg.value)...
    PUSH [tag171]		if (this.balance >= balance + collectedFees + msg.value)...
    JUMPI			if (this.balance >= balance + collectedFees + msg.value)...
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender.send
    AND			msg.sender.send
    PUSH 0		msg.sender.send(msg.value - 50 ether)
    PUSH 2B5E3AF16B1880000		50 ether
    CALLVALUE			msg.value
    SUB			msg.value - 50 ether
    PUSH 40		msg.sender.send(msg.value - 50 ether)
    MLOAD			msg.sender.send(msg.value - 50 ether)
    DUP1			msg.sender.send(msg.value - 50 ether)
    SWAP1			msg.sender.send(msg.value - 50 ether)
    POP			msg.sender.send(msg.value - 50 ether)
    PUSH 0		msg.sender.send(msg.value - 50 ether)
    PUSH 40		msg.sender.send(msg.value - 50 ether)
    MLOAD			msg.sender.send(msg.value - 50 ether)
    DUP1			msg.sender.send(msg.value - 50 ether)
    DUP4			msg.sender.send(msg.value - 50 ether)
    SUB			msg.sender.send(msg.value - 50 ether)
    DUP2			msg.sender.send(msg.value - 50 ether)
    DUP6			msg.sender.send(msg.value - 50 ether)
    DUP9			msg.sender.send(msg.value - 50 ether)
    DUP9			msg.sender.send(msg.value - 50 ether)
    CALL			msg.sender.send(msg.value - 50 ether)
    SWAP4			msg.sender.send(msg.value - 50 ether)
    POP			msg.sender.send(msg.value - 50 ether)
    POP			msg.sender.send(msg.value - 50 ether)
    POP			msg.sender.send(msg.value - 50 ether)
    POP			msg.sender.send(msg.value - 50 ether)
    POP			msg.sender.send(msg.value - 50 ether)
  tag171: 
    JUMPDEST		if (this.balance >= balance + collectedFees + msg.value)...
    PUSH 2B5E3AF16B1880000		50 ether
    SWAP13			dValue = 50 ether
    POP			dValue = 50 ether
    DUP13			dValue = 50 ether
    POP			dValue = 50 ether
    PUSH [tag172]		if (msg.value > 50 ether) {...
    JUMP			if (msg.value > 50 ether) {...
  tag170: 
    JUMPDEST		if (msg.value > 50 ether) {...
    CALLVALUE			msg.value
    SWAP13			dValue = msg.value
    POP			dValue = msg.value
    DUP13			dValue = msg.value
    POP			dValue = msg.value
  tag172: 
    JUMPDEST		if (msg.value > 50 ether) {...
    PUSH [tag173]		addNewUser(msg.sender)
    CALLER			msg.sender
    PUSH [tag118]		addNewUser
    JUMP	[in]		addNewUser(msg.sender)
  tag173: 
    JUMPDEST		addNewUser(msg.sender)
    PUSH 5		5
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender]
    AND			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    SWAP1			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    PUSH 0		users[msg.sender]
    SHA3			users[msg.sender]
    PUSH 0		users[msg.sender]
    POP			users[msg.sender]
    PUSH 4		users[msg.sender].rescueTokens
    ADD			users[msg.sender].rescueTokens
    PUSH 0		users[msg.sender].rescueTokens
    POP			users[msg.sender].rescueTokens
    SLOAD			users[msg.sender].rescueTokens
    LT			users[msg.sender].rescueTokens >= 5
    ISZERO			users[msg.sender].rescueTokens >= 5
    PUSH [tag174]		users[msg.sender].rescueTokens >= 5 ? 5 : users[msg.sender].rescueTokens
    JUMPI			users[msg.sender].rescueTokens >= 5 ? 5 : users[msg.sender].rescueTokens
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender]
    AND			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    SWAP1			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    PUSH 0		users[msg.sender]
    SHA3			users[msg.sender]
    PUSH 0		users[msg.sender]
    POP			users[msg.sender]
    PUSH 4		users[msg.sender].rescueTokens
    ADD			users[msg.sender].rescueTokens
    PUSH 0		users[msg.sender].rescueTokens
    POP			users[msg.sender].rescueTokens
    SLOAD			users[msg.sender].rescueTokens
    PUSH [tag175]		users[msg.sender].rescueTokens >= 5 ? 5 : users[msg.sender].rescueTokens
    JUMP			users[msg.sender].rescueTokens >= 5 ? 5 : users[msg.sender].rescueTokens
  tag174: 
    JUMPDEST		users[msg.sender].rescueTokens >= 5 ? 5 : users[msg.sender].rescueTokens
    PUSH 5		5
  tag175: 
    JUMPDEST		users[msg.sender].rescueTokens >= 5 ? 5 : users[msg.sender].rescueTokens
    SWAP12			uint tokensToUse = users[msg.sender].rescueTokens >= 5 ? 5 : users[msg.sender].rescueTokens
    POP			uint tokensToUse = users[msg.sender].rescueTokens >= 5 ? 5 : users[msg.sender].rescueTokens
    PUSH 0		0
    SWAP11			uint tokensUsed = 0
    POP			uint tokensUsed = 0
    PUSH [tag176]		rand(50)
    PUSH 32		50
    PUSH [tag177]		rand
    JUMP	[in]		rand(50)
  tag176: 
    JUMPDEST		rand(50)
    SWAP10			uint randMultiplier = rand(50)
    POP			uint randMultiplier = rand(50)
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    POP			payoutOrder
    SLOAD			payoutOrder
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP1			entries.length
    SLOAD			entries.length
    SWAP1			entries.length
    POP			entries.length
    SUB			entries.length - payoutOrder
    SWAP9			uint currentEntries = entries.length - payoutOrder
    POP			uint currentEntries = entries.length - payoutOrder
    PUSH F		15
    DUP10			currentEntries
    GT			currentEntries > 15
    PUSH [tag178]		currentEntries > 15 ? (randMultiplier / 2) : randMultiplier
    JUMPI			currentEntries > 15 ? (randMultiplier / 2) : randMultiplier
    DUP10			randMultiplier
    PUSH [tag179]		currentEntries > 15 ? (randMultiplier / 2) : randMultiplier
    JUMP			currentEntries > 15 ? (randMultiplier / 2) : randMultiplier
  tag178: 
    JUMPDEST		currentEntries > 15 ? (randMultiplier / 2) : randMultiplier
    PUSH 2		2
    DUP11			randMultiplier
    DIV			randMultiplier / 2
  tag179: 
    JUMPDEST		currentEntries > 15 ? (randMultiplier / 2) : randMultiplier
    SWAP10			randMultiplier = currentEntries > 15 ? (randMultiplier / 2) : randMultiplier
    POP			randMultiplier = currentEntries > 15 ? (randMultiplier / 2) : randMultiplier
    DUP10			randMultiplier = currentEntries > 15 ? (randMultiplier / 2) : randMultiplier
    POP			randMultiplier = currentEntries > 15 ? (randMultiplier / 2) : randMultiplier
    PUSH 19		25
    DUP10			currentEntries
    GT			currentEntries > 25
    PUSH [tag180]		currentEntries > 25 ? 0 : randMultiplier
    JUMPI			currentEntries > 25 ? 0 : randMultiplier
    DUP10			randMultiplier
    PUSH [tag181]		currentEntries > 25 ? 0 : randMultiplier
    JUMP			currentEntries > 25 ? 0 : randMultiplier
  tag180: 
    JUMPDEST		currentEntries > 25 ? 0 : randMultiplier
    PUSH 0		0
  tag181: 
    JUMPDEST		currentEntries > 25 ? 0 : randMultiplier
    SWAP10			randMultiplier = currentEntries > 25 ? 0 : randMultiplier
    POP			randMultiplier = currentEntries > 25 ? 0 : randMultiplier
    DUP10			randMultiplier = currentEntries > 25 ? 0 : randMultiplier
    POP			randMultiplier = currentEntries > 25 ? 0 : randMultiplier
    PUSH 5		5
    DUP10			currentEntries
    GT			currentEntries <= 5
    ISZERO			currentEntries <= 5
    DUP1			currentEntries <= 5 && dValue <= 20
    ISZERO			currentEntries <= 5 && dValue <= 20
    PUSH [tag182]		currentEntries <= 5 && dValue <= 20
    JUMPI			currentEntries <= 5 && dValue <= 20
    POP			currentEntries <= 5 && dValue <= 20
    PUSH 14		20
    DUP14			dValue
    GT			dValue <= 20
    ISZERO			dValue <= 20
  tag182: 
    JUMPDEST		currentEntries <= 5 && dValue <= 20
    PUSH [tag183]		currentEntries <= 5 && dValue <= 20 ? randMultiplier * 3 / 2 : randMultiplier
    JUMPI			currentEntries <= 5 && dValue <= 20 ? randMultiplier * 3 / 2 : randMultiplier
    DUP10			randMultiplier
    PUSH [tag184]		currentEntries <= 5 && dValue <= 20 ? randMultiplier * 3 / 2 : randMultiplier
    JUMP			currentEntries <= 5 && dValue <= 20 ? randMultiplier * 3 / 2 : randMultiplier
  tag183: 
    JUMPDEST		currentEntries <= 5 && dValue <= 20 ? randMultiplier * 3 / 2 : randMultiplier
    PUSH 2		2
    PUSH 3		3
    DUP12			randMultiplier
    MUL			randMultiplier * 3
    DIV			randMultiplier * 3 / 2
  tag184: 
    JUMPDEST		currentEntries <= 5 && dValue <= 20 ? randMultiplier * 3 / 2 : randMultiplier
    SWAP10			randMultiplier = currentEntries <= 5 && dValue <= 20 ? randMultiplier * 3 / 2 : randMultiplier
    POP			randMultiplier = currentEntries <= 5 && dValue <= 20 ? randMultiplier * 3 / 2 : randMultiplier
    DUP10			randMultiplier = currentEntries <= 5 && dValue <= 20 ? randMultiplier * 3 / 2 : randMultiplier
    POP			randMultiplier = currentEntries <= 5 && dValue <= 20 ? randMultiplier * 3 / 2 : randMultiplier
  tag185: 
    JUMPDEST		while (tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier)...
    PUSH 0		0
    DUP13			tokensToUse
    GT			tokensToUse > 0
    DUP1			tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier
    ISZERO			tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier
    PUSH [tag187]		tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier
    JUMPI			tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier
    POP			tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier
    PUSH 8		maxMultiplier
    PUSH 0		maxMultiplier
    POP			maxMultiplier
    SLOAD			maxMultiplier
    PUSH A		10
    DUP13			tokensUsed
    MUL			tokensUsed*10
    DUP12			randMultiplier
    PUSH 7		baseMultiplier
    PUSH 0		baseMultiplier
    POP			baseMultiplier
    SLOAD			baseMultiplier
    ADD			baseMultiplier + randMultiplier
    ADD			baseMultiplier + randMultiplier + tokensUsed*10
    LT			(baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier
  tag187: 
    JUMPDEST		tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier
    ISZERO			while (tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier)...
    PUSH [tag186]		while (tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier)...
    JUMPI			while (tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier)...
    DUP12			tokensToUse--
    DUP1			tokensToUse--
    PUSH 1		tokensToUse--
    SWAP1			tokensToUse--
    SUB			tokensToUse--
    SWAP13			tokensToUse--
    POP			tokensToUse--
    POP			tokensToUse--
    DUP11			tokensUsed++
    DUP1			tokensUsed++
    PUSH 1		tokensUsed++
    ADD			tokensUsed++
    SWAP12			tokensUsed++
    POP			tokensUsed++
    POP			tokensUsed++
    PUSH [tag185]		while (tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier)...
    JUMP			while (tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier)...
  tag186: 
    JUMPDEST		while (tokensToUse > 0 && (baseMultiplier + randMultiplier + tokensUsed*10) < maxMultiplier)...
    PUSH A		10
    DUP12			tokensUsed
    MUL			tokensUsed*10
    DUP11			randMultiplier
    PUSH 7		baseMultiplier
    PUSH 0		baseMultiplier
    POP			baseMultiplier
    SLOAD			baseMultiplier
    ADD			baseMultiplier + randMultiplier
    ADD			baseMultiplier + randMultiplier + tokensUsed*10
    SWAP8			uint finalMultiplier = (baseMultiplier + randMultiplier + tokensUsed*10)
    POP			uint finalMultiplier = (baseMultiplier + randMultiplier + tokensUsed*10)
    PUSH 8		maxMultiplier
    PUSH 0		maxMultiplier
    POP			maxMultiplier
    SLOAD			maxMultiplier
    DUP9			finalMultiplier
    GT			finalMultiplier > maxMultiplier
    ISZERO			if (finalMultiplier > maxMultiplier)...
    PUSH [tag188]		if (finalMultiplier > maxMultiplier)...
    JUMPI			if (finalMultiplier > maxMultiplier)...
    PUSH 8		maxMultiplier
    PUSH 0		maxMultiplier
    POP			maxMultiplier
    SLOAD			maxMultiplier
    SWAP8			finalMultiplier = maxMultiplier
    POP			finalMultiplier = maxMultiplier
    DUP8			finalMultiplier = maxMultiplier
    POP			finalMultiplier = maxMultiplier
  tag188: 
    JUMPDEST		if (finalMultiplier > maxMultiplier)...
    PUSH 2B5E3AF16B1880000		50 ether
    CALLVALUE			msg.value
    LT			msg.value < 50 ether
    ISZERO			if (msg.value < 50 ether)...
    PUSH [tag189]		if (msg.value < 50 ether)...
    JUMPI			if (msg.value < 50 ether)...
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SLOAD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 1		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SLOAD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP4			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ISZERO			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    GT			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag190]		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    JUMPI			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 4		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 4		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP4			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 20		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SHA3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag191]		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag192]		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    JUMP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
  tag192: 
    JUMPDEST		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    GT			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ISZERO			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag193]		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    JUMPI			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 100		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    EXP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SLOAD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    NOT			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    AND			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 1		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 2		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 3		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 1		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag192]		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    JUMP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
  tag193: 
    JUMPDEST		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    JUMP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
  tag191: 
    JUMPDEST		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
  tag190: 
    JUMPDEST		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 20		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SHA3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 4		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
  tag194: 
    JUMPDEST		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 80		Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    PUSH 40		Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    MLOAD			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    SWAP1			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    DUP2			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    ADD			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    PUSH 40		Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    MSTORE			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    DUP1			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    CALLER			msg.sender
    DUP2			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    MSTORE			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    PUSH 20		Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    ADD			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    CALLVALUE			msg.value
    DUP2			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    MSTORE			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    PUSH 20		Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    ADD			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    PUSH 64		100
    DUP14			finalMultiplier
    CALLVALUE			msg.value
    MUL			msg.value * (finalMultiplier)
    DIV			msg.value * (finalMultiplier) / 100
    DUP2			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    MSTORE			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    PUSH 20		Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    ADD			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    DUP16			tokensUsed
    DUP2			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    MSTORE			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    PUSH 20		Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    ADD			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    POP			Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed)
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MLOAD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 100		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    EXP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SLOAD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    NOT			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    AND			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP4			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    OR			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 20		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MLOAD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 1		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 40		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MLOAD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 2		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 60		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    MLOAD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 3		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag195]		if (msg.value < 50 ether)...
    JUMP			if (msg.value < 50 ether)...
  tag189: 
    JUMPDEST		if (msg.value < 50 ether)...
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    DUP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SLOAD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 1		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SLOAD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP4			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ISZERO			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    GT			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag196]		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    JUMPI			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 4		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 4		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP4			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 20		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SHA3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag197]		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag198]		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    JUMP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
  tag198: 
    JUMPDEST		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    GT			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ISZERO			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag199]		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    JUMPI			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 100		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    EXP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SLOAD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    NOT			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    AND			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 1		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 2		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 3		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 1		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH [tag198]		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    JUMP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
  tag199: 
    JUMPDEST		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    JUMP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
  tag197: 
    JUMPDEST		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
  tag196: 
    JUMPDEST		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 20		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SHA3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 4		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
  tag200: 
    JUMPDEST		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 80		Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    PUSH 40		Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    MLOAD			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    SWAP1			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    DUP2			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    ADD			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    PUSH 40		Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    MSTORE			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    DUP1			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    CALLER			msg.sender
    DUP2			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    MSTORE			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    PUSH 20		Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    ADD			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    PUSH 2B5E3AF16B1880000		50 ether
    DUP2			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    MSTORE			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    PUSH 20		Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    ADD			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    PUSH 64		100
    DUP14			finalMultiplier
    PUSH 2B5E3AF16B1880000		50 ether
    MUL			(50 ether) * (finalMultiplier)
    DIV			(50 ether) * (finalMultiplier) / 100
    DUP2			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    MSTORE			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    PUSH 20		Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    ADD			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    DUP16			tokensUsed
    DUP2			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    MSTORE			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    PUSH 20		Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    ADD			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    POP			Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed)
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MLOAD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 100		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    EXP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SLOAD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    NOT			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    AND			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP4			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MUL			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    OR			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SWAP1			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 20		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MLOAD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 1		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 40		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MLOAD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 2		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 60		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP3			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    MLOAD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    DUP2			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 3		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    ADD			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    PUSH 0		entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    SSTORE			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
    POP			entries.push(Entry(msg.sender, 50 ether,((50 ether) * (finalMultiplier) / 100), tokensUsed))
  tag195: 
    JUMPDEST		if (msg.value < 50 ether)...
    PUSH 2B5E3AF16B1880000		50 ether
    CALLVALUE			msg.value
    LT			msg.value < 50 ether
    ISZERO			if (msg.value < 50 ether)...
    PUSH [tag201]		if (msg.value < 50 ether)...
    JUMPI			if (msg.value < 50 ether)...
    PUSH CA4E02D083FDC38F30E3BF25CDB5448DD6FBC3F0928ADB34763644B1A9CB2C90		Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    CALLER			msg.sender
    CALLVALUE			msg.value
    PUSH 64		100
    DUP12			finalMultiplier
    CALLVALUE			msg.value
    MUL			msg.value * (finalMultiplier)
    DIV			msg.value * (finalMultiplier) / 100
    PUSH 40		Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    MLOAD			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    DUP1			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    DUP5			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    AND			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    DUP2			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    MSTORE			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    PUSH 20		Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    ADD			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    DUP4			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    DUP2			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    MSTORE			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    PUSH 20		Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    ADD			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    DUP3			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    DUP2			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    MSTORE			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    PUSH 20		Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    ADD			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    SWAP4			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    POP			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    POP			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    POP			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    POP			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    PUSH 40		Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    MLOAD			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    DUP1			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    SWAP2			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    SUB			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    SWAP1			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    LOG1			Jump(msg.sender, msg.value, (msg.value * (finalMultiplier) / 100))
    PUSH [tag202]		if (msg.value < 50 ether)...
    JUMP			if (msg.value < 50 ether)...
  tag201: 
    JUMPDEST		if (msg.value < 50 ether)...
    PUSH CA4E02D083FDC38F30E3BF25CDB5448DD6FBC3F0928ADB34763644B1A9CB2C90		Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    CALLER			msg.sender
    PUSH 2B5E3AF16B1880000		50 ether
    PUSH 64		100
    DUP12			finalMultiplier
    PUSH 2B5E3AF16B1880000		50 ether
    MUL			(50 ether) * (finalMultiplier)
    DIV			(50 ether) * (finalMultiplier) / 100
    PUSH 40		Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    MLOAD			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    DUP1			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    DUP5			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    AND			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    DUP2			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    MSTORE			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    PUSH 20		Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    ADD			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    DUP4			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    DUP2			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    MSTORE			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    PUSH 20		Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    ADD			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    DUP3			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    DUP2			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    MSTORE			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    PUSH 20		Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    ADD			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    SWAP4			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    POP			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    POP			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    POP			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    POP			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    PUSH 40		Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    MLOAD			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    DUP1			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    SWAP2			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    SUB			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    SWAP1			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
    LOG1			Jump(msg.sender, 50 ether, ((50 ether) * (finalMultiplier) / 100))
  tag202: 
    JUMPDEST		if (msg.value < 50 ether)...
    DUP11			tokensUsed
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender]
    AND			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    SWAP1			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    PUSH 0		users[msg.sender]
    SHA3			users[msg.sender]
    PUSH 0		users[msg.sender]
    POP			users[msg.sender]
    PUSH 4		users[msg.sender].rescueTokens
    ADD			users[msg.sender].rescueTokens
    PUSH 0		users[msg.sender].rescueTokens
    DUP3			users[msg.sender].rescueTokens -= tokensUsed
    DUP3			users[msg.sender].rescueTokens -= tokensUsed
    DUP3			users[msg.sender].rescueTokens -= tokensUsed
    POP			users[msg.sender].rescueTokens -= tokensUsed
    SLOAD			users[msg.sender].rescueTokens -= tokensUsed
    SUB			users[msg.sender].rescueTokens -= tokensUsed
    SWAP3			users[msg.sender].rescueTokens -= tokensUsed
    POP			users[msg.sender].rescueTokens -= tokensUsed
    POP			users[msg.sender].rescueTokens -= tokensUsed
    DUP2			users[msg.sender].rescueTokens -= tokensUsed
    SWAP1			users[msg.sender].rescueTokens -= tokensUsed
    SSTORE			users[msg.sender].rescueTokens -= tokensUsed
    POP			users[msg.sender].rescueTokens -= tokensUsed
    PUSH 64		100
    PUSH 6		jumpFee
    PUSH 0		jumpFee
    POP			jumpFee
    SLOAD			jumpFee
    PUSH 64		100
    SUB			100 - jumpFee
    DUP15			dValue
    MUL			dValue * (100 - jumpFee)
    DIV			(dValue * (100 - jumpFee)) / 100
    PUSH 1		balance
    PUSH 0		balance
    DUP3			balance += (dValue * (100 - jumpFee)) / 100
    DUP3			balance += (dValue * (100 - jumpFee)) / 100
    DUP3			balance += (dValue * (100 - jumpFee)) / 100
    POP			balance += (dValue * (100 - jumpFee)) / 100
    SLOAD			balance += (dValue * (100 - jumpFee)) / 100
    ADD			balance += (dValue * (100 - jumpFee)) / 100
    SWAP3			balance += (dValue * (100 - jumpFee)) / 100
    POP			balance += (dValue * (100 - jumpFee)) / 100
    POP			balance += (dValue * (100 - jumpFee)) / 100
    DUP2			balance += (dValue * (100 - jumpFee)) / 100
    SWAP1			balance += (dValue * (100 - jumpFee)) / 100
    SSTORE			balance += (dValue * (100 - jumpFee)) / 100
    POP			balance += (dValue * (100 - jumpFee)) / 100
    PUSH 64		100
    PUSH 6		jumpFee
    PUSH 0		jumpFee
    POP			jumpFee
    SLOAD			jumpFee
    DUP15			dValue
    MUL			dValue * jumpFee
    DIV			(dValue * jumpFee) / 100
    PUSH 5		collectedFees
    PUSH 0		collectedFees
    DUP3			collectedFees += (dValue * jumpFee) / 100
    DUP3			collectedFees += (dValue * jumpFee) / 100
    DUP3			collectedFees += (dValue * jumpFee) / 100
    POP			collectedFees += (dValue * jumpFee) / 100
    SLOAD			collectedFees += (dValue * jumpFee) / 100
    ADD			collectedFees += (dValue * jumpFee) / 100
    SWAP3			collectedFees += (dValue * jumpFee) / 100
    POP			collectedFees += (dValue * jumpFee) / 100
    POP			collectedFees += (dValue * jumpFee) / 100
    DUP2			collectedFees += (dValue * jumpFee) / 100
    SWAP1			collectedFees += (dValue * jumpFee) / 100
    SSTORE			collectedFees += (dValue * jumpFee) / 100
    POP			collectedFees += (dValue * jumpFee) / 100
    PUSH 0		false
    SWAP7			bool saviour = false
    POP			bool saviour = false
  tag203: 
    JUMPDEST		while (balance > entries[payoutOrder].payout) {...
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    POP			payoutOrder
    SLOAD			payoutOrder
    DUP2			entries[payoutOrder]
    SLOAD			entries[payoutOrder]
    DUP2			entries[payoutOrder]
    LT			entries[payoutOrder]
    ISZERO			entries[payoutOrder]
    PUSH [ErrorTag]		entries[payoutOrder]
    JUMPI			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    MSTORE			entries[payoutOrder]
    PUSH 20		entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    SHA3			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 4		entries[payoutOrder]
    MUL			entries[payoutOrder]
    ADD			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
  tag205: 
    JUMPDEST		entries[payoutOrder]
    POP			entries[payoutOrder]
    PUSH 2		entries[payoutOrder].payout
    ADD			entries[payoutOrder].payout
    PUSH 0		entries[payoutOrder].payout
    POP			entries[payoutOrder].payout
    SLOAD			entries[payoutOrder].payout
    PUSH 1		balance
    PUSH 0		balance
    POP			balance
    SLOAD			balance
    GT			balance > entries[payoutOrder].payout
    ISZERO			while (balance > entries[payoutOrder].payout) {...
    PUSH [tag204]		while (balance > entries[payoutOrder].payout) {...
    JUMPI			while (balance > entries[payoutOrder].payout) {...
    PUSH 0		false
    SWAP7			saviour = false
    POP			saviour = false
    DUP7			saviour = false
    POP			saviour = false
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    POP			payoutOrder
    SLOAD			payoutOrder
    DUP2			entries[payoutOrder]
    SLOAD			entries[payoutOrder]
    DUP2			entries[payoutOrder]
    LT			entries[payoutOrder]
    ISZERO			entries[payoutOrder]
    PUSH [ErrorTag]		entries[payoutOrder]
    JUMPI			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    MSTORE			entries[payoutOrder]
    PUSH 20		entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    SHA3			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 4		entries[payoutOrder]
    MUL			entries[payoutOrder]
    ADD			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
  tag206: 
    JUMPDEST		entries[payoutOrder]
    POP			entries[payoutOrder]
    PUSH 2		entries[payoutOrder].payout
    ADD			entries[payoutOrder].payout
    PUSH 0		entries[payoutOrder].payout
    POP			entries[payoutOrder].payout
    SLOAD			entries[payoutOrder].payout
    SWAP6			uint entryPayout = entries[payoutOrder].payout
    POP			uint entryPayout = entries[payoutOrder].payout
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    POP			payoutOrder
    SLOAD			payoutOrder
    DUP2			entries[payoutOrder]
    SLOAD			entries[payoutOrder]
    DUP2			entries[payoutOrder]
    LT			entries[payoutOrder]
    ISZERO			entries[payoutOrder]
    PUSH [ErrorTag]		entries[payoutOrder]
    JUMPI			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    MSTORE			entries[payoutOrder]
    PUSH 20		entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    SHA3			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 4		entries[payoutOrder]
    MUL			entries[payoutOrder]
    ADD			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
  tag207: 
    JUMPDEST		entries[payoutOrder]
    POP			entries[payoutOrder]
    PUSH 1		entries[payoutOrder].deposit
    ADD			entries[payoutOrder].deposit
    PUSH 0		entries[payoutOrder].deposit
    POP			entries[payoutOrder].deposit
    SLOAD			entries[payoutOrder].deposit
    SWAP5			uint entryDeposit = entries[payoutOrder].deposit
    POP			uint entryDeposit = entries[payoutOrder].deposit
    DUP5			entryDeposit
    DUP7			entryPayout
    SUB			entryPayout - entryDeposit
    SWAP4			uint profit = entryPayout - entryDeposit
    POP			uint profit = entryPayout - entryDeposit
    PUSH 0		0
    SWAP3			uint saviourShare = 0
    POP			uint saviourShare = 0
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    POP			payoutOrder
    SLOAD			payoutOrder
    DUP2			entries[payoutOrder]
    SLOAD			entries[payoutOrder]
    DUP2			entries[payoutOrder]
    LT			entries[payoutOrder]
    ISZERO			entries[payoutOrder]
    PUSH [ErrorTag]		entries[payoutOrder]
    JUMPI			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    MSTORE			entries[payoutOrder]
    PUSH 20		entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    SHA3			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 4		entries[payoutOrder]
    MUL			entries[payoutOrder]
    ADD			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
  tag208: 
    JUMPDEST		entries[payoutOrder]
    POP			entries[payoutOrder]
    PUSH 0		entries[payoutOrder].entryAddress
    ADD			entries[payoutOrder].entryAddress
    PUSH 0		entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    SLOAD			entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    PUSH 100		entries[payoutOrder].entryAddress
    EXP			entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    DIV			entries[payoutOrder].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[payoutOrder].entryAddress
    AND			entries[payoutOrder].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender].addr != entries[payoutOrder].entryAddress
    AND			users[msg.sender].addr != entries[payoutOrder].entryAddress
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender]
    AND			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    SWAP1			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    PUSH 0		users[msg.sender]
    SHA3			users[msg.sender]
    PUSH 0		users[msg.sender]
    POP			users[msg.sender]
    PUSH 1		users[msg.sender].addr
    ADD			users[msg.sender].addr
    PUSH 0		users[msg.sender].addr
    SWAP1			users[msg.sender].addr
    SLOAD			users[msg.sender].addr
    SWAP1			users[msg.sender].addr
    PUSH 100		users[msg.sender].addr
    EXP			users[msg.sender].addr
    SWAP1			users[msg.sender].addr
    DIV			users[msg.sender].addr
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender].addr
    AND			users[msg.sender].addr
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender].addr != entries[payoutOrder].entryAddress
    AND			users[msg.sender].addr != entries[payoutOrder].entryAddress
    EQ			users[msg.sender].addr != entries[payoutOrder].entryAddress
    ISZERO			users[msg.sender].addr != entries[payoutOrder].entryAddress
    ISZERO			if (users[msg.sender].addr != entries[payoutOrder].entryAddress)...
    PUSH [tag209]		if (users[msg.sender].addr != entries[payoutOrder].entryAddress)...
    JUMPI			if (users[msg.sender].addr != entries[payoutOrder].entryAddress)...
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender]
    AND			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    SWAP1			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    PUSH 0		users[msg.sender]
    SHA3			users[msg.sender]
    PUSH 0		users[msg.sender]
    POP			users[msg.sender]
    PUSH 3		users[msg.sender].rescueCount
    ADD			users[msg.sender].rescueCount
    PUSH 0		users[msg.sender].rescueCount
    DUP2			users[msg.sender].rescueCount++
    DUP2			users[msg.sender].rescueCount++
    POP			users[msg.sender].rescueCount++
    SLOAD			users[msg.sender].rescueCount++
    DUP1			users[msg.sender].rescueCount++
    SWAP3			users[msg.sender].rescueCount++
    SWAP2			users[msg.sender].rescueCount++
    SWAP1			users[msg.sender].rescueCount++
    PUSH 1		users[msg.sender].rescueCount++
    ADD			users[msg.sender].rescueCount++
    SWAP2			users[msg.sender].rescueCount++
    SWAP1			users[msg.sender].rescueCount++
    POP			users[msg.sender].rescueCount++
    SSTORE			users[msg.sender].rescueCount++
    POP			users[msg.sender].rescueCount++
    PUSH DE0B6B3A7640000		1 ether
    DUP6			entryDeposit
    LT			entryDeposit >= 1 ether
    ISZERO			entryDeposit >= 1 ether
    ISZERO			if (entryDeposit >= 1 ether) {...
    PUSH [tag210]		if (entryDeposit >= 1 ether) {...
    JUMPI			if (entryDeposit >= 1 ether) {...
    PUSH 14		20
    DUP14			dValue
    LT			dValue < 20
    DUP1			dValue < 20 || currentEntries < 15
    PUSH [tag211]		dValue < 20 || currentEntries < 15
    JUMPI			dValue < 20 || currentEntries < 15
    POP			dValue < 20 || currentEntries < 15
    PUSH F		15
    DUP10			currentEntries
    LT			currentEntries < 15
  tag211: 
    JUMPDEST		dValue < 20 || currentEntries < 15
    PUSH [tag212]		dValue < 20 || currentEntries < 15 ? 1 : 2
    JUMPI			dValue < 20 || currentEntries < 15 ? 1 : 2
    PUSH 2		2
    PUSH [tag213]		dValue < 20 || currentEntries < 15 ? 1 : 2
    JUMP			dValue < 20 || currentEntries < 15 ? 1 : 2
  tag212: 
    JUMPDEST		dValue < 20 || currentEntries < 15 ? 1 : 2
    PUSH 1		1
  tag213: 
    JUMPDEST		dValue < 20 || currentEntries < 15 ? 1 : 2
    PUSH FF		users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    AND			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender]
    AND			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    SWAP1			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    PUSH 0		users[msg.sender]
    SHA3			users[msg.sender]
    PUSH 0		users[msg.sender]
    POP			users[msg.sender]
    PUSH 4		users[msg.sender].rescueTokens
    ADD			users[msg.sender].rescueTokens
    PUSH 0		users[msg.sender].rescueTokens
    DUP3			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    DUP3			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    DUP3			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    POP			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    SLOAD			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    ADD			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    SWAP3			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    POP			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    POP			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    DUP2			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    SWAP1			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    SSTORE			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    POP			users[msg.sender].rescueTokens += dValue < 20 || currentEntries < 15 ? 1 : 2
    PUSH 28		40
    DUP14			dValue
    LT			dValue < 40
    DUP1			dValue < 40 || currentEntries < 25
    PUSH [tag214]		dValue < 40 || currentEntries < 25
    JUMPI			dValue < 40 || currentEntries < 25
    POP			dValue < 40 || currentEntries < 25
    PUSH 19		25
    DUP10			currentEntries
    LT			currentEntries < 25
  tag214: 
    JUMPDEST		dValue < 40 || currentEntries < 25
    PUSH [tag215]		dValue < 40 || currentEntries < 25 ? 0 : 1
    JUMPI			dValue < 40 || currentEntries < 25 ? 0 : 1
    PUSH 1		1
    PUSH [tag216]		dValue < 40 || currentEntries < 25 ? 0 : 1
    JUMP			dValue < 40 || currentEntries < 25 ? 0 : 1
  tag215: 
    JUMPDEST		dValue < 40 || currentEntries < 25 ? 0 : 1
    PUSH 0		0
  tag216: 
    JUMPDEST		dValue < 40 || currentEntries < 25 ? 0 : 1
    PUSH FF		users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    AND			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender]
    AND			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    SWAP1			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    PUSH 0		users[msg.sender]
    SHA3			users[msg.sender]
    PUSH 0		users[msg.sender]
    POP			users[msg.sender]
    PUSH 4		users[msg.sender].rescueTokens
    ADD			users[msg.sender].rescueTokens
    PUSH 0		users[msg.sender].rescueTokens
    DUP3			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    DUP3			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    DUP3			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    POP			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    SLOAD			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    ADD			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    SWAP3			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    POP			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    POP			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    DUP2			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    SWAP1			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    SSTORE			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
    POP			users[msg.sender].rescueTokens += dValue < 40 || currentEntries < 25 ? 0 : 1
  tag210: 
    JUMPDEST		if (entryDeposit >= 1 ether) {...
    PUSH 1		true
    SWAP7			saviour = true
    POP			saviour = true
    DUP7			saviour = true
    POP			saviour = true
  tag209: 
    JUMPDEST		if (users[msg.sender].addr != entries[payoutOrder].entryAddress)...
    PUSH 0		false
    SWAP2			bool isHero = false
    POP			bool isHero = false
    PUSH C		hero
    PUSH 0		hero
    SWAP1			hero
    SLOAD			hero
    SWAP1			hero
    PUSH 100		hero
    EXP			hero
    SWAP1			hero
    DIV			hero
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		hero
    AND			hero
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[payoutOrder].entryAddress == hero
    AND			entries[payoutOrder].entryAddress == hero
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    POP			payoutOrder
    SLOAD			payoutOrder
    DUP2			entries[payoutOrder]
    SLOAD			entries[payoutOrder]
    DUP2			entries[payoutOrder]
    LT			entries[payoutOrder]
    ISZERO			entries[payoutOrder]
    PUSH [ErrorTag]		entries[payoutOrder]
    JUMPI			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    MSTORE			entries[payoutOrder]
    PUSH 20		entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    SHA3			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 4		entries[payoutOrder]
    MUL			entries[payoutOrder]
    ADD			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
  tag217: 
    JUMPDEST		entries[payoutOrder]
    POP			entries[payoutOrder]
    PUSH 0		entries[payoutOrder].entryAddress
    ADD			entries[payoutOrder].entryAddress
    PUSH 0		entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    SLOAD			entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    PUSH 100		entries[payoutOrder].entryAddress
    EXP			entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    DIV			entries[payoutOrder].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[payoutOrder].entryAddress
    AND			entries[payoutOrder].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[payoutOrder].entryAddress == hero
    AND			entries[payoutOrder].entryAddress == hero
    EQ			entries[payoutOrder].entryAddress == hero
    SWAP2			isHero = entries[payoutOrder].entryAddress == hero
    POP			isHero = entries[payoutOrder].entryAddress == hero
    DUP2			isHero = entries[payoutOrder].entryAddress == hero
    POP			isHero = entries[payoutOrder].entryAddress == hero
    DUP7			saviour
    DUP1			saviour && !isHero
    ISZERO			saviour && !isHero
    PUSH [tag218]		saviour && !isHero
    JUMPI			saviour && !isHero
    POP			saviour && !isHero
    DUP2			isHero
    ISZERO			!isHero
  tag218: 
    JUMPDEST		saviour && !isHero
    DUP1			saviour && !isHero && profit > 20 * entryDeposit / 100
    ISZERO			saviour && !isHero && profit > 20 * entryDeposit / 100
    PUSH [tag219]		saviour && !isHero && profit > 20 * entryDeposit / 100
    JUMPI			saviour && !isHero && profit > 20 * entryDeposit / 100
    POP			saviour && !isHero && profit > 20 * entryDeposit / 100
    PUSH 64		100
    DUP6			entryDeposit
    PUSH 14		20
    MUL			20 * entryDeposit
    DIV			20 * entryDeposit / 100
    DUP5			profit
    GT			profit > 20 * entryDeposit / 100
  tag219: 
    JUMPDEST		saviour && !isHero && profit > 20 * entryDeposit / 100
    DUP1			saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney
    ISZERO			saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney
    PUSH [tag220]		saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney
    JUMPI			saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney
    POP			saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney
    PUSH 16345785D8A0000		100 finney
    DUP5			profit
    GT			profit > 100 finney
  tag220: 
    JUMPDEST		saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney
    DUP1			saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney && dValue >= 5 ether
    ISZERO			saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney && dValue >= 5 ether
    PUSH [tag221]		saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney && dValue >= 5 ether
    JUMPI			saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney && dValue >= 5 ether
    POP			saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney && dValue >= 5 ether
    PUSH 4563918244F40000		5 ether
    DUP14			dValue
    LT			dValue >= 5 ether
    ISZERO			dValue >= 5 ether
  tag221: 
    JUMPDEST		saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney && dValue >= 5 ether
    ISZERO			if (saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney && dValue >= 5 ether)...
    PUSH [tag222]		if (saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney && dValue >= 5 ether)...
    JUMPI			if (saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney && dValue >= 5 ether)...
    PUSH 8AC7230489E80000		10 ether
    DUP14			dValue
    LT			dValue < 10 ether
    ISZERO			if (dValue < 10 ether)...
    PUSH [tag223]		if (dValue < 10 ether)...
    JUMPI			if (dValue < 10 ether)...
    PUSH [tag224]		rand(5)
    PUSH 5		5
    PUSH [tag177]		rand
    JUMP	[in]		rand(5)
  tag224: 
    JUMPDEST		rand(5)
    PUSH 3		3
    ADD			3 + rand(5)
    SWAP3			saviourShare = 3 + rand(5)
    POP			saviourShare = 3 + rand(5)
    DUP3			saviourShare = 3 + rand(5)
    POP			saviourShare = 3 + rand(5)
    PUSH [tag225]		if (dValue < 10 ether)...
    JUMP			if (dValue < 10 ether)...
  tag223: 
    JUMPDEST		if (dValue < 10 ether)...
    PUSH 8AC7230489E80000		10 ether
    DUP14			dValue
    LT			dValue >= 10 ether
    ISZERO			dValue >= 10 ether
    DUP1			dValue >= 10 ether && dValue < 25 ether
    ISZERO			dValue >= 10 ether && dValue < 25 ether
    PUSH [tag226]		dValue >= 10 ether && dValue < 25 ether
    JUMPI			dValue >= 10 ether && dValue < 25 ether
    POP			dValue >= 10 ether && dValue < 25 ether
    PUSH 15AF1D78B58C40000		25 ether
    DUP14			dValue
    LT			dValue < 25 ether
  tag226: 
    JUMPDEST		dValue >= 10 ether && dValue < 25 ether
    ISZERO			if (dValue >= 10 ether && dValue < 25 ether)...
    PUSH [tag227]		if (dValue >= 10 ether && dValue < 25 ether)...
    JUMPI			if (dValue >= 10 ether && dValue < 25 ether)...
    PUSH [tag228]		rand(8)
    PUSH 8		8
    PUSH [tag177]		rand
    JUMP	[in]		rand(8)
  tag228: 
    JUMPDEST		rand(8)
    PUSH 7		7
    ADD			7 + rand(8)
    SWAP3			saviourShare = 7 + rand(8)
    POP			saviourShare = 7 + rand(8)
    DUP3			saviourShare = 7 + rand(8)
    POP			saviourShare = 7 + rand(8)
    PUSH [tag229]		if (dValue >= 10 ether && dValue < 25 ether)...
    JUMP			if (dValue >= 10 ether && dValue < 25 ether)...
  tag227: 
    JUMPDEST		if (dValue >= 10 ether && dValue < 25 ether)...
    PUSH 15AF1D78B58C40000		25 ether
    DUP14			dValue
    LT			dValue >= 25 ether
    ISZERO			dValue >= 25 ether
    DUP1			dValue >= 25 ether && dValue < 40 ether
    ISZERO			dValue >= 25 ether && dValue < 40 ether
    PUSH [tag230]		dValue >= 25 ether && dValue < 40 ether
    JUMPI			dValue >= 25 ether && dValue < 40 ether
    POP			dValue >= 25 ether && dValue < 40 ether
    PUSH 22B1C8C1227A00000		40 ether
    DUP14			dValue
    LT			dValue < 40 ether
  tag230: 
    JUMPDEST		dValue >= 25 ether && dValue < 40 ether
    ISZERO			if (dValue >= 25 ether && dValue < 40 ether)...
    PUSH [tag231]		if (dValue >= 25 ether && dValue < 40 ether)...
    JUMPI			if (dValue >= 25 ether && dValue < 40 ether)...
    PUSH [tag232]		rand(13)
    PUSH D		13
    PUSH [tag177]		rand
    JUMP	[in]		rand(13)
  tag232: 
    JUMPDEST		rand(13)
    PUSH C		12
    ADD			12 + rand(13)
    SWAP3			saviourShare = 12 + rand(13)
    POP			saviourShare = 12 + rand(13)
    DUP3			saviourShare = 12 + rand(13)
    POP			saviourShare = 12 + rand(13)
    PUSH [tag233]		if (dValue >= 25 ether && dValue < 40 ether)...
    JUMP			if (dValue >= 25 ether && dValue < 40 ether)...
  tag231: 
    JUMPDEST		if (dValue >= 25 ether && dValue < 40 ether)...
    PUSH 22B1C8C1227A00000		40 ether
    DUP14			dValue
    LT			dValue >= 40 ether
    ISZERO			dValue >= 40 ether
    ISZERO			if (dValue >= 40 ether)...
    PUSH [tag234]		if (dValue >= 40 ether)...
    JUMPI			if (dValue >= 40 ether)...
    PUSH [tag235]		rand(50)
    PUSH 32		50
    PUSH [tag177]		rand
    JUMP	[in]		rand(50)
  tag235: 
    JUMPDEST		rand(50)
    SWAP3			saviourShare = rand(50)
    POP			saviourShare = rand(50)
    DUP3			saviourShare = rand(50)
    POP			saviourShare = rand(50)
  tag234: 
    JUMPDEST		if (dValue >= 40 ether)...
  tag233: 
    JUMPDEST		if (dValue >= 25 ether && dValue < 40 ether)...
  tag229: 
    JUMPDEST		if (dValue >= 10 ether && dValue < 25 ether)...
  tag225: 
    JUMPDEST		if (dValue < 10 ether)...
    PUSH 64		100
    DUP5			profit
    DIV			profit / 100
    DUP4			saviourShare *= profit / 100
    MUL			saviourShare *= profit / 100
    SWAP3			saviourShare *= profit / 100
    POP			saviourShare *= profit / 100
    DUP3			saviourShare *= profit / 100
    POP			saviourShare *= profit / 100
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		msg.sender.send
    AND			msg.sender.send
    PUSH 0		msg.sender.send(saviourShare)
    DUP5			saviourShare
    PUSH 40		msg.sender.send(saviourShare)
    MLOAD			msg.sender.send(saviourShare)
    DUP1			msg.sender.send(saviourShare)
    SWAP1			msg.sender.send(saviourShare)
    POP			msg.sender.send(saviourShare)
    PUSH 0		msg.sender.send(saviourShare)
    PUSH 40		msg.sender.send(saviourShare)
    MLOAD			msg.sender.send(saviourShare)
    DUP1			msg.sender.send(saviourShare)
    DUP4			msg.sender.send(saviourShare)
    SUB			msg.sender.send(saviourShare)
    DUP2			msg.sender.send(saviourShare)
    DUP6			msg.sender.send(saviourShare)
    DUP9			msg.sender.send(saviourShare)
    DUP9			msg.sender.send(saviourShare)
    CALL			msg.sender.send(saviourShare)
    SWAP4			msg.sender.send(saviourShare)
    POP			msg.sender.send(saviourShare)
    POP			msg.sender.send(saviourShare)
    POP			msg.sender.send(saviourShare)
    POP			msg.sender.send(saviourShare)
    POP			msg.sender.send(saviourShare)
  tag222: 
    JUMPDEST		if (saviour && !isHero && profit > 20 * entryDeposit / 100 && profit > 100 finney && dValue >= 5 ether)...
    DUP3			saviourShare
    DUP7			entryPayout
    SUB			entryPayout - saviourShare
    SWAP1			uint payout = entryPayout - saviourShare
    POP			uint payout = entryPayout - saviourShare
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    POP			payoutOrder
    SLOAD			payoutOrder
    DUP2			entries[payoutOrder]
    SLOAD			entries[payoutOrder]
    DUP2			entries[payoutOrder]
    LT			entries[payoutOrder]
    ISZERO			entries[payoutOrder]
    PUSH [ErrorTag]		entries[payoutOrder]
    JUMPI			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    MSTORE			entries[payoutOrder]
    PUSH 20		entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    SHA3			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 4		entries[payoutOrder]
    MUL			entries[payoutOrder]
    ADD			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
  tag236: 
    JUMPDEST		entries[payoutOrder]
    POP			entries[payoutOrder]
    PUSH 0		entries[payoutOrder].entryAddress
    ADD			entries[payoutOrder].entryAddress
    PUSH 0		entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    SLOAD			entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    PUSH 100		entries[payoutOrder].entryAddress
    EXP			entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    DIV			entries[payoutOrder].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[payoutOrder].entryAddress
    AND			entries[payoutOrder].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[payoutOrder].entryAddress.send
    AND			entries[payoutOrder].entryAddress.send
    PUSH 0		entries[payoutOrder].entryAddress.send(payout)
    DUP3			payout
    PUSH 40		entries[payoutOrder].entryAddress.send(payout)
    MLOAD			entries[payoutOrder].entryAddress.send(payout)
    DUP1			entries[payoutOrder].entryAddress.send(payout)
    SWAP1			entries[payoutOrder].entryAddress.send(payout)
    POP			entries[payoutOrder].entryAddress.send(payout)
    PUSH 0		entries[payoutOrder].entryAddress.send(payout)
    PUSH 40		entries[payoutOrder].entryAddress.send(payout)
    MLOAD			entries[payoutOrder].entryAddress.send(payout)
    DUP1			entries[payoutOrder].entryAddress.send(payout)
    DUP4			entries[payoutOrder].entryAddress.send(payout)
    SUB			entries[payoutOrder].entryAddress.send(payout)
    DUP2			entries[payoutOrder].entryAddress.send(payout)
    DUP6			entries[payoutOrder].entryAddress.send(payout)
    DUP9			entries[payoutOrder].entryAddress.send(payout)
    DUP9			entries[payoutOrder].entryAddress.send(payout)
    CALL			entries[payoutOrder].entryAddress.send(payout)
    SWAP4			entries[payoutOrder].entryAddress.send(payout)
    POP			entries[payoutOrder].entryAddress.send(payout)
    POP			entries[payoutOrder].entryAddress.send(payout)
    POP			entries[payoutOrder].entryAddress.send(payout)
    POP			entries[payoutOrder].entryAddress.send(payout)
    POP			entries[payoutOrder].entryAddress.send(payout)
    PUSH E01920728668D89F092EF9CB92036BAD90964BB622EEC508D2C3FFE1D582EFB2		Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    PUSH E		entries
    PUSH 0		entries
    POP			entries
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    POP			payoutOrder
    SLOAD			payoutOrder
    DUP2			entries[payoutOrder]
    SLOAD			entries[payoutOrder]
    DUP2			entries[payoutOrder]
    LT			entries[payoutOrder]
    ISZERO			entries[payoutOrder]
    PUSH [ErrorTag]		entries[payoutOrder]
    JUMPI			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    MSTORE			entries[payoutOrder]
    PUSH 20		entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
    SHA3			entries[payoutOrder]
    SWAP1			entries[payoutOrder]
    PUSH 4		entries[payoutOrder]
    MUL			entries[payoutOrder]
    ADD			entries[payoutOrder]
    PUSH 0		entries[payoutOrder]
  tag237: 
    JUMPDEST		entries[payoutOrder]
    POP			entries[payoutOrder]
    PUSH 0		entries[payoutOrder].entryAddress
    ADD			entries[payoutOrder].entryAddress
    PUSH 0		entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    SLOAD			entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    PUSH 100		entries[payoutOrder].entryAddress
    EXP			entries[payoutOrder].entryAddress
    SWAP1			entries[payoutOrder].entryAddress
    DIV			entries[payoutOrder].entryAddress
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		entries[payoutOrder].entryAddress
    AND			entries[payoutOrder].entryAddress
    CALLER			msg.sender
    DUP4			payout
    PUSH 40		Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    MLOAD			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    DUP1			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    DUP5			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    AND			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    DUP2			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    MSTORE			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    PUSH 20		Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    ADD			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    DUP4			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    AND			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    DUP2			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    MSTORE			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    PUSH 20		Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    ADD			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    DUP3			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    DUP2			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    MSTORE			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    PUSH 20		Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    ADD			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    SWAP4			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    POP			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    POP			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    POP			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    POP			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    PUSH 40		Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    MLOAD			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    DUP1			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    SWAP2			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    SUB			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    SWAP1			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    LOG1			Rescue(entries[payoutOrder].entryAddress, msg.sender, payout)
    DUP6			entryPayout
    PUSH 1		balance
    PUSH 0		balance
    DUP3			balance -= entryPayout
    DUP3			balance -= entryPayout
    DUP3			balance -= entryPayout
    POP			balance -= entryPayout
    SLOAD			balance -= entryPayout
    SUB			balance -= entryPayout
    SWAP3			balance -= entryPayout
    POP			balance -= entryPayout
    POP			balance -= entryPayout
    DUP2			balance -= entryPayout
    SWAP1			balance -= entryPayout
    SSTORE			balance -= entryPayout
    POP			balance -= entryPayout
    DUP6			entryPayout
    PUSH 3		usersProfits
    PUSH 0		usersProfits
    DUP3			usersProfits += entryPayout
    DUP3			usersProfits += entryPayout
    DUP3			usersProfits += entryPayout
    POP			usersProfits += entryPayout
    SLOAD			usersProfits += entryPayout
    ADD			usersProfits += entryPayout
    SWAP3			usersProfits += entryPayout
    POP			usersProfits += entryPayout
    POP			usersProfits += entryPayout
    DUP2			usersProfits += entryPayout
    SWAP1			usersProfits += entryPayout
    SSTORE			usersProfits += entryPayout
    POP			usersProfits += entryPayout
    PUSH 4		rescues
    PUSH 0		rescues
    DUP2			rescues++
    DUP2			rescues++
    POP			rescues++
    SLOAD			rescues++
    DUP1			rescues++
    SWAP3			rescues++
    SWAP2			rescues++
    SWAP1			rescues++
    PUSH 1		rescues++
    ADD			rescues++
    SWAP2			rescues++
    SWAP1			rescues++
    POP			rescues++
    SSTORE			rescues++
    POP			rescues++
    PUSH 9		payoutOrder
    PUSH 0		payoutOrder
    DUP2			payoutOrder++
    DUP2			payoutOrder++
    POP			payoutOrder++
    SLOAD			payoutOrder++
    DUP1			payoutOrder++
    SWAP3			payoutOrder++
    SWAP2			payoutOrder++
    SWAP1			payoutOrder++
    PUSH 1		payoutOrder++
    ADD			payoutOrder++
    SWAP2			payoutOrder++
    SWAP1			payoutOrder++
    POP			payoutOrder++
    SSTORE			payoutOrder++
    POP			payoutOrder++
    PUSH [tag203]		while (balance > entries[payoutOrder].payout) {...
    JUMP			while (balance > entries[payoutOrder].payout) {...
  tag204: 
    JUMPDEST		while (balance > entries[payoutOrder].payout) {...
    DUP7			saviour
    DUP1			saviour && users[msg.sender].rescueCount > rescueRecord
    ISZERO			saviour && users[msg.sender].rescueCount > rescueRecord
    PUSH [tag238]		saviour && users[msg.sender].rescueCount > rescueRecord
    JUMPI			saviour && users[msg.sender].rescueCount > rescueRecord
    POP			saviour && users[msg.sender].rescueCount > rescueRecord
    PUSH A		rescueRecord
    PUSH 0		rescueRecord
    POP			rescueRecord
    SLOAD			rescueRecord
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender]
    AND			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    SWAP1			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    PUSH 0		users[msg.sender]
    SHA3			users[msg.sender]
    PUSH 0		users[msg.sender]
    POP			users[msg.sender]
    PUSH 3		users[msg.sender].rescueCount
    ADD			users[msg.sender].rescueCount
    PUSH 0		users[msg.sender].rescueCount
    POP			users[msg.sender].rescueCount
    SLOAD			users[msg.sender].rescueCount
    GT			users[msg.sender].rescueCount > rescueRecord
  tag238: 
    JUMPDEST		saviour && users[msg.sender].rescueCount > rescueRecord
    ISZERO			if (saviour && users[msg.sender].rescueCount > rescueRecord)...
    PUSH [tag239]		if (saviour && users[msg.sender].rescueCount > rescueRecord)...
    JUMPI			if (saviour && users[msg.sender].rescueCount > rescueRecord)...
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[msg.sender]
    CALLER			msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[msg.sender]
    AND			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    SWAP1			users[msg.sender]
    DUP2			users[msg.sender]
    MSTORE			users[msg.sender]
    PUSH 20		users[msg.sender]
    ADD			users[msg.sender]
    PUSH 0		users[msg.sender]
    SHA3			users[msg.sender]
    PUSH 0		users[msg.sender]
    POP			users[msg.sender]
    PUSH 3		users[msg.sender].rescueCount
    ADD			users[msg.sender].rescueCount
    PUSH 0		users[msg.sender].rescueCount
    POP			users[msg.sender].rescueCount
    SLOAD			users[msg.sender].rescueCount
    PUSH A		rescueRecord
    PUSH 0		rescueRecord
    POP			rescueRecord = users[msg.sender].rescueCount
    DUP2			rescueRecord = users[msg.sender].rescueCount
    SWAP1			rescueRecord = users[msg.sender].rescueCount
    SSTORE			rescueRecord = users[msg.sender].rescueCount
    POP			rescueRecord = users[msg.sender].rescueCount
    CALLER			msg.sender
    PUSH C		hero
    PUSH 0		hero
    PUSH 100		hero = msg.sender
    EXP			hero = msg.sender
    DUP2			hero = msg.sender
    SLOAD			hero = msg.sender
    DUP2			hero = msg.sender
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		hero = msg.sender
    MUL			hero = msg.sender
    NOT			hero = msg.sender
    AND			hero = msg.sender
    SWAP1			hero = msg.sender
    DUP4			hero = msg.sender
    MUL			hero = msg.sender
    OR			hero = msg.sender
    SWAP1			hero = msg.sender
    SSTORE			hero = msg.sender
    POP			hero = msg.sender
    PUSH F245D8C6B1E419ECC1DC75BAA88B77D567D898C79F36F9C1A605EE4DCBD4BBF2		NewHero(msg.sender)
    CALLER			msg.sender
    PUSH 40		NewHero(msg.sender)
    MLOAD			NewHero(msg.sender)
    DUP1			NewHero(msg.sender)
    DUP3			NewHero(msg.sender)
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		NewHero(msg.sender)
    AND			NewHero(msg.sender)
    DUP2			NewHero(msg.sender)
    MSTORE			NewHero(msg.sender)
    PUSH 20		NewHero(msg.sender)
    ADD			NewHero(msg.sender)
    SWAP2			NewHero(msg.sender)
    POP			NewHero(msg.sender)
    POP			NewHero(msg.sender)
    PUSH 40		NewHero(msg.sender)
    MLOAD			NewHero(msg.sender)
    DUP1			NewHero(msg.sender)
    SWAP2			NewHero(msg.sender)
    SUB			NewHero(msg.sender)
    SWAP1			NewHero(msg.sender)
    LOG1			NewHero(msg.sender)
  tag239: 
    JUMPDEST		if (saviour && users[msg.sender].rescueCount > rescueRecord)...
  tag169: 
    JUMPDEST		function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    POP			function jumpIn() private {...
    JUMP	[out]		function jumpIn() private {...
  tag118: 
    JUMPDEST		function addNewUser(address Address) private...
    PUSH 0		0
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address].addr == address(0)
    AND			users[Address].addr == address(0)
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[Address]
    DUP4			Address
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address]
    AND			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    SWAP1			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    PUSH 0		users[Address]
    SHA3			users[Address]
    PUSH 0		users[Address]
    POP			users[Address]
    PUSH 1		users[Address].addr
    ADD			users[Address].addr
    PUSH 0		users[Address].addr
    SWAP1			users[Address].addr
    SLOAD			users[Address].addr
    SWAP1			users[Address].addr
    PUSH 100		users[Address].addr
    EXP			users[Address].addr
    SWAP1			users[Address].addr
    DIV			users[Address].addr
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address].addr
    AND			users[Address].addr
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address].addr == address(0)
    AND			users[Address].addr == address(0)
    EQ			users[Address].addr == address(0)
    ISZERO			if (users[Address].addr == address(0))...
    PUSH [tag241]		if (users[Address].addr == address(0))...
    JUMPI			if (users[Address].addr == address(0))...
    PUSH 2		uniqueUsers
    PUSH 0		uniqueUsers
    DUP2			++uniqueUsers
    DUP2			++uniqueUsers
    POP			++uniqueUsers
    SLOAD			++uniqueUsers
    PUSH 1		++uniqueUsers
    ADD			++uniqueUsers
    SWAP2			++uniqueUsers
    SWAP1			++uniqueUsers
    POP			++uniqueUsers
    DUP2			++uniqueUsers
    SWAP1			++uniqueUsers
    SSTORE			++uniqueUsers
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[Address]
    DUP4			Address
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address]
    AND			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    SWAP1			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    PUSH 0		users[Address]
    SHA3			users[Address]
    PUSH 0		users[Address]
    POP			users[Address]
    PUSH 0		users[Address].id
    ADD			users[Address].id
    PUSH 0		users[Address].id
    POP			users[Address].id = ++uniqueUsers
    DUP2			users[Address].id = ++uniqueUsers
    SWAP1			users[Address].id = ++uniqueUsers
    SSTORE			users[Address].id = ++uniqueUsers
    POP			users[Address].id = ++uniqueUsers
    DUP1			Address
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[Address]
    DUP4			Address
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address]
    AND			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    SWAP1			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    PUSH 0		users[Address]
    SHA3			users[Address]
    PUSH 0		users[Address]
    POP			users[Address]
    PUSH 1		users[Address].addr
    ADD			users[Address].addr
    PUSH 0		users[Address].addr
    PUSH 100		users[Address].addr = Address
    EXP			users[Address].addr = Address
    DUP2			users[Address].addr = Address
    SLOAD			users[Address].addr = Address
    DUP2			users[Address].addr = Address
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address].addr = Address
    MUL			users[Address].addr = Address
    NOT			users[Address].addr = Address
    AND			users[Address].addr = Address
    SWAP1			users[Address].addr = Address
    DUP4			users[Address].addr = Address
    MUL			users[Address].addr = Address
    OR			users[Address].addr = Address
    SWAP1			users[Address].addr = Address
    SSTORE			users[Address].addr = Address
    POP			users[Address].addr = Address
    PUSH 40		users[Address].nickname = 'UnnamedPlayer'
    PUSH 40		users[Address].nickname = 'UnnamedPlayer'
    MLOAD			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    DUP2			users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    PUSH 40		users[Address].nickname = 'UnnamedPlayer'
    MSTORE			users[Address].nickname = 'UnnamedPlayer'
    DUP1			users[Address].nickname = 'UnnamedPlayer'
    PUSH D		users[Address].nickname = 'UnnamedPlayer'
    DUP2			users[Address].nickname = 'UnnamedPlayer'
    MSTORE			users[Address].nickname = 'UnnamedPlayer'
    PUSH 20		users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    PUSH 556E6E616D6564506C6179657200000000000000000000000000000000000000		users[Address].nickname = 'UnnamedPlayer'
    DUP2			users[Address].nickname = 'UnnamedPlayer'
    MSTORE			users[Address].nickname = 'UnnamedPlayer'
    PUSH 20		users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    POP			users[Address].nickname = 'UnnamedPlayer'
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[Address]
    DUP4			Address
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address]
    AND			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    SWAP1			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    PUSH 0		users[Address]
    SHA3			users[Address]
    PUSH 0		users[Address]
    POP			users[Address]
    PUSH 2		users[Address].nickname
    ADD			users[Address].nickname
    PUSH 0		users[Address].nickname
    POP			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    DUP1			users[Address].nickname = 'UnnamedPlayer'
    MLOAD			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    PUSH 20		users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    DUP3			users[Address].nickname = 'UnnamedPlayer'
    DUP1			users[Address].nickname = 'UnnamedPlayer'
    SLOAD			users[Address].nickname = 'UnnamedPlayer'
    PUSH 1		users[Address].nickname = 'UnnamedPlayer'
    DUP2			users[Address].nickname = 'UnnamedPlayer'
    PUSH 1		users[Address].nickname = 'UnnamedPlayer'
    AND			users[Address].nickname = 'UnnamedPlayer'
    ISZERO			users[Address].nickname = 'UnnamedPlayer'
    PUSH 100		users[Address].nickname = 'UnnamedPlayer'
    MUL			users[Address].nickname = 'UnnamedPlayer'
    SUB			users[Address].nickname = 'UnnamedPlayer'
    AND			users[Address].nickname = 'UnnamedPlayer'
    PUSH 2		users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    DIV			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    PUSH 0		users[Address].nickname = 'UnnamedPlayer'
    MSTORE			users[Address].nickname = 'UnnamedPlayer'
    PUSH 20		users[Address].nickname = 'UnnamedPlayer'
    PUSH 0		users[Address].nickname = 'UnnamedPlayer'
    SHA3			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    PUSH 1F		users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    PUSH 20		users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    DIV			users[Address].nickname = 'UnnamedPlayer'
    DUP2			users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    SWAP3			users[Address].nickname = 'UnnamedPlayer'
    DUP3			users[Address].nickname = 'UnnamedPlayer'
    PUSH 1F		users[Address].nickname = 'UnnamedPlayer'
    LT			users[Address].nickname = 'UnnamedPlayer'
    PUSH [tag243]		users[Address].nickname = 'UnnamedPlayer'
    JUMPI			users[Address].nickname = 'UnnamedPlayer'
    DUP1			users[Address].nickname = 'UnnamedPlayer'
    MLOAD			users[Address].nickname = 'UnnamedPlayer'
    PUSH FF		users[Address].nickname = 'UnnamedPlayer'
    NOT			users[Address].nickname = 'UnnamedPlayer'
    AND			users[Address].nickname = 'UnnamedPlayer'
    DUP4			users[Address].nickname = 'UnnamedPlayer'
    DUP1			users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    OR			users[Address].nickname = 'UnnamedPlayer'
    DUP6			users[Address].nickname = 'UnnamedPlayer'
    SSTORE			users[Address].nickname = 'UnnamedPlayer'
    PUSH [tag242]		users[Address].nickname = 'UnnamedPlayer'
    JUMP			users[Address].nickname = 'UnnamedPlayer'
  tag243: 
    JUMPDEST		users[Address].nickname = 'UnnamedPlayer'
    DUP3			users[Address].nickname = 'UnnamedPlayer'
    DUP1			users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    PUSH 1		users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    DUP6			users[Address].nickname = 'UnnamedPlayer'
    SSTORE			users[Address].nickname = 'UnnamedPlayer'
    DUP3			users[Address].nickname = 'UnnamedPlayer'
    ISZERO			users[Address].nickname = 'UnnamedPlayer'
    PUSH [tag242]		users[Address].nickname = 'UnnamedPlayer'
    JUMPI			users[Address].nickname = 'UnnamedPlayer'
    SWAP2			users[Address].nickname = 'UnnamedPlayer'
    DUP3			users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
  tag244: 
    JUMPDEST		users[Address].nickname = 'UnnamedPlayer'
    DUP3			users[Address].nickname = 'UnnamedPlayer'
    DUP2			users[Address].nickname = 'UnnamedPlayer'
    GT			users[Address].nickname = 'UnnamedPlayer'
    ISZERO			users[Address].nickname = 'UnnamedPlayer'
    PUSH [tag245]		users[Address].nickname = 'UnnamedPlayer'
    JUMPI			users[Address].nickname = 'UnnamedPlayer'
    DUP3			users[Address].nickname = 'UnnamedPlayer'
    MLOAD			users[Address].nickname = 'UnnamedPlayer'
    DUP3			users[Address].nickname = 'UnnamedPlayer'
    PUSH 0		users[Address].nickname = 'UnnamedPlayer'
    POP			users[Address].nickname = 'UnnamedPlayer'
    SSTORE			users[Address].nickname = 'UnnamedPlayer'
    SWAP2			users[Address].nickname = 'UnnamedPlayer'
    PUSH 20		users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    SWAP2			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    PUSH 1		users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    PUSH [tag244]		users[Address].nickname = 'UnnamedPlayer'
    JUMP			users[Address].nickname = 'UnnamedPlayer'
  tag245: 
    JUMPDEST		users[Address].nickname = 'UnnamedPlayer'
  tag242: 
    JUMPDEST		users[Address].nickname = 'UnnamedPlayer'
    POP			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    POP			users[Address].nickname = 'UnnamedPlayer'
    PUSH [tag246]		users[Address].nickname = 'UnnamedPlayer'
    SWAP2			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    PUSH [tag247]		users[Address].nickname = 'UnnamedPlayer'
    JUMP			users[Address].nickname = 'UnnamedPlayer'
  tag247: 
    JUMPDEST		users[Address].nickname = 'UnnamedPlayer'
    DUP1			users[Address].nickname = 'UnnamedPlayer'
    DUP3			users[Address].nickname = 'UnnamedPlayer'
    GT			users[Address].nickname = 'UnnamedPlayer'
    ISZERO			users[Address].nickname = 'UnnamedPlayer'
    PUSH [tag248]		users[Address].nickname = 'UnnamedPlayer'
    JUMPI			users[Address].nickname = 'UnnamedPlayer'
    PUSH 0		users[Address].nickname = 'UnnamedPlayer'
    DUP2			users[Address].nickname = 'UnnamedPlayer'
    DUP2			users[Address].nickname = 'UnnamedPlayer'
    POP			users[Address].nickname = 'UnnamedPlayer'
    PUSH 0		users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    SSTORE			users[Address].nickname = 'UnnamedPlayer'
    POP			users[Address].nickname = 'UnnamedPlayer'
    PUSH 1		users[Address].nickname = 'UnnamedPlayer'
    ADD			users[Address].nickname = 'UnnamedPlayer'
    PUSH [tag247]		users[Address].nickname = 'UnnamedPlayer'
    JUMP			users[Address].nickname = 'UnnamedPlayer'
  tag248: 
    JUMPDEST		users[Address].nickname = 'UnnamedPlayer'
    POP			users[Address].nickname = 'UnnamedPlayer'
    SWAP1			users[Address].nickname = 'UnnamedPlayer'
    JUMP			users[Address].nickname = 'UnnamedPlayer'
  tag246: 
    JUMPDEST		users[Address].nickname = 'UnnamedPlayer'
    POP			users[Address].nickname = 'UnnamedPlayer'
    POP			users[Address].nickname = 'UnnamedPlayer'
    PUSH 0		0
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[Address]
    DUP4			Address
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address]
    AND			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    SWAP1			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    PUSH 0		users[Address]
    SHA3			users[Address]
    PUSH 0		users[Address]
    POP			users[Address]
    PUSH 3		users[Address].rescueCount
    ADD			users[Address].rescueCount
    PUSH 0		users[Address].rescueCount
    POP			users[Address].rescueCount = 0
    DUP2			users[Address].rescueCount = 0
    SWAP1			users[Address].rescueCount = 0
    SSTORE			users[Address].rescueCount = 0
    POP			users[Address].rescueCount = 0
    PUSH 0		0
    PUSH D		users
    PUSH 0		users
    POP			users
    PUSH 0		users[Address]
    DUP4			Address
    PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF		users[Address]
    AND			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    SWAP1			users[Address]
    DUP2			users[Address]
    MSTORE			users[Address]
    PUSH 20		users[Address]
    ADD			users[Address]
    PUSH 0		users[Address]
    SHA3			users[Address]
    PUSH 0		users[Address]
    POP			users[Address]
    PUSH 4		users[Address].rescueTokens
    ADD			users[Address].rescueTokens
    PUSH 0		users[Address].rescueTokens
    POP			users[Address].rescueTokens = 0
    DUP2			users[Address].rescueTokens = 0
    SWAP1			users[Address].rescueTokens = 0
    SSTORE			users[Address].rescueTokens = 0
    POP			users[Address].rescueTokens = 0
  tag241: 
    JUMPDEST		if (users[Address].addr == address(0))...
  tag240: 
    JUMPDEST		function addNewUser(address Address) private...
    POP			function addNewUser(address Address) private...
    JUMP	[out]		function addNewUser(address Address) private...
  tag177: 
    JUMPDEST		function rand(uint max) constant private returns (uint256 result){...
    PUSH 0		uint256 result
    PUSH 0		uint256 factor
    PUSH 0		uint256 lastBlockNumber
    PUSH 0		uint256 hashVal
    DUP5			max
    PUSH 64		100
    PUSH 28F5C28F5C28F5C28F5C28F5C28F5C28F5C28F5C28F5C28F5C28F5C28F5C28F		1157920892373161954235709850086879078532699846656405640394575840079131296399
    MUL			FACTOR * 100
    DIV			FACTOR * 100 / max
    SWAP3			uint256 factor = FACTOR * 100 / max
    POP			uint256 factor = FACTOR * 100 / max
    PUSH 1		1
    NUMBER			block.number
    SUB			block.number - 1
    SWAP2			uint256 lastBlockNumber = block.number - 1
    POP			uint256 lastBlockNumber = block.number - 1
    DUP2			lastBlockNumber
    BLOCKHASH			block.blockhash(lastBlockNumber)
    PUSH 1		uint256(block.blockhash(lastBlockNumber))
    SWAP1			uint256(block.blockhash(lastBlockNumber))
    DIV			uint256(block.blockhash(lastBlockNumber))
    SWAP1			uint256 hashVal = uint256(block.blockhash(lastBlockNumber))
    POP			uint256 hashVal = uint256(block.blockhash(lastBlockNumber))
    PUSH 1		1
    DUP6			max
    DUP5			factor
    DUP4			hashVal
    DIV			uint256(hashVal) / factor
    MOD			uint256((uint256(hashVal) / factor)) % max
    ADD			uint256((uint256(hashVal) / factor)) % max + 1
    SWAP4			return uint256((uint256(hashVal) / factor)) % max + 1
    POP			return uint256((uint256(hashVal) / factor)) % max + 1
    PUSH [tag249]		return uint256((uint256(hashVal) / factor)) % max + 1
    JUMP			return uint256((uint256(hashVal) / factor)) % max + 1
  tag249: 
    JUMPDEST		function rand(uint max) constant private returns (uint256 result){...
    POP			function rand(uint max) constant private returns (uint256 result){...
    POP			function rand(uint max) constant private returns (uint256 result){...
    POP			function rand(uint max) constant private returns (uint256 result){...
    SWAP2			function rand(uint max) constant private returns (uint256 result){...
    SWAP1			function rand(uint max) constant private returns (uint256 result){...
    POP			function rand(uint max) constant private returns (uint256 result){...
    JUMP	[out]		function rand(uint max) constant private returns (uint256 result){...
  .data:
    f0a35cb4: 546865206e756d626572206f662052657363756520546f6b656e73207468652075736572206861732e20546f6b656e73206172652061776172646564207768656e20796f7572206465706f7369747320736176652070656f706c652c20616e642075736564206175746f6d61746963616c6c79206f6e20796f7572206e657874206465706f7369742e20546865792070726f76696465206120302e31206d756c7469706c69657220696e6372656173652070657220746f6b656e2e20282b302e35206d617829
    dcd5b0d5: 546865206d756c7469706c69657273206170706c69656420746f20616c6c206465706f736974733a207468652066696e616c206d756c7469706c69657220697320612072616e646f6d206e756d626572206265747765656e20746865206d756c74706c696572732073686f776e2064697669646564206279203130302e2042792064656661756c742078312e317e78312e352028757020746f2078322069662072657363756520746f6b656e732061726520757365642c206772616e74696e67202b302e312070657220746f6b656e292e2049742064657465726d696e65732074686520616d6f756e74206f66206d6f6e657920796f752077696c6c20676574207768656e207265736375656420286120736176696f7572207368617265206d69676874206265206465647563746564292e
